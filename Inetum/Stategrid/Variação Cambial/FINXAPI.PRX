#INCLUDE "finxapi.ch"
#INCLUDE "PROTHEUS.CH"
#Include "FWMVCDEF.CH"

#DEFINE CR_VLRABAT 01
#DEFINE CR_VLDESCR 02
#DEFINE CR_VLACRES 03
#DEFINE CR_GRCONT  04

#DEFINE CMP_RECNO  1
#DEFINE CMP_VLRCMP 2
#DEFINE CMP_VLABAT 3
#DEFINE CMP_DTREC  4
#DEFINE CMP_LOTE   5
#DEFINE CMP_DATAP  6
#DEFINE CMP_TAXAP  7
#DEFINE CMP_NUMDEC 8
#DEFINE CMP_GRCONT 9
#DEFINE CMP_TAXAD  10

Static dLastPcc  	:= CTOD("22/06/2015")
Static __nJurCmpLj	:= 0
Static __nDesCmpLj	:= 0
Static __nMulCmpLj	:= 0
Static _oFxAPITRB	:= NIL
Static __lRastro	:= FVerRstFin()
Static __nValProc	:= 0
Static lFamad 		:= SA2->(ColumnPos("A2_RECFMD")) > 0 .and. SE2->(ColumnPos("E2_FAMAD")) > 0 .and. SE2->(ColumnPos("E2_PARCFAM"))  > 0
Static __oMoviPA    := Nil
Static __oCanMov    := Nil
Static __oCompAu    := Nil
Static aAdianta     := Nil
Static bFilFIE      := Nil
Static lAdComPart   := Nil
Static __lVldFKB    := .T.
Static __lPIXCanc   := FindFunction("PIXCancel")
Static __lTemF71    := AliasIndic('F71')
Static __lTitPix    := FindFunction("TitTemPIX") 
Static __lPENxtSeq  := ExistBlock("FANXTSEQ") // PE antes e depois da busca de SEQ *** específico para Totvs
Static __aStruSE1Q  := NIL
Static __aStruSE2Q  := NIL
Static __oPreparP   := NIL
Static __oPreparR   := NIL
Static __oTotImp    := Nil
Static __nTamOri    := Nil
Static __nTamDoc    := Nil

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaBaixaCR ³ Autor ³ Eduardo Riera         ³ Data ³31.08.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de Baixa a Receber                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array com os dados do titulo                          ³±±
±±³          ³       [1] Abatimento (-)                                    ³±±
±±³          ³       [2] Descrescimo (-)                                   ³±±
±±³          ³       [3] Acrescimo   (+)                                   ³±±
±±³          ³ExpA2: Array com os dados da Baixa                           ³±±
±±³          ³       [1] Motivo da Baixa ( Codigo )                        ³±±
±±³          ³       [2] Banco                                             ³±±
±±³          ³       [3] Agencia                                           ³±±
±±³          ³       [4] Conta                                             ³±±
±±³          ³       [5] Data Recebimento                                  ³±±
±±³          ³       [6] Data Credito                                      ³±±
±±³          ³       [7] Historico da Baixa                                ³±±
±±³          ³       [8] Desconto (-)                                      ³±±
±±³          ³       [9] Multa    (+)                                      ³±±
±±³          ³       [A] Juros    (+)                                      ³±±
±±³          ³       [B] Correcao Monetaria                                ³±±
±±³          ³       [C] Valor Recebido                                    ³±±
±±³          ³       [D] Nosso Numero                                 (OPC)³±±
±±³          ³       [E] Nome do Arquivo CNAB                         (OPC)³±±
±±³          ³       [F] Ocorrencia CNAB                              (OPC)³±±
±±³          ³       [G] Numero do Lote                               (OPC)³±±
±±³          ³       [H] Outros Valores                               (OPC)³±±
±±³          ³       [I] Diferenca de Cambio                          (OPC)³±±
±±³          ³       [J] Taxa da Moeda                                (OPC)³±±
±±³          ³       [L] Numero da Liquidacao                         (OPC)³±±
±±³          ³       [M] Tipo do titulo de liquidacao                 (OPC)³±±
±±³          ³ExpL3: Desconto para comissao                                ³±±
±±³          ³ExpL4: Juros para comissao                                   ³±±
±±³          ³ExpL5: Contabilizacao On-Line                                ³±±
±±³          ³ExpC6: Codigo da Sequencia de Baixa. Deve ser utilizado      ³±±
±±³          ³       somente em operacoes de estorno da baixa         (OPC)³±±
±±³          ³ExpL7: Indica se os movimentos devem ser excluidos apos o    ³±±
±±³          ³       cancelamento da baixa                            (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpC1: Primary Key do documento gerado.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a baixa dos titulos a  ³±±
±±³          ³receber conforme os parametro solicitados                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ACTUALIZACIONES SUFRIDAS DESDE LA CONSTRUCCION INICIAL         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Fecha  ³ Llamado ³  Motivo de alteracion                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³LuisEnríquez³12/07/18³DMINA-   ³Se modifican las funciones fPedAdtSld y ³±±
±±³            ³        ³     3630³fPedAdtPed, las cuales seran utilizadas ³±±
±±³            ³        ³         ³para la funcionalidad de Compensacion   ³±±
±±³            ³        ³         ³de Anticipos a partir de una Guia de    ³±±
±±³            ³        ³         ³Remision. (PER)                         ³±±
±±³LuisEnríquez³        ³         ³Se replica funcionalidad atendida en    ³±±
±±³            ³        ³         ³DMINA-62 de Fact. de Anticipos. (PER)   ³±±
±±³Alf Medrano ³        ³DMINA-   ³Actualizacion func. FPedAdtGrv cuando es³±±
±±³            ³        ³     3630³inclusion valida que el campo FIE_VALOR ³±±
±±³            ³        ³         ³tome valor de array aPedidos cuando es  ³±±
±±³            ³        ³         ³remisión para perú                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
Ë±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
#DEFINE CR_VLRABAT 01
#DEFINE CR_VLDESCR 02
#DEFINE CR_VLACRES 03

#DEFINE BXCR_MOTBX 01
#DEFINE BXCR_BCO   02
#DEFINE BXCR_AGE   03
#DEFINE BXCR_CONTA 04
#DEFINE BXCR_DTREC 05
#DEFINE BXCR_DTCRD 06
#DEFINE BXCR_HIST  07
#DEFINE BXCR_DESC  08
#DEFINE BXCR_MULTA 09
#DEFINE BXCR_JUROS 10
#DEFINE BXCR_CM    11
#DEFINE BXCR_VLREC 12
#DEFINE BXCR_NSNUM 13
#DEFINE BXCR_CNAB  14
#DEFINE BXCR_OCOR  15
#DEFINE BXCR_LOTE  16
#DEFINE BXCR_OTRGA 17
#DEFINE BXCR_CAMBI 18
#DEFINE BXCR_TAXA  19
#DEFINE BXCR_NUMLQ 20
#DEFINE BXCR_TPLIQ 21

Function FaBaixaCR(	aTitulo, aBaixa, lDesconto, lJuros, lLctPad, cEstorno, lDeleta, nSomaCheq ) As Character
Local lZeraSE1
Local nToler
Local aArea			:= GetArea()
Local aAreaSE1		:= SE1->(GetArea())
Local aComissao		:= {}
Local aRegSE5		:= {}
Local aAuxFK6       := {}
Local nBxSldMdCR	:= 0
Local nVlRecMdCR	:= 0
Local nSldMdCr		:= 0
Local nX			:= 0
Local nY			:= 0
Local nValor		:= 0
Local nAtraso		:= 0
Local nVlrToler		:= 0
Local nVlMoed2		:= 0
Local nRecFK1       := 0
Local lExterno		:= .F.
Local lContinua		:= .T.
Local lQuery		:= .F.
Local lEstorno		:= !Empty(cEstorno)
Local cAliasSE1		:= "SE1"
Local cAliasSE5		:= "SE5"
Local cHistMov		:= ""
Local cTpDoc		:= ""
Local cSeqBx		:= ""
Local cPrefixo		:= SE1->E1_PREFIXO
Local cNumero		:= SE1->E1_NUM
Local cParcela		:= SE1->E1_PARCELA
Local cCliente		:= SE1->E1_CLIENTE
Local cLoja			:= SE1->E1_LOJA
Local cFilterSE1	:= SE1->(dbFilter())
Local cPrimary		:= ""
Local lUsaFlag		:= SuperGetMV("MV_CTBFLAG", .T. /*lHelp*/, .F. /*cPadrao*/)
Local cSldBxCr		:= SuperGetMv("MV_SLDBXCR", .F. , "B")
Local lGemReneg 	:= "T_GEMA1" $ Upper(AllTrim(FunName()))
Local cLstDesc		:= FN022LSTCB(2)	//Lista das situacoes de cobranca (Descontada)
Local nOrdSE1       := SE1->(IndexOrd())
Local cQuery        := ""
Local cKeySE1       := SE1->(IndexKey())
Local aStruSE1      := {}
Local aStruSE5      := {}
Local aStruFK1      := {}
//Fluxo por natureza financeira
Local lAtuSldNat	:= .T.
Local lTravaSA1		:= !ExistBlock("F070TRAVA") .Or. ExecBlock("F070TRAVA", .F., .F.)
//Reestrutura das tabelas do processo de movimento bancário
Local oModelBxR		:= FWLoadModel("FINM010") //Model de baixas a receber
Local oSubFK1		:= Nil	//BAIXAS A RECEBER
Local oSubFK5		:= Nil  //MOVTO BANCARIO
Local oSubFK6		:= Nil	//Valores acessórios (Juros, Multa, Desconto, Correção Monetária)
Local cLog			:= ""
Local cChaveFK7		:= ""
Local cCamposE5		:= ""
Local lRet			:= .T.
Local oSubFKA		:= Nil
//Dados da tabela auxiliar com o código do título a receber (SE1)
Local cChaveTit		:= ''
Local cIDDOC        := ''
Local cFilSE5		:= FWxFilial('SE5')
Local cIdFK1		:= ''
Local cFilSE1		:= FWxFilial("SE1")
Local lLojxRec	    := (Alltrim(FunName()) == 'LOJA701' .Or. IsInCallStack("LJRecBXSE1"))
Local cNextArea	    := ""
Local cFunname	    := AllTrim(FunName())
Local nTamFK1H      := TamSX3("FK1_HISTOR")[1]
Local lSE5FI460     := ExistBlock("SE5FI460")
Local lF70E5ADT     := ExistBlock("F70E5ADT")
Local lSE5FI070     := ExistBlock("SE5FI070")
Local lF070EST      := ExistBlock("F070EST")
Local cDadosSE5	    := ''
Local aDadosSE5     := {}
Local aRecSE5       := {}

//Array de controle de flag de contabilizacao.
//Tratamento para o caso desta funcao ser chamada de forma direta.
aFlagCTB  := If (Type("aFlagCTB") != "A",{},aFlagCTB)

nRecFK1 := FK1->(Recno())

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se eh um estorno e prepara a rotina para estorno    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lEstorno
    aBaixa := Array(21)
    Afill(aBaixa,0)
    dbSelectArea("SE5")
    dbSetOrder(7)
    SE5->(dbCommit())
    aStruSE5 := SE5->(dbStruct())
    aStruFK1 := FK1->(dbStruct())
    lQuery   := .T.
    cAliasSE5:= "FABAIXACR"

	cChaveTit   := SE1->E1_FILIAL + "|" + SE1->E1_PREFIXO + "|" + SE1->E1_NUM + "|" + ;
                    SE1->E1_PARCELA + "|" + SE1->E1_TIPO + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA
	cIDDOC      := FINBuscaFK7(cChaveTit, "SE1")

    cQuery   := "SELECT FK1_FILIAL, FK1_TPDOC, FK1_MOTBX, FK1_DATA, FK1_DTDISP, FK1_HISTOR, "
    cQuery   += "FK1_VALOR, FK1_ARCNAB, FK1_CNABOC, FK1_LOTE, FK6_VALMOV, "
    aEval(aStruSE5,{|x| cQuery += x[1] + ", "})
    cQuery   += "SE5.R_E_C_N_O_ SE5RECNO "
    cQuery   += "FROM " + RetSqlName("FK1") + " FK1 "
    cQuery   += "INNER JOIN " + RetSqlName("SE5") + " SE5 "
    cQuery   += "ON SE5.E5_FILIAL = FK1_FILIAL AND "
    cQuery   += "SE5.E5_IDORIG = FK1_IDFK1 AND "
    cQuery   += "SE5.E5_SEQ = FK1_SEQ AND "
    cQuery   += "SE5.E5_TABORI = 'FK1' AND "
    cQuery   += "SE5.D_E_L_E_T_=' ' "
    cQuery   += "LEFT JOIN " + RetSqlName("FK6") + " FK6 "
    cQuery   += "ON FK6_FILIAL = FK1_FILIAL AND "
    cQuery   += "FK6_IDORIG = FK1_IDFK1 AND "
    cQuery   += "FK6_TABORI = 'FK1' AND "
    cQuery   += "FK6.D_E_L_E_T_ = ' ' "
    cQuery   += "WHERE FK1_IDDOC = '" + cIDDOC + "' AND "
    cQuery   += "FK1_SEQ = '" + cEstorno + "' AND "
    cQuery   += "FK1.D_E_L_E_T_ = ' ' "
    cQuery   += "ORDER BY "+SqlOrder(SE5->(IndexKey()))

    cQuery   := ChangeQuery(cQuery)

    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE5,.T.,.T.)

    For nX := 1 To Len(aStruSE5)
        If aStruSE5[nX][2]<>"C"
            TcSetField(cAliasSE5,aStruSE5[nX][1],aStruSE5[nX][2],aStruSE5[nX][3],aStruSE5[nX][4])
        EndIf
    Next nX

    For nX := 1 To Len(aStruFK1)
        If aStruFK1[nX][2]<>"C"
            TcSetField(cAliasSE5,aStruFK1[nX][1],aStruFK1[nX][2],aStruFK1[nX][3],aStruFK1[nX][4])
        EndIf
    Next nX

    // FKs - Mantidas as informações de título pela SE5 por questão de performance
    While !Eof() .And. xFilial("SE5") == (cAliasSE5)->E5_FILIAL .And.;
        SE1->E1_PREFIXO == (cAliasSE5)->E5_PREFIXO .And.;
        SE1->E1_NUM == (cAliasSE5)->E5_NUMERO .And.;
        SE1->E1_PARCELA == (cAliasSE5)->E5_PARCELA .And.;
        SE1->E1_TIPO == (cAliasSE5)->E5_TIPO .And.;
        SE1->E1_CLIENTE == (cAliasSE5)->E5_CLIFOR .And.;
        SE1->E1_LOJA == (cAliasSE5)->E5_LOJA .And.;
        cEstorno == (cAliasSE5)->E5_SEQ

        If (cAliasSE5)->E5_SITUACA <> "C"
            aadd(aRegSE5,If(lQuery,SE5RECNO,RecNo()))

            // FKs - Trecho só poderá ser reescrito após a Fa440CalcB convertida para FKs
            Aadd(aComissao,{E5_MOTBX,E5_SEQ,If(lQuery,SE5RECNO,RecNo())})
        EndIf

        Do Case
        Case (cAliasSE5)->E5_TIPODOC $ "D2#DC"
            aBaixa[BXCR_DESC]  := (cAliasSE5)->FK6_VALMOV
        Case (cAliasSE5)->E5_TIPODOC $ "J2#JR"
            aBaixa[BXCR_JUROS] := (cAliasSE5)->FK6_VALMOV
        Case (cAliasSE5)->E5_TIPODOC $ "M2#MT"
            aBaixa[BXCR_MULTA] := (cAliasSE5)->FK6_VALMOV
        Case (cAliasSE5)->E5_TIPODOC $ "C2#CM"
            aBaixa[BXCR_CM]    := (cAliasSE5)->FK6_VALMOV
        Case (cAliasSE5)->FK1_TPDOC $ "V2#VL#BA"
            aBaixa[BXCR_MOTBX] := (cAliasSE5)->FK1_MOTBX
            aBaixa[BXCR_BCO]   := (cAliasSE5)->E5_BANCO
            aBaixa[BXCR_AGE]   := (cAliasSE5)->E5_AGENCIA
            aBaixa[BXCR_CONTA] := (cAliasSE5)->E5_CONTA
            aBaixa[BXCR_DTREC] := (cAliasSE5)->FK1_DATA
            aBaixa[BXCR_DTCRD] := (cAliasSE5)->FK1_DTDISP
            aBaixa[BXCR_HIST]  := (cAliasSE5)->FK1_HISTOR
            aBaixa[BXCR_VLREC] := (cAliasSE5)->FK1_VALOR
            aBaixa[BXCR_CNAB]  := (cAliasSE5)->FK1_ARCNAB
            aBaixa[BXCR_OCOR]  := (cAliasSE5)->FK1_CNABOC
            aBaixa[BXCR_LOTE]  := (cAliasSE5)->FK1_LOTE
            aBaixa[BXCR_NSNUM] := SE1->E1_NUMBCO
        EndCase
        dbSelectArea(cAliasSE5)
        dbSkip()
    EndDo
    If lQuery
        dbSelectArea(cAliasSE5)
        dbCloseArea()
        dbSelectArea("SE5")
    EndIf
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ajusta os parametros opcionais.                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFAULT lDesconto := .F.
DEFAULT lJuros    := .F.
DEFAULT lLctPad   := .F.
DEFAULT lZeraSE1  := SuperGetMv("MV_ZERASE1")=="S"
DEFAULT nToler    := SuperGetMv("MV_TOLERPG")
DEFAULT lDeleta   := .F.
DEFAULT nSomaCheq := 0 //-- Total dos Cheques informados na baixa

For nX := 13 To 21
    If Len(aBaixa) < nX
        Aadd(aBaixa,Nil)
    EndIf
    If nX <= 16 .Or. nX >= 20
        DEFAULT aBaixa[nX] := ""
    Else
        DEFAULT aBaixa[nX] := 0
    EndIf
Next nX
lExterno  := !Empty(aBaixa[BXCR_OCOR])
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona Registros                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SED")
dbSetOrder(1)
DbSeek(xFilial("SED")+SE1->E1_NATUREZ)
dbSelectArea("SA1")
dbSetOrder(1)
DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA)
If Empty(aBaixa[BXCR_DTCRD])
    dbSelectArea("SA6")
    dbSetOrder(1)
    DbSeek(xFilial("SA6")+aBaixa[BXCR_BCO]+aBaixa[BXCR_AGE]+aBaixa[BXCR_CONTA])
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Trava os registros necessarios para efetuar a baixa          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
lContinua := RecLock("SE1")
If lContinua .And. lTravaSA1
    lContinua := RecLock("SA1")
EndIf
If lContinua
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Verifica se eh estorno                                       ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If !lEstorno
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Calcula os dias de Atraso                                    ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        nAtraso:=aBaixa[BXCR_DTREC]-SE1->E1_VENCTO
        If nAtraso > 1
            If Dow(SE1->E1_VENCTO) == 1 .Or. Dow(SE1->E1_VENCTO) == 7
                If Dow(aBaixa[BXCR_DTREC]) == 2 .And. nAtraso <= 2
                    nAtraso := 0
                EndIf
            EndIf
        EndIf
        nAtraso:=Max(0,nAtraso)

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Calcula os dias de retencao                                  ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If Empty(aBaixa[BXCR_DTCRD])
            aBaixa[BXCR_DTCRD] := aBaixa[BXCR_DTREC]
            If SA6->A6_RETENCAO > 0
                nY := SA6->A6_RETENCAO
                For nX := 1 To nY
                    aBaixa[BXCR_DTCRD] := DataValida(aBaixa[BXCR_DTCRD]+1,.T.)
                Next nX
            EndIf
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Calcula o valor recebido na moeda do titulo                  ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If aBaixa[BXCR_MOTBX] == "DEV"
            nVlRecMdCR := Round(NoRound(xMoeda(aBaixa[BXCR_VLREC],1,SE1->E1_MOEDA,SE1->E1_EMISSAO,3),3),IIf(cPaisLoc=="CHI",0,2))
        Else
            nVlRecMdCR := Round(NoRound(xMoeda(aBaixa[BXCR_VLREC],1,SE1->E1_MOEDA,aBaixa[BXCR_DTREC],3),3),IIf(cPaisLoc=="CHI",0,2))
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Calcula o Saldo a baixar do titulo a receber na moeda do mesmo³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If cPaisLoc <> "BRA"
            nBxSldMdCR := nVlRecMdCR
        Else
            nBxSldMdCR := nVlRecMdCR-xMoeda(aBaixa[BXCR_JUROS]+aBaixa[BXCR_MULTA]-aBaixa[BXCR_DESC],1,SE1->E1_MOEDA,aBaixa[BXCR_DTREC])
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Calcula o Saldo do Titulo apos a baixa e realiza o ajuste     ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        nSldMdCR := SE1->E1_SALDO-nBxSldMdCR
        If lExterno .And. NoRound(nSldMdCR,2) <= 0 .And. lZeraSE1
            nSldMdCR := 0
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Ajusta o Saldo conforme os abatimentos                        ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If aTitulo[CR_VLRABAT]>=nSldMdCR
            nBxSldMdCR := SE1->E1_SALDO
            nSldMdCR := 0
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Ajusta o Saldo conforme a Tolerancia                          ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        Do Case
        Case nToler > 0 .And. nSldMdCR > 0 .And. nSldMdCR <= nToler
            aBaixa[BXCR_DESC] += nSldMdCR
            nSldMdCR := 0
            nBxSldMdCR := SE1->E1_SALDO
        Case nToler > 0 .And. nSldMdCR < 0
            aBaixa[BXCR_JUROS] += Abs(nSldMdCR)
            nVlrToler := Abs(nSldMdCR)
            nSldMdCR  := 0
            nBxSldMdCR := SE1->E1_SALDO
        EndCase
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Ajusta o Saldo conforme a cotacao da Moeda                    ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If nSldMdCR < 0 .And. !lExterno
            nSldMdCR := 0
            nBxSldMdCR := SE1->E1_SALDO
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Atualiza o SE1 com os dados da Baixa                         ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If __nJurCmpLj > 0
            aBaixa[BXCR_JUROS] 	:= __nJurCmpLj
            __nJurCmpLj 		:= 0
        EndIf
        If __nDesCmpLj > 0
            aBaixa[BXCR_DESC] 	:= __nDesCmpLj
            __nDesCmpLj			:= 0
        EndIf
        If __nMulCmpLj > 0
            aBaixa[BXCR_MULTA] 	:= __nMulCmpLj
            __nMulCmpLj			:= 0
        EndIf

        RecLock("SE1")
        SE1->E1_OK      := ""
        SE1->E1_BAIXA   := aBaixa[BXCR_DTREC]
        SE1->E1_LOTE    := aBaixa[BXCR_LOTE]
        SE1->E1_MOVIMEN := aBaixa[BXCR_DTREC]
        SE1->E1_DESCONT := aBaixa[BXCR_DESC]
        SE1->E1_MULTA   := aBaixa[BXCR_MULTA]
        SE1->E1_JUROS   := aBaixa[BXCR_JUROS]
        SE1->E1_CORREC  := aBaixa[BXCR_CM]
        SE1->E1_VALLIQ  := aBaixa[BXCR_VLREC] //12
        SE1->E1_SALDO	-= nBxSldMdCR
        SE1->E1_STATUS  := IIf(nSldMdCR>=0.01,"A","B")
        SE1->E1_NUMBCO  := aBaixa[BXCR_NSNUM]
        SE1->E1_TIPOLIQ := aBaixa[BXCR_TPLIQ]
        If cPaisLoc == "CHI"
            SE1->E1_OTRGA := aBaixa[BXCR_OTRGA]
        EndIf
        If cPaisLoc == "CHI"
            SE1->E1_CAMBIO := aBaixa[BXCR_CAMBI]
        EndIf
        SE1->E1_TXMOEDA := aBaixa[BXCR_TAXA]

        If __lRastro
            __nValProc += nBxSldMdCR
        EndIf

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Verifica a proxima sequencia de baixa                        ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        cSeqBx := FaNxtSeqBx()

        cChaveTit	:= 	cFilSE1			+ "|" +;
                        SE1->E1_PREFIXO + "|" +;
                        SE1->E1_NUM		+ "|" +;
                        SE1->E1_PARCELA + "|" +;
                        SE1->E1_TIPO	+ "|" +;
                        SE1->E1_CLIENTE + "|" +;
                        SE1->E1_LOJA

        //Define os campos que não existem nas FKs e que serão gravados apenas na E5, para que a gravação da E5 continue igual
        If !Empty(cCamposE5)
            cCamposE5 += "|"
        EndIf
        cCamposE5 += " { "
        cCamposE5 += "{'E5_FILIAL'		,'" + cFilSE5 + "'}"
        If lLojxRec
            cCamposE5 += ",{'E5_BANCO'		,'" + aBaixa[BXCR_BCO] + "'}"
            cCamposE5 += ",{'E5_AGENCIA'	,'" + aBaixa[BXCR_AGE] + "'}"
            cCamposE5 += ",{'E5_CONTA'		,'" + aBaixa[BXCR_CONTA] + "'}"
            cCamposE5 += ",{'E5_VLJUROS', "+Str(aBaixa[BXCR_JUROS])+"}"
            cCamposE5 += ",{'E5_VLDESCO', "+Str(aBaixa[BXCR_DESC])+"}"
            cCamposE5 += ",{'E5_VLMULTA', "+Str(aBaixa[BXCR_MULTA])+"}"
        EndIf
        cCamposE5 += ",{'E5_PREFIXO'	,'" +  SE1->E1_PREFIXO+ "'}"
        cCamposE5 += ",{'E5_NUMERO'		,'" +  SE1->E1_NUM + "'}"
        cCamposE5 += ",{'E5_PARCELA'	,'" +  SE1->E1_PARCELA + "'}"
        cCamposE5 += ",{'E5_CLIENTE'	,'" +  SE1->E1_CLIENTE + "'}"
        cCamposE5 += ",{'E5_CLIFOR'		,'" +  SE1->E1_CLIENTE + "'}"
        cCamposE5 += ",{'E5_LOJA'		,'" +  SE1->E1_LOJA + "'}"
        cCamposE5 += ",{'E5_BENEF'		,'" +  SE1->E1_NOMCLI + "'}"
        cCamposE5 += ",{'E5_TIPO'		,'" +  SE1->E1_TIPO + "'}"
        cCamposE5 += ",{'E5_DTDIGIT'	, STOD('" + DTOS(dDataBase) + "')}"
        cCamposE5 += ",{'E5_DTDISPO'	, STOD('" + DTOS(aBaixa[BXCR_DTCRD]) + "')}"

        //Carrego model de Bx a Receber
        oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Alteração
        oModelBxR:Activate()
        oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //habilita gravação de SE5
        oModelBxR:SetValue("MASTER","NOVOPROC", .T. ) //Novo processo

        oSubFK1	:= oModelBxR:GetModel("FK1DETAIL")
        oSubFK5	:= oModelBxR:GetModel("FK5DETAIL")
        oSubFK6	:= oModelBxR:GetModel("FK6DETAIL")
        oSubFKA	:= oModelBxR:GetModel("FKADETAIL")

        cChaveFK7 := FINGRVFK7("SE1", cChaveTit)

        /*
         * Baixa Principal
         */
        If !oSubFKA:IsEmpty()
            oSubFKA:AddLine()
        EndIf

        cIDFK1 := FWUUIDV4()

        oSubFKA:SetValue( "FKA_IDORIG"	, cIDFK1 )
        oSubFKA:SetValue( "FKA_TABORI"	, 'FK1')

        If !oSubFK1:IsEmpty()
            oSubFK1:AddLine()
        EndIf

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Grava os registros de baixa e movimentacao bancaria          ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        For nX := 1 To 7
            Do Case
            Case nX == 1
                nValor   := aBaixa[BXCR_DESC]
                cTpDoc   := IIf(SE1->E1_SITUACA $ cLstDesc,"D2","DC")
                cHistMov := "Desconto s/Receb.Titulo"
            Case nX == 2
                nValor   := aBaixa[BXCR_JUROS]
                cTpDoc   := IIf(SE1->E1_SITUACA $ cLstDesc,"J2","JR")
                cHistMov := "Juros s/Receb.Titulo"
            Case nX == 3
                nValor   := aBaixa[BXCR_MULTA]
                cTpDoc   := IIF(SE1->E1_SITUACA $ cLstDesc,"M2","MT")
                cHistMov := "Multa s/Receb.Titulo"
            Case nX == 4
                nValor   := aBaixa[BXCR_CM]
                cTpDoc   := IIf(SE1->E1_SITUACA $ cLstDesc,"C2","CM")
                cHistMov := "Correcao Monet s/Receb.Titulo"
            Case nX == 5
                nValor   := aBaixa[BXCR_VLREC]
                cTpDoc   := IIf(SE1->E1_SITUACA $ cLstDesc,"V2",IIf(Empty(aBaixa[BXCR_LOTE]).And.Empty(aBaixa[BXCR_NUMLQ]).And.MovBcoBx(aBaixa[BXCR_MOTBX],.F. ),"VL","BA"))
                cHistMov := aBaixa[BXCR_HIST]
                // Controla saldo na compensacao do cheque
                If	cSldBxCr == "C" .And. nSomaCheq > 0
                    // Do valor recebido deve ser subtraido o total pago em cheque, pois o valor referente a
                    // baixa efetuada em cheque sera movimentado apenas quando o cheque for compensado.
                    nValor -= nSomaCheq
                Endif
            Case nX == 6
                nValor   := nVlrToler
                cTpDoc   := "TL"
                cHistMov := "Toler Receb. s/ Titulo"
            Case nX == 7
                nValor   := nSomaCheq
                cTpDoc   := "BA"
            EndCase
            If	nValor <> 0 .Or. (nX == 5 .And. (cSldBxCr <> "C" .Or. (nValor == 0 .And. aBaixa[BXCR_DESC] > 0)))
                If cTpDoc $ "VL/BA/V2"
                    /*
                     * Gera movimentação bancária a pagar - baixa do adiantamento
                     */
                    oSubFK1:SetValue( "FK1_IDFK1"	, cIdFK1 )
                    oSubFK1:SetValue( "FK1_DATA"	, aBaixa[BXCR_DTREC] )
                    oSubFK1:SetValue( "FK1_NATURE"	, SE1->E1_NATUREZ )
                    oSubFK1:SetValue( "FK1_RECPAG"	, IIf(!SE1->E1_TIPO$MVRECANT+"/"+MV_CRNEG,"R","P"))
                    oSubFK1:SetValue( "FK1_HISTOR"	, Substr(cHistMov,1,nTamFK1H))
                    oSubFK1:SetValue( "FK1_MOTBX"	, aBaixa[BXCR_MOTBX] )
                    oSubFK1:SetValue( "FK1_ORIGEM"	, FunName() )
                    oSubFK1:SetValue( "FK1_SEQ"		, cSeqBx )
                    oSubFK1:SetValue( "FK1_IDDOC"	, cChaveFK7 )
                    oSubFK1:SetValue( "FK1_TPDOC"	, cTpDoc )
                    oSubFK1:SetValue( "FK1_CCUSTO"	, SE1->E1_CCUSTO )
                    oSubFK1:SetValue( "FK1_FILORI"	, SE1->E1_FILORIG )
                    oSubFK1:SetValue( "FK1_VALOR"	, nValor )
                    oSubFK1:SetValue( "FK1_MOEDA"	, StrZero(SE1->E1_MOEDA,2) )

                    If nVlRecMdCR <> 0 .AND. nX == 1
                        oSubFK1:SetValue( "FK1_VLMOE2"	, nVlRecMdCR )
                    ElseIf nX <> 6 .OR. SE1->E1_MOEDA <= 1
                        oSubFK1:SetValue( "FK1_VLMOE2"	, Round(xMoeda(nValor,1,SE1->E1_MOEDA,aBaixa[BXCR_DTREC],4),2) )
                    EndIf

                    oSubFK1:SetValue( "FK1_LOTE"	, aBaixa[BXCR_LOTE] )

                    If aBaixa[BXCR_MOTBX] == 'LIQ'
                        oSubFK1:SetValue( "FK1_DOC"	, aBaixa[BXCR_NUMLQ] )
                    EndIf

                    If cPaisLoc <> "BRA"
                        oSubFK1:SetValue( "FK1_ORDREC"	, SE1->E1_RECIBO )
                        oSubFK1:SetValue( "FK1_SERREC"	, SE1->E1_SERREC )
                    EndIf

                    If cTpDoc $ "VL/V2"
                        oSubFK5:SetValue( "FK5_RECPAG" , IIf(!SE1->E1_TIPO$MVRECANT+"/"+MV_CRNEG,"R","P") )
                        oSubFK5:SetValue( "FK5_HISTOR" , cHistMov )
                        oSubFK5:SetValue( "FK5_DATA"   , aBaixa[BXCR_DTREC] )
                        oSubFK5:SetValue( "FK5_DTDISP" , aBaixa[BXCR_DTCRD] )
                        oSubFK5:SetValue( "FK5_NATURE" , SE1->E1_NATUREZ )
                        oSubFK5:SetValue( "FK5_BANCO"  , aBaixa[BXCR_BCO] )
                        oSubFK5:SetValue( "FK5_AGENCI" , aBaixa[BXCR_AGE] )
                        oSubFK5:SetValue( "FK5_CONTA"  , aBaixa[BXCR_CONTA] )
                        oSubFK5:SetValue( "FK5_SEQ"    , cSeqBx )
                        oSubFK5:SetValue( "FK5_MOEDA"  , Iif(lLojxRec .And. Empty(SE1->E1_MOEDA),"R$",StrZero(SE1->E1_MOEDA,2)) )
                        oSubFK5:SetValue( "FK5_ORIGEM" , FunName() )
                        oSubFK5:SetValue( "FK5_TPDOC"  , cTpDoc )
                        oSubFK5:SetValue( "FK5_CCUSTO" , SE1->E1_CCUSTO )
                        oSubFK5:SetValue( "FK5_DOC"    , SE1->E1_NUMBOR )
                        oSubFK5:SetValue( "FK5_FILORI" , SE1->E1_FILORIG )
                        oSubFK5:SetValue( "FK5_VALOR"  , nValor )
                        oSubFK5:SetValue( "FK5_IDMOV"  , cIdFK1 )
                        oSubFK5:SetValue( "FK5_LA" , IIf(lLctPad, "S", "N") )

                        If SE1->E1_MOEDA <= 1
                            oSubFK5:SetValue( "FK5_VLMOE2" , Round(xMoeda(nValor,1,SE1->E1_MOEDA,aBaixa[BXCR_DTREC],4),2) )
                        Else
                            oSubFK5:SetValue( "FK5_VLMOE2" , nVlRecMdCR )
                        EndIf
                    EndIf
                    oSubFK1:SetValue( "FK1_ARCNAB"	, aBaixa[BXCR_CNAB ] )
                    oSubFK1:SetValue( "FK1_CNABOC"	, aBaixa[BXCR_OCOR ] )
                EndIf
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Grava os valores agregados ao movimento totalizador          ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                If nX == 5

                    cCamposE5 += ",{'E5_HISTOR'	,'" + cHistMov + 	"'}"

                    If aBaixa[BXCR_JUROS] <> 0
                        If !oSubFK6:IsEmpty()
                            //Inclui a quantidade de linhas necessárias
                            oSubFK6:AddLine()
                            //Vai para linha criada
                            oSubFK6:GoLine( oSubFK6:Length() )
                        Endif

                        oSubFK6:SetValue("FK6_VALMOV",aBaixa[BXCR_JUROS])
                        oSubFK6:SetValue("FK6_VALCAL",aBaixa[BXCR_JUROS])
                        oSubFK6:SetValue("FK6_TPDOC",IIf(SE1->E1_SITUACA $ cLstDesc,"J2","JR"))
                        oSubFK6:SetValue("FK6_RECPAG",IIf(!SE1->E1_TIPO$MVRECANT+"/"+MV_CRNEG,"R","P"))
                        oSubFK6:SetValue("FK6_IDORIG",cIdFK1)
                        oSubFK6:SetValue("FK6_TABORI","FK1")
                        oSubFK6:SetValue("FK6_HISTOR",STR0033)
                    EndIf

                    If aBaixa[BXCR_MULTA] <> 0
                        If !oSubFK6:IsEmpty()
                            //Inclui a quantidade de linhas necessárias
                            oSubFK6:AddLine()
                            //Vai para linha criada
                            oSubFK6:GoLine( oSubFK6:Length() )
                        Endif

                        oSubFK6:SetValue("FK6_VALMOV",aBaixa[BXCR_MULTA])
                        oSubFK6:SetValue("FK6_VALCAL",aBaixa[BXCR_MULTA])
                        oSubFK6:SetValue("FK6_TPDOC",IIF(SE1->E1_SITUACA $ cLstDesc,"M2","MT"))
                        oSubFK6:SetValue("FK6_RECPAG",IIf(!SE1->E1_TIPO$MVRECANT+"/"+MV_CRNEG,"R","P"))
                        oSubFK6:SetValue("FK6_IDORIG",cIdFK1)
                        oSubFK6:SetValue("FK6_TABORI","FK1")
                        oSubFK6:SetValue("FK6_HISTOR",STR0034)
                    EndIf

                    If aBaixa[BXCR_DESC ] <> 0
                        If !oSubFK6:IsEmpty()
                            //Inclui a quantidade de linhas necessárias
                            oSubFK6:AddLine()
                            //Vai para linha criada
                            oSubFK6:GoLine( oSubFK6:Length() )
                        Endif

                        oSubFK6:SetValue("FK6_VALMOV",aBaixa[BXCR_DESC])
                        oSubFK6:SetValue("FK6_VALCAL",aBaixa[BXCR_DESC])
                        oSubFK6:SetValue("FK6_TPDOC",IIf(SE1->E1_SITUACA $ cLstDesc,"D2","DC"))
                        oSubFK6:SetValue("FK6_RECPAG",IIf(!SE1->E1_TIPO$MVRECANT+"/"+MV_CRNEG,"R","P"))
                        oSubFK6:SetValue("FK6_IDORIG",cIdFK1)
                        oSubFK6:SetValue("FK6_TABORI","FK1")
                        oSubFK6:SetValue("FK6_HISTOR",STR0035)
                    EndIf

                    If aBaixa[BXCR_CM   ] <> 0
                        If !oSubFK6:IsEmpty()
                            //Inclui a quantidade de linhas necessárias
                            oSubFK6:AddLine()
                            //Vai para linha criada
                            oSubFK6:GoLine( oSubFK6:Length() )
                        Endif

                        oSubFK6:SetValue("FK6_VALMOV",aBaixa[BXCR_CM])
                        oSubFK6:SetValue("FK6_VALCAL",aBaixa[BXCR_CM])
                        oSubFK6:SetValue("FK6_TPDOC",IIf(SE1->E1_SITUACA $ cLstDesc,"C2","CM"))
                        oSubFK6:SetValue("FK6_RECPAG",IIf(!SE1->E1_TIPO$MVRECANT+"/"+MV_CRNEG,"R","P"))
                        oSubFK6:SetValue("FK6_IDORIG",cIdFK1)
                        oSubFK6:SetValue("FK6_TABORI","FK1")
                        oSubFK6:SetValue("FK6_HISTOR",STR0036)
                    EndIf
                EndIf

                If lUsaFlag .AND. lLctPad // Armazena em aFlagCTB para atualizar no modulo Contabil
                    aAdd( aFlagCTB, {"E5_LA", "S", "SE5", SE5->( Recno() ), 0, 0, 0} )
                EndIf

                If aBaixa[BXCR_MOTBX]== "LIQ"
                    If lSE5FI460
                        ExecBlock("SE5FI460",.F.,.F.)
                    EndIf
                Else
                    If lF70E5ADT
                        ExecBlock("F70E5ADT",.F.,.F.)
                    EndIf
                    If lSE5FI070
                        ExecBlock('SE5FI070',.F.,.F.)
                    EndIf
                EndIF
            EndIf
        Next nX

        cCamposE5 += " } "

        oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5
        If oModelBxR:VldData()
            lExistFK6 := !oModelBxR:GetModel('FK6DETAIL'):IsEmpty() // Validação do Model antes do commit, pq a FK6DETAIL descarrega depois de comitar
	        oModelBxR:CommitData()
           
	        If lExistFK6 //precisa dos recnos da FK6, para composição do abaixas para calculo da comissão
  		        aAdd(aRecSE5, {oModelBxR:GetValue( "MASTER", "E5_RECNO" )})
                aAuxFK6 := FK6SE5Recs()
  		        For nX := 1 to Len(aAuxFK6)
   			        aAdd(aRecSE5, {aAuxFK6[nX]})
  		        Next nX
                FwFreeArray(aAuxFK6)
 	        EndIf
            oModelBxR:DeActivate()
        Else
            lRet := .F.
            cLog := cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_IDFIELDERR]) + ' - '
            cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_ID]) + ' - '
            cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_MESSAGE])

            Help( ,,"M030VALID",,cLog, 1, 0 )
        EndIf

        If lRet
            For nX := 1 To Len(aRecSE5)
                Aadd(aComissao,{aBaixa[BXCR_MOTBX],cSeqBx,aRecSE5[nX][1]})
            Next nX
        EndIf

        // FKs - Trecho para ponterar a SE5 para o Loja não será alterado.
        // Restaura a SE5 no título pai (VL ou BA) como era na versão P11. Alteração feita para o Loja.
        cNextArea := GetNextAlias() + "_" + cFunname + "_" + cEmpAnt

        BeginSql alias cNextArea
        Select R_E_C_N_O_ SE5RecPai
        From %table:SE5% SE5
        Where E5_FILIAL = %xFilial:Se5%
            and E5_IDORIG = %exp:cIdFK1%
            and E5_TIPODOC in ('VL', 'V2', 'BA')
            and SE5.%notDel%

        EndSql

        DbSelectArea("SE5")
        DbGoTo((cNextArea)->SE5RecPai)
        (cNextArea)->(DbCloseArea())

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Guarda a chave primary da baixa para busca futura            ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        cPrimary := cSeqBx
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Atualiza movimento bancario                                  ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG
            If MovBcoBx(aBaixa[BXCR_MOTBX],.F.)
                AtuSalBco(aBaixa[BXCR_BCO],aBaixa[BXCR_AGE],aBaixa[BXCR_CONTA],aBaixa[BXCR_DTREC],aBaixa[BXCR_VLREC],"-")
            Endif
        Else
            If !(SE1->E1_SITUACA $ cLstDesc) .And. MovBcoBx(aBaixa[BXCR_MOTBX], .F.) .And. Empty(aBaixa[BXCR_LOTE])
                AtuSalBco(aBaixa[BXCR_BCO],aBaixa[BXCR_AGE],aBaixa[BXCR_CONTA],aBaixa[BXCR_DTREC],aBaixa[BXCR_VLREC],"+")
            EndIf
        EndIf
        If ExistBlock("F070DISS")
            ExecBlock("F070DISS",.f.,.f.)
        EndIf
        If lTravaSA1
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Atualiza Acumulados                                          ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            If SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG
                AtuSalDup("+",nBxSldMdCR,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO)
            Else
                RecLock("SA1",.F.)
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Atualiza Nr. de pagamentos                                   ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                SA1->A1_NROPAG := SA1->A1_NROPAG+1
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Atualiza maior atraso                                        ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                SA1->A1_MATR := nAtraso
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Atualiza atraso medio                                        ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                If (aBaixa[BXCR_DTREC] - SE1->E1_VENCREA) > 0
                    SA1->A1_PAGATR:= SA1->A1_PAGATR+aBaixa[BXCR_VLREC]
                    SA1->A1_ATR   := Max(0,SA1->A1_ATR-aBaixa[BXCR_VLREC])
                EndIf
                SA1->A1_METR :=	(SA1->A1_METR * (SA1->A1_NROPAG-1)+Max(0,aBaixa[BXCR_DTREC]-SE1->E1_VENCREA))/SA1->A1_NROPAG
                SA1->(MsUnlock())
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Atualiza saldo de duplicatas                                 ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                AtuSalDup("-",nBxSldMdCR,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO)
            EndIf
        EndIf
        /*
         * Fluxo por Natureza Financeira
         */
        If lAtuSldNat .AND. SE1->E1_FLUXO == 'S'
            AtuSldNat(SE1->E1_NATUREZ, aBaixa[BXCR_DTREC], SE1->E1_MOEDA, "3", "R", aBaixa[BXCR_VLREC], aBaixa[BXCR_VLREC],If(SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG,"-","+"),,FunName(),"SE1",SE1->(Recno()),0)
        Endif

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Comissao                                                     ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If SuperGetMv("MV_TPCOMIS") == "O"  .And. ComisBx( aBaixa[BXCR_MOTBX] ) .AND. !lGemReneg
            Fa440CalcB(aComissao,lJuros,lDesconto,"FINA070")
            If ExistBlock("SE3FI070")
                ExecBlock('SE3FI070',.f.,.F.)
            EndIf
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Encerra os titulos de abatimento caso a baixa seja total     ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If SE1->E1_SALDO == 0 .And. aTitulo[CR_VLRABAT] <> 0
            dbSelectArea("SE1")
            dbSetOrder(2)
            SE1->(dbCommit())
            aStruSE1  := SE1->(dbStruct())
            cAliasSE1 := "FaBaixaCR"
            lQuery    := .T.
            cQuery := "SELECT SE1.*,SE1.R_E_C_N_O_ SE1RECNO "
            cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
            cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
            cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
            cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
            cQuery += "SE1.E1_PARCELA='"+cParcela+"' AND "
            cQuery += "SE1.E1_CLIENTE='"+cCliente+"' AND "
            cQuery += "SE1.E1_LOJA='"+cLoja+"' AND "
            cQuery += "SE1.D_E_L_E_T_=' ' "

            cQuery := ChangeQuery(cQuery)

            dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)

            For nX := 1 To Len(aStruSE1)
                If aStruSE1[nX][2]<>"C"
                    TcSetField(cAliasSE1,aStruSE1[nX][1],aStruSE1[nX][2],aStruSE1[nX][3],aStruSE1[nX][4])
                EndIf
            Next nX

            While !Eof() .And. (cAliasSE1)->E1_FILIAL == xFilial("SE1") .And.;
                    (cAliasSE1)->E1_CLIENTE == cCliente	.And.;
                    (cAliasSE1)->E1_LOJA == cLoja .And.;
                    (cAliasSE1)->E1_PREFIXO == cPrefixo .And.;
                    (cAliasSE1)->E1_NUM == cNumero .And.;
                    (cAliasSE1)->E1_PARCELA == cParcela

                If (cAliasSE1)->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT+"/"+MVPIABT+"/"+	MVCFABT+"/"+MVCSABT
                    If lQuery
                        dbSelectArea("SE1")
                        MsGoto((cAliasSE1)->SE1RECNO)
                    EndIf
                    RecLock("SE1")
                    SE1->E1_SALDO   := 0
                    SE1->E1_BAIXA   := aBaixa[BXCR_DTREC]
                    SE1->E1_LOTE    := aBaixa[BXCR_LOTE]
                    SE1->E1_MOVIMEN := aBaixa[BXCR_DTREC]
                    SE1->E1_STATUS  := "B"
                    MsUnLock()
                EndIf
                dbSelectArea(cAliasSE1)
                dbSkip()
            EndDo
            If lQuery
                dbSelectArea(cAliasSE1)
                dbCloseArea()
                dbSelectArea("SE1")
            Else
                dbSelectArea("SE1")
                If !Empty(cFilterSE1)
                    If nOrdSE1 == 0 .And. !Empty(cKeySE1)
                        cFilterSE1 += ".AND. ORDERBY("+StrTran(ClearKey(cKeySE1),"+",",")+")"
                    EndIf
                EndIf

                If ( !Empty(cFilterSE1) )
                    Set Filter to &cFilterSE1
                EndIf
            EndIf
        EndIf
    Else
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Restaura os titulos de abatimento caso a baixa seja total    ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If SE1->E1_SALDO == 0
            dbSelectArea("SE1")
            dbSetOrder(2)
            SE1->(dbCommit())
            aStruSE1  := SE1->(dbStruct())
            cAliasSE1 := "FaBaixaCR"
            lQuery    := .T.
            cQuery := "SELECT SE1.*,SE1.R_E_C_N_O_ SE1RECNO "
            cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
            cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
            cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
            cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
            cQuery += "SE1.E1_PARCELA='"+cParcela+"' AND "
            cQuery += "SE1.E1_CLIENTE='"+cCliente+"' AND "
            cQuery += "SE1.E1_LOJA='"+cLoja+"' AND "
            cQuery += "SE1.D_E_L_E_T_=' ' "

            cQuery := ChangeQuery(cQuery)

            dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)

            For nX := 1 To Len(aStruSE1)
                If aStruSE1[nX][2]<>"C"
                    TcSetField(cAliasSE1,aStruSE1[nX][1],aStruSE1[nX][2],aStruSE1[nX][3],aStruSE1[nX][4])
                EndIf
            Next nX

            While !Eof() .And. (cAliasSE1)->E1_FILIAL == xFilial("SE1") .And.;
                    (cAliasSE1)->E1_CLIENTE == cCliente	.And.;
                    (cAliasSE1)->E1_LOJA == cLoja .And.;
                    (cAliasSE1)->E1_PREFIXO == cPrefixo .And.;
                    (cAliasSE1)->E1_NUM == cNumero .And.;
                    (cAliasSE1)->E1_PARCELA == cParcela

                If (cAliasSE1)->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT+"/"+MVPIABT+"/"+	MVCFABT+"/"+MVCSABT
                    If lQuery
                        dbSelectArea("SE1")
                        MsGoto((cAliasSE1)->SE1RECNO)
                    EndIf
                    RecLock("SE1")
                    SE1->E1_SALDO   := SE1->E1_VALOR
                    SE1->E1_BAIXA   := CtoD("")
                    SE1->E1_LOTE    := ""
                    SE1->E1_MOVIMEN := CtoD("")
                    SE1->E1_STATUS  := "A"
                    MsUnLock()
                    aTitulo[CR_VLRABAT] := SE1->E1_VALOR
                EndIf
                dbSelectArea(cAliasSE1)
                dbSkip()
            EndDo
            If lQuery
                dbSelectArea(cAliasSE1)
                dbCloseArea()
                dbSelectArea("SE1")
            Else
                dbSelectArea("SE1")
                If !Empty(cFilterSE1)
                    If nOrdSE1 == 0 .And. !Empty(cKeySE1)
                        cFilterSE1 += ".AND. ORDERBY("+StrTran(ClearKey(cKeySE1),"+",",")+")"
                    EndIf
                EndIf

                If ( !Empty(cFilterSE1) )
                    Set Filter to &cFilterSE1
                EndIf
            EndIf
        EndIf

        If __lRastro
            cDadosSe5 := SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+ SE1->E1_TIPO+SE1->E1_CLIENTE+SE1->E1_LOJA

            aDadosSE5 := {SE1->E1_FILORIG,SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA}
        EndIf

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Efetua o estorno de um baixa                                 ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        RestArea(aAreaSE1)
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Calcula o valor recebido na moeda do titulo                  ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If aBaixa[BXCR_MOTBX] == "DEV"
            nVlRecMdCR := Round(NoRound(xMoeda(aBaixa[BXCR_VLREC],1,SE1->E1_MOEDA,SE1->E1_EMISSAO,3),3),IIf(cPaisLoc=="CHI",0,2))
        Else
            nVlRecMdCR := Round(NoRound(xMoeda(aBaixa[BXCR_VLREC],1,SE1->E1_MOEDA,aBaixa[BXCR_DTREC],3),3),IIf(cPaisLoc=="CHI",0,2))
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Calcula o Saldo a baixar do titulo a receber na moeda do mesmo³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If cPaisLoc <> "BRA"
            nBxSldMdCR := nVlRecMdCR
        Else
            nBxSldMdCR := nVlRecMdCR-xMoeda(aBaixa[BXCR_JUROS]+aBaixa[BXCR_MULTA]-aBaixa[BXCR_DESC],1,SE1->E1_MOEDA,aBaixa[BXCR_DTREC])
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Calcula o Saldo do Titulo apos a baixa e realiza o ajuste     ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        nSldMdCR := SE1->E1_SALDO+nBxSldMdCR
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³Ajusta o Saldo conforme os abatimentos                        ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        nSldMdCR   += aTitulo[CR_VLRABAT]
        nBxSldMdCR += aTitulo[CR_VLRABAT]
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Estorna a comissao                                           ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If ComisBx( aBaixa[BXCR_MOTBX] )
            Fa440DeleB(aComissao,lJuros,lDesconto,"FINA070")
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Atualiza Acumulados - Estorno                                ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG
            AtuSalDup("-",nBxSldMdCR,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO)
        Else
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Atualiza Nr. de pagamentos                                   ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            RecLock("SA1",.F.)
            SA1->A1_NROPAG := Max(SA1->A1_NROPAG-1,0)

            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Atualiza atraso medio                                        ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            If aBaixa[BXCR_DTREC] - SE1->E1_VENCREA > 0
                SA1->A1_PAGATR:= Max(0,SA1->A1_PAGATR-aBaixa[BXCR_VLREC])
                SA1->A1_ATR   := Max(0,SA1->A1_ATR+aBaixa[BXCR_VLREC])
            EndIf
            SA1->A1_METR := (SA1->A1_METR*(SA1->A1_NROPAG+1)-(aBaixa[BXCR_DTREC]-SE1->E1_VENCREA))/SA1->A1_NROPAG
            SA1->(MsUnlock())
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Atualiza saldo de duplicatas                                 ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            AtuSalDup("+",nBxSldMdCR,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO)
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Atualiza movimento bancario - Estorno                        ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG
            If MovBcoBx(aBaixa[BXCR_MOTBX],.F.)
                AtuSalBco(aBaixa[BXCR_BCO],aBaixa[BXCR_AGE],aBaixa[BXCR_CONTA],aBaixa[BXCR_DTREC],aBaixa[BXCR_VLREC],"+")
            Endif
        Else
            If !(SE1->E1_SITUACA $ cLstDesc) .And. MovBcoBx(aBaixa[BXCR_MOTBX], .F.) .And. Empty(aBaixa[BXCR_LOTE])
                AtuSalBco(aBaixa[BXCR_BCO],aBaixa[BXCR_AGE],aBaixa[BXCR_CONTA],aBaixa[BXCR_DTREC],aBaixa[BXCR_VLREC],"-")
            EndIf
        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Cancela as baixas da Movimentacao bancaria                   ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        For nX := 1 To Len(aRegSE5)
            dbSelectArea("SE5")
            MsGoto(aRegSE5[nX])

            //Define os campos que não existem nas FKs e que serão gravados apenas na E5, para que a gravação da E5 continue igual
            If !Empty(cCamposE5)
                cCamposE5 += "|"
            Endif
            cCamposE5 += " { "
            cCamposE5 += "{'E5_FILIAL'		,'" + cFilSE5 + "'}"
            cCamposE5 += ",{'E5_PREFIXO'	,'" +  SE1->E1_PREFIXO+ "'}"
            cCamposE5 += ",{'E5_NUMERO'		,'" +  SE1->E1_NUM + "'}"
            cCamposE5 += ",{'E5_PARCELA'	,'" +  SE1->E1_PARCELA + "'}"
            cCamposE5 += ",{'E5_CLIENTE'	,'" +  SE1->E1_CLIENTE + "'}"
            cCamposE5 += ",{'E5_CLIFOR'		,'" +  SE1->E1_CLIENTE + "'}"
            cCamposE5 += ",{'E5_LOJA'		,'" +  SE1->E1_LOJA + "'}"
            cCamposE5 += ",{'E5_BENEF'		,'" +  SE1->E1_NOMCLI + "'}"
            cCamposE5 += ",{'E5_TIPO'		,'" +  SE1->E1_TIPO + "'}"
            cCamposE5 += ",{'E5_DTDIGIT'	, STOD('" + DTOS(dDataBase) + "')}"

            cCamposE5 += " } "

            //Carrego model de Bx a Receber
            oModelBxR:SetOperation( MODEL_OPERATION_UPDATE ) //Alteração
            oModelBxR:Activate()
            oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //habilita gravação de SE5
            oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5
            oModelBxR:SetValue( "MASTER", "HISTMOV", STR0030) //"Cancelamento da Prestacao de Contas"
            oSubFK1	:= oModelBxR:GetModel("FK1DETAIL")
            oSubFKA	:= oModelBxR:GetModel("FKADETAIL")
            oSubFKA:SeekLine( { {"FKA_IDORIG", SE5->E5_IDORIG } } )

            // FKs - Mantida SE5 por conta da FK1 estar no processo de geração
            If !lDeleta .And. ;
                    ( SE5->E5_TIPODOC == "VL" .Or. SE5->E5_TIPODOC == "LJ" .Or. (SE5->E5_TIPODOC == "BA" .And. !Empty(SE5->E5_LOTE)) )
                nValor   := SE5->E5_VALOR
                nVlMoed2 := SE5->E5_VLMOED2
                cSeqBx   := SE5->E5_SEQ

                If lUsaFlag .AND. lLctPad // Armazena em aFlagCTB para atualizar no modulo Contabil
                    aAdd( aFlagCTB, {"FK1_LA", "S", "FK1", nRecFK1, 0, 0, 0} )
                    aAdd( aFlagCTB, {"E5_LA", "S", "SE5", SE5->( Recno() ), 0, 0, 0} )
                EndIf

                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ PONTO DE ENTRADA F070EST                            ³
                //³ PE para grava‡äes complementares do cancelamento    ³
                //³ da baixa                                            ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                If lF070EST
                    ExecBlock("F070EST",.F.,.F.)
                EndIf

                oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 2 ) //E5_OPERACAO 2 = Grava E5 com E5_TIPODOC = 'ES' e gera estorno na FK5
            Else
                If lDeleta
                    oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 3 ) //E5_OPERACAO 3 = Deleta da SE5 e gera estorno na FK5
                Else
                    oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 1 ) //E5_OPERACAO 1 = Altera E5_SITUACA da SE5 para 'C' e gera estorno na FK5
                EndIf
            EndIf

            If oModelBxR:VldData()
                oModelBxR:CommitData()
                oModelBxR:DeActivate()
            Else
                lRet := .F.
                cLog := cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_IDFIELDERR]) + ' - '
                cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_ID]) + ' - '
                cLog += cValToChar(oModelBxR:GetErrorMessage()[MODEL_MSGERR_MESSAGE])

                Help( ,,"M030VALID",,cLog, 1, 0 )
            EndIf
        Next nX
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Atualiza o SE1 com os dados da Baixa                         ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        RecLock("SE1")
        SE1->E1_BAIXA   := If("OMSA341"$Upper(FunName()),Ctod(""),aBaixa[BXCR_DTREC]) //SIGAOMS -> Estorno: Limpar E1_BAIXA para permitir aplicar desconto fin,
        SE1->E1_LOTE    := aBaixa[BXCR_LOTE ]
        SE1->E1_MOVIMEN := aBaixa[BXCR_DTREC]
        SE1->E1_DESCONT := aBaixa[BXCR_DESC ]
        SE1->E1_MULTA   := aBaixa[BXCR_MULTA]
        SE1->E1_JUROS   := aBaixa[BXCR_JUROS]
        SE1->E1_CORREC  := aBaixa[BXCR_CM   ]
        SE1->E1_VALLIQ  -= aBaixa[BXCR_VLREC]
        SE1->E1_SALDO	+= nBxSldMdCR
        SE1->E1_STATUS  := IIf(nSldMdCR>0.01,"A","B")
        SE1->E1_NUMBCO  := aBaixa[BXCR_NSNUM]
        If cPaisLoc == "CHI"
            SE1->E1_OTRGA := aBaixa[BXCR_OTRGA]
        EndIf
        If cPaisLoc == "CHI"
            SE1->E1_CAMBIO := aBaixa[BXCR_CAMBI]
        EndIf
        SE1->E1_TXMOEDA := aBaixa[BXCR_TAXA]

        // Cancelamento do rastreamento(FI7)
        If __lRastro
            FINRSTDEL("SE1",cDadosSe5,aDadosSE5)
        EndIf

    EndIf
EndIf
RestArea(aAreaSE1)
RestArea(aArea)
Return(cSeqBx)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaCMCR    ³ Autor ³ Henry Fila            ³ Data ³01.09.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Calculo da Correcao Monetaria                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Contas a Receber                             ³±±
±±³          ³ExpN2: Valor Recebido na Moeda do Contas a Receber           ³±±
±±³          ³ExpC3: Codigo do motivo da baixa                        (OPC)³±±
±±³          ³ExpD4: Data da Baixa                                    (OPC)³±±
±±³          ³ExpN5: Valor Original na Moeda do Contas a Receber      (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1: Valor da Correcao Monetaria                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo calcular o valor da variacao   ³±±
±±³          ³monetaria entre a data da ultima variacao ou a data de emis- ³±±
±±³          ³sao (caso nao tenha sofrido nenhuma variacao), e a data de   ³±±
±±³          ³baixa, tomando-se como base o valor original ou o valor rece-³±±
±±³          ³bido conforme o parametro MV_TIPOCM.                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FaCMCR(cAliasSE1,	nVlRecMdCR,		cMotBx,		dBaixa, nVlOrMdCr, nTaxaCM , aTxMoeda, nValRec, nVlRealCmp)

Local nVlrOrigCR	:= 0
Local nVlrAtuCR		:= 0
Local nBaseCM		:= 0
Local nVlrCM		:= 0
Local dDataCM		:= IIf(Empty((cAliasSE1)->E1_DTVARIA),(cAliasSE1)->E1_EMISSAO,(cAliasSE1)->E1_DTVARIA)
Local nTxMoeda		:= If((cAliasSE1)->E1_MOEDA > 1, If((cAliasSE1)->E1_TXMOEDA > 0, (cAliasSE1)->E1_TXMOEDA,RecMoeda(dBaixa,(cAliasSE1)->E1_MOEDA)),0)
Local lGerCm     	:= .T.
Local lCalcCM    	:= If(cPaisLoc == "BRA", SuperGetMv("MV_CALCCM", .F., "N") == "S", .T.)
Local lCmTxCon  	:= .F.
Local nCasDec    	:= 0
Local lF070CM 		:= ExistBlock("F070CM")

DEFAULT nVlOrMdCr	:= (cAliasSE1)->E1_VALOR
DEFAULT nVlRecMdCr	:= nVlOrMdCr
DEFAULT dBaixa		:= dDataBase
DEFAULT cMotBx		:= "NOR"
DEFAULT cAliasSE1	:= "SE1"
DEFAULT nValRec		:= 0
DEFAULT nVlRealCmp	:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se deve calcular a Correcao Monetaria               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cPaisLoc == "BRA"
    If lCalcCM
        lCmTxCon   := SuperGetMv("MV_CMTXCON", .F., .F.)

        If !lCmTxCon
            lGerCm := Empty((cAliasSE1)->E1_TXMOEDA)
        EndIf
    EndIf
EndIf

If lCalcCM .And. lGerCm .And. (cAliasSE1)->E1_MOEDA > 1
    //Inicializa variáveis.
    nCasDec := (MsDecimais(1) + 1)
    nBaseCM := If(SuperGetMv("MV_TIPOCM", .F., "T") == "O", nVlOrMdCR, nVlRecMdCR)
    dDataCM := If(Empty((cAliasSE1)->E1_DTVARIA), (cAliasSE1)->E1_EMISSAO, (cAliasSE1)->E1_DTVARIA)
    nTaxa   := nTaxaCM

    If nVlRealCmp < nBaseCM .and. nVlRealCmp > 0
        nBaseCM := nVlRealCmp
    Endif

    If lF070CM
        nVlrCm := Execblock("F070CM",.F.,.F.,{nTxMoeda})
    ElseIf lCmTxCon .And. !Empty(nValRec) //A variação da NF ocorre em relação ao pagamento

        nVlrAtuCR := Round(NoRound(xMoeda(nBaseCM, (cAliasSE1)->E1_MOEDA, 1, dBaixa, nCasDec, (cAliasSE1)->E1_TXMOEDA), 3), 2)
        nVlrCm    := (nValRec - nVlrAtuCR)

    Else

        nVlrOrigCR := Round(NoRound(xMoeda(nBaseCM, (cAliasSE1)->E1_MOEDA, 1, dDataCM, nCasDec, nTxMoeda), 3), 2)

        If cMotBx == "DEV"
            nVlrAtuCR := Round(NoRound(xMoeda(nBaseCM, (cAliasSE1)->E1_MOEDA, 1, (cAliasSE1)->E1_EMISSAO, nCasDec, nTaxa), 3), 2)
        Else
            nVlrAtuCR := Round(NoRound(xMoeda(nBaseCM, (cAliasSE1)->E1_MOEDA, 1, (cAliasSE1)->E1_EMISSAO /*dBaixa*/, nCasDec, nTaxaCM), 3), 2)
        EndIf

        nVlrCm := nVlrAtuCR - nVlrOrigCR
    EndIf
EndIf

Return(nVlrCm)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaAbatCR  ³ Autor ³ Henry Fila            ³ Data ³01.09.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Calculo do abatimento do contas a receber                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Prefixo                                               ³±±
±±³          ³ExpC2: Numero                                                ³±±
±±³          ³ExpC3: Parcela                                               ³±±
±±³          ³ExpN4: Moeda                                            (OPC)³±±
±±³          ³ExpC5: Tipo de retorno                                  (OPC)³±±
±±³          ³       [V] Valor do Titulo                          (DEFAULT)³±±
±±³          ³       [S] Saldo do Titulo                                   ³±±
±±³          ³ExpD6: Data para conversao da Moeda                     (OPC)³±±
±±³          ³ExpC7: Filial do titulo posicionado                     (OPC)³±±
±±³          ³ExpL8: Controle da execucao de query                    (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1: Valor do Abatimento                                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo calcular o valor dos abatimen- ³±±
±±³          ³tos que o titulo sofreu, conforme os parametros solicitados. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Analista  ³ Data/Bops/Ver ³Manutencao Efetuada                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Andrea F. ³09/03/06³811   ³BOPS 94721 - Tratamento para considerar a    ³±±
±±³          ³        ³      ³filial recebida como parametro para posiciona³±±
±±³          ³        ³      ³no SE1. Tratar a execucao da query.  		   ³±±
±±³Michel M. ³15/01/07³8.11  ³Bops 117152 - Atribui a variavel cCampo com o³±±
±±³          ³        ³      ³campo a ser lido da Base de dados, tanto em  ³±±
±±³          ³        ³      ³Top quanto em Codebase.              		   ³±±
±±³Michel M. ³06/06/07³8.11  ³Bops 127465 - Adicionado tratamento exclusivo³±±
±±³          ³        ³      ³para banco de dados AS/400.          		   ³±±
±±³          ³        ³      ³                                     		   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaAbatCR(cPrefixo, cNumero, cParcela, nMoeda, cCpo, dData, cFilSE1, lExecQry,nTxMoeda,cAliasSE1)

Local aArea     	:= GetArea()			// Armazena a area da tabela em uso
Local aAreaSE1  	:= SE1->(GetArea())	// Armazena a area do SE1
Local aAreaSE1__	:= {}
Local nTotAbat  	:= 0					// Armazena o valor total do abate
Local cCampo    	:= ""					// Armazena o campo a ser lido do SE1
Local cTipo 		:= Space(TamSX3("E1_TIPO")[1])		//Criado para recuperar o tipo de forma a gerar menos impactos nas chamadas da FaAbatCR - necessario substituir por parametro da funcao
Local cProcedure	:= GetSPName("FIN001","08")
Local lPFin001		:= ExistProc (cProcedure , VerIDProc() )

DEFAULT dData  		:= dDataBase
DEFAULT nMoeda 		:= 1
DEFAULT cCpo   		:= "V"
DEFAULT cFilSE1		:= xFilial("SE1")	// Filial do titulo selecionado
DEFAULT lExecQry    := .T.        		// Criado para executar ou nao a query, nos casos em que o titulo ja se encontra posicionado na tabela SE1
DEFAULT cAliasSE1 	:= "SE1"

//Atribui o campo a ser lido dependente do retorno esperado
cCampo := IIf( cCpo == "V", "E1_VALOR" , "E1_SALDO" )

//Valida o tipo de titulo posicionado na SE1 com a passagem de parametros para validar o tipo do título - mantido por compatibilidade
dbSelectArea(cAliasSE1)
If (cAliasSE1)->(E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA) == cFilSE1+cPrefixo+cNumero+cParcela
    cTipo := (cAliasSE1)->E1_TIPO
EndIf

If Select("__SE1") == 0
    ChkFile("SE1",.F.,"__SE1")
Else
    DbSelectArea("__SE1")
EndIf

aAreaSE1__ := __SE1->(GetArea()) // Armazena a area do __SE1

__SE1->(DbSetOrder(1))

If __SE1->(DbSeek( xFilial("SE1",cFilSE1)+cPrefixo+cNumero+cParcela ))

    //Se a procedure está habilitada, executa a SomaAbat
    If Funname()!="FINR340" .And. lPFin001
        nTotAbat := SomaAbat(cPrefixo,cNumero,cParcela,"R",nMoeda,dData,__SE1->E1_CLIENTE,__SE1->E1_LOJA,cFilSE1,,cTipo)
    Else
        While __SE1->(!Eof()) .And. __SE1->(E1_FILIAL + E1_PREFIXO + E1_NUM + E1_PARCELA)	== cFilSE1 + cPrefixo + cNumero + cParcela

            If __SE1->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT+"/"+MVCSABT+"/"+MVCFABT+"/"+MVPIABT

                If (!Empty(__SE1->E1_TITPAI) .And. __SE1->E1_TITPAI == PadR(cPrefixo + cNumero + cParcela + cTipo + __SE1->E1_CLIENTE + __SE1->E1_LOJA,TamSX3("E1_TITPAI")[1])) .Or.;
                    Empty(__SE1->E1_TITPAI)
                    nTotAbat += xMoeda(__SE1->(FieldGet(FieldPos(cCampo))),__SE1->E1_MOEDA,nMoeda,dData,/*nDecimal*/,,nTxMoeda)
                EndIf
            EndIf
            dbSelectArea("__SE1")
            dbSkip()
        EndDo
    EndIf
EndIf

RestArea(aAreaSE1__)
RestArea(aAreaSE1)
RestArea(aArea)
Return (nTotAbat)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaVlAtuCR ³ Autor ³ Henry Fila            ³ Data ³01.09.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Calcula os valores financeiros do Contas a Receber           ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Contas a Receber                        (OPC)³±±
±±³          ³       DEFAULT = "SE1"                                       ³±±
±±³          ³ExpD2: Data da Baixa                                    (OPC)³±±
±±³          ³       DEFAULT = dDataBase                                   ³±±
±±³          ³ExpC3: Motivo da Baixa                                  (OPC)³±±
±±³          ³ExpL4: Indica se somente o saldo e o valor original serao    ³±±
±±³          ³       demonstrados.                                         ³±±
±±³          ³ExpC5: Filial do titulo                                      ³±±
±±³          ³ExpL6: Controla a execucao da query existente na funcao      ³±±
±±³          ³       FaAbatCR()                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpA1: Array com a seguinte estrutura                        ³±±
±±³          ³       [1] Valor Original do Titulo                          ³±±
±±³          ³       [2] Abatimentos                                       ³±±
±±³          ³       [3] Pagto Parcial                                     ³±±
±±³          ³       [4] Decrescimo                                        ³±±
±±³          ³       [5] Acrescimo                                         ³±±
±±³          ³       [6] Saldo do Titulo na Moeda do Titulo                ³±±
±±³          ³       [7] Saldo do Titulo na Moeda Corrente                 ³±±
±±³          ³       [8] Juros                                             ³±±
±±³          ³       [9] Desconto                                          ³±±
±±³          ³       [A] Correcao Monetaria                                ³±±
±±³          ³       [B] Valor a ser Recebido na moeda do titulo           ³±±
±±³          ³       [C] Valor a ser Recebido na moeda corrente            ³±±
±±³          ³       [D] Multa                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo calcular os valores finaceiros ³±±
±±³          ³do titulo atual conforme os parametros solicitados.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaVlAtuCr(	cAliasSE1, dBaixa, cMotBx, lTitulo, cFilSE1, lExecQry, nTaxaCM, aTxMoeda, lConsdAbat, nValRec, nVlRealCmp )
Local aRetorno		:= {}
Local nSldMdCR		:= 0
Local nRecMdCR		:= 0
Local nReceber		:= 0
Local nSaldo		:= 0
Local nParciais		:= 0
Local nVlrAbat		:= 0
Local nJuros		:= 0
Local nDesconto		:= 0
Local nMulta		:= 0
Local cMVJurTipo	:= SuperGetMV("MV_JURTIPO",,"")		//Calculo de Juros e Multas: SIGALOJA x SIGAFIN
Local lLojxRMul		:= .T.								// LojxRMul - Calculo de Juros e Multas: SIGALOJA x SIGAFIN
Local lMvLjIntFs	:= SuperGetMV("MV_LJINTFS", , .F.)	//Habilita Integração com o Financial Services?
Local lCmTxCon      := SuperGetMv("MV_CMTXCON", .F., .F.)
Local nTxPart       := 0

Default cAliasSE1	:= "SE1"
Default dBaixa		:= dDataBase
Default cMotBx		:= "NOR"
Default lTitulo		:= .F.
Default cFilSE1		:= xFilial("SE1")	// Filial do titulo selecionado
Default lExecQry	:= .T.				// Criado para executar ou nao a query, nos casos em que o titulo ja se encontra posicionado na tabela SE1
Default lConsdAbat	:= .F.
Default nValRec 	:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Valor Original do Titulo                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Aadd(aRetorno,(cAliasSE1)->E1_VALOR)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Abatimentos                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lTitulo .Or. ( lTitulo .And. lConsdAbat )
    nVlrAbat := FaAbatCR((cAliasSE1)->E1_PREFIXO,(cAliasSE1)->E1_NUM,(cAliasSE1)->E1_PARCELA,(cAliasSE1)->E1_MOEDA,"S",dBaixa,cFilSE1,lExecQry,(cAliasSE1)->E1_TXMOEDA,cAliasSE1)
    Aadd(aRetorno,nVlrAbat)
Else
    Aadd(aRetorno,0)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Pagamentos Parciais                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nParciais := (cAliasSE1)->E1_VALOR - (cAliasSE1)->E1_SALDO
Aadd(aRetorno,nParciais)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Decrescimo                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Aadd(aRetorno,(cAliasSE1)->E1_SDDECRE)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Acrescimo                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Aadd(aRetorno,(cAliasSE1)->E1_SDACRES)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Saldo do Titulo                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nSldMdCR := Max((cAliasSE1)->E1_SALDO - nVlrAbat,0)

Aadd(aRetorno,nSldMdCR)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Saldo do Titulo na Moeda Corrente                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If lCmTxCon .And. (cAliasSE1)->E1_TXMOEDA > 0
    nTxPart := nTaxaCM
Else    
    nTxPart := GetTxMoeNew(aTxMoeda,(cAliasSE1)->E1_MOEDA)
EndIf 

nSaldo := xMoeda(nSldMdCR,(cAliasSE1)->E1_MOEDA,1,dBaixa,/*nDecimal*/,nTxPart,GetTxMoeNew(aTxMoeda,1))
Aadd(aRetorno,nSaldo)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Juros                                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lTitulo
    If nSldMdCR <> 0
        nJuros := FaJuros((cAliasSE1)->E1_VALOR,nSldMdCR,(cAliasSE1)->E1_VENCTO,(cAliasSE1)->E1_VALJUR,(cAliasSE1)->E1_PORCJUR,(cAliasSE1)->E1_MOEDA,(cAliasSE1)->E1_EMISSAO,dBaixa,,(cAliasSE1)->E1_BAIXA,(cAliasSE1)->E1_VENCREA,cAliasSE1)
    EndIf
    Aadd(aRetorno,nJuros)
Else
    Aadd(aRetorno,Nil)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Descontos                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lTitulo
    If nSldMdCR <> 0
        If nModulo == 39 //-- para o OMS
            If Empty(nParciais)
                  nDesconto := FaDescFin(cAliasSE1,dBaixa,(cAliasSE1)->E1_SALDO+nJuros,1,IIf(Type("lDescOms") != "U",lDescOms,.F.))
            EndIf
        Else
            nDesconto := FaDescFin(cAliasSE1,dBaixa,(cAliasSE1)->E1_SALDO+nJuros,1)
        EndIf
    EndIf
    Aadd(aRetorno,nDesconto)
Else
    Aadd(aRetorno,Nil)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Inserido o cálculo de multa, segundo a regra do controle de Lojas³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nMulta := 0
If (cMVJurTipo == "L"  .OR. lMvLjIntFs) .and. lLojxRMul
    //Calcula o valor da Multa  :funcao LojxRMul :fonte Lojxrec
    nMulta := LojxRMul( , , ,(cAliasSE1)->E1_SALDO, (cAliasSE1)->E1_ACRESC, (cAliasSE1)->E1_VENCREA, dBaixa, , (cAliasSE1)->E1_MULTA, ,;
                           (cAliasSE1)->E1_PREFIXO, (cAliasSE1)->E1_NUM, (cAliasSE1)->E1_PARCELA, (cAliasSE1)->E1_TIPO, (cAliasSE1)->E1_CLIENTE, (cAliasSE1)->E1_LOJA, cAliasSE1 )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula o valor a receber                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nRecMdCr := nSldMdCR+xMoeda(nMulta+nJuros-nDesconto, 1 ,(cAliasSE1)->E1_MOEDA,dBaixa,/*nDecimal*/,,(cAliasSE1)->E1_TXMOEDA-(cAliasSE1)->E1_SDDECRE + (cAliasSE1)->E1_SDACRES )
nReceber := nSaldo+nJuros+nMulta-nDesconto+xMoeda((cAliasSE1)->E1_SDACRES-(cAliasSE1)->E1_SDDECRE,(cAliasSE1)->E1_MOEDA,1,dBaixa,/*nDecimal*/,(cAliasSE1)->E1_TXMOEDA )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se nao foi feito nenhuma baixa parcial, para que    ³
//³ seja mostrado o valor do desconto na aba BAIXA.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(aRetorno[9]) .And. !Empty((cAliasSE1)->E1_VALLIQ) .And. Empty(nParciais) .And. SuperGetMV("MV_DESCFIN",,)=="I" .And. nModulo == 39 //-- SIGAOMS
    aRetorno[9] := (cAliasSE1)->E1_VALLIQ
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Correcao Monetaria                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lTitulo
    Aadd(aRetorno,FaCMCR(cAliasSE1,nRecMdCR,cMotBx,dBaixa,nSldMdCR,nTaxaCM,aTxMoeda,nValRec,nVlRealCmp))
Else
    Aadd(aRetorno,Nil)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Valor a Receber                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aadd(aRetorno,nRecMdCr)
Aadd(aRetorno,nReceber)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Multa                                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Aadd(aRetorno,nMulta)

Return(aRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaCmpCR   ³ Autor ³ Eduardo Riera         ³ Data ³02.09.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de Compensasao do Contas a Receber                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array com os dados do titulo principal                ³±±
±±³          ³       [1] Abatimento (-)                                    ³±±
±±³          ³       [2] Descrescimo (-)                                   ³±±
±±³          ³       [3] Acrescimo   (+)                                   ³±±
±±³          ³ExpA2: Array com os dados do titulos a compensar             ³±±
±±³          ³     {}[1] RecNo do Titulo a compensar                       ³±±
±±³          ³       [2] Valor do Titulo a compensar na moeda do Titulos   ³±±
±±³          ³           principal                                         ³±±
±±³          ³       [3] Valor do Abatimento da NCC                        ³±±
±±³          ³       [4] Data da Baixa                                (OPC)³±±
±±³          ³       [5] Numero de Lote para contabilizacao           (OPC)³±±
±±³          ³       [6] Data a ser considerar para converte o valor do    ³±±
±±³          ³           titulo principal para a moeda corrente       (OPC)³±±
±±³          ³       [7] Taxa da moeda a ser considerada para converte o   ³±±
±±³          ³           valor do titulo principal para a moeda corrente   ³±±
±±³          ³           (OPCIONAL)                                        ³±±
±±³          ³       [8] Numero de decimais utilizado nas conversoes. (OPC)³±±
±±³          ³       [9] Numero de decimais utilizado nas conversoes. (OPC)³±±
±±³          ³      [10] Taxa da moeda a ser considerada para converte o   ³±±
±±³          ³           valor do titulo principal para a moeda da CMP     ³±±
±±³          ³           (OPCIONAL)                                        ³±±
±±³          ³ExpL3: Indica se a compensacao sera contabilizada       (OPC)³±±
±±³          ³ExpL4: Indica se ha calculo de comissao                 (OPC)³±±
±±³          ³ExpC5: Indica o programa de origem da compensacao       (OPC)³±±
±±³          ³ExpB6: Bloco de codigo para contabilizacao                   ³±±
±±³          ³       (OPC)                                                 ³±±
±±³          ³ExpB7: Bloco de codigo apos cada compensacao. Recebe o       ³±±
±±³          ³       E5_DOCUMEN como parametro                        (OPC)³±±
±±³          ³ExpA8: Codigo da amarracao entre o titulo compensado e o     ³±±
±±³          ³       adiantamento ( E5_DOCUMEN ). Quando informado indica  ³±±
±±³          ³       uma operacao de estorno.                         (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a compensacao dos titu-³±±
±±³          ³los a receber conforme os parametros solicitados.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaCmpCR( aTitulo, aCompensar, lLctPad, lComisNCC, cOrigem, bContabil, bBlock, aEstorno, cProcComp )
Local aArea			:= GetArea()
Local aAreaSE1		:= SE1->(GetArea())
Local aAreaCMP		:= {}
Local aAreaSE5		:= {}
Local aAreaE5a      := {}
Local aAreaAbat		:= {}
Local aComissao		:= {}
Local aDelCMP		:= {}
Local nX			:= 0
Local nY			:= 0
Local nVlCpMdCp		:= 0
Local nVlCpMd1		:= 0
Local nSldMdCR		:= 0
Local nSldMdCp		:= 0
Local nVlBxMdCr		:= 0
Local nVlBxMd1		:= 0
Local nMoedaCR		:= SE1->E1_MOEDA
Local nAtraso		:= 0
Local cAliasSE1		:= "SE1"
Local cAliasSE5		:= "SE5"
Local xFilSE1		:= ""
Local cPrefixo		:= SE1->E1_PREFIXO
Local cNumero		:= SE1->E1_NUM
Local cParcela		:= SE1->E1_PARCELA
Local cCliente		:= SE1->E1_CLIENTE
Local cLoja			:= SE1->E1_LOJA
Local cPrincipal	:= SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_LOJA
Local cNCC_RA		:= ""
Local cSeqBx		:= ""
Local cSeqBxCp		:= ""
Local cPrimary		:= ""
Local cFilterSE1	:= SE1->(dbFilter())
Local lQuery		:= .F.
Local lEstorno		:= !Empty(aEstorno)
Local nTitAcres		:= 0	//Acrescimo Tit Principal
Local nTitDecre		:= 0	//Decrescimo Tit Principal
Local nAdtAcres		:= 0	//Acrescimo Tit Adiantamento
Local nAdtDecre		:= 0	//Decrescimo Tit Adiantamento
Local lUsaFlag		:= SuperGetMV( "MV_CTBFLAG" , .T. /*lHelp*/, .F. /*cPadrao*/)
Local l330Mov1		:= ExistBlock("SE5FI330")
Local l330Mov2		:= ExistBlock("SE5FI331")
Local lFrtBxNCC		:= FwIsInCallStack("FRTBXNCC") .Or. FwIsInCallStack("LJGRVREC") // Retorna se a funcao foi chamada a partir da FRTBXNCC ou pela rotina de recebimento de titulo do LOJA
Local nSldTCom		:= 0	//Considerar o valor de acrescimo fin. separado da parcela (MV_LJICMJR) para compensar as parcelas em abertas quando devoluçao de marcadoria (LOJA720)
Local cFornAdt		:= ""
Local cLojaAdt		:= ""
Local aDelCorre		:= {}
Local lMaIntDel		:= .F.	// ExistBlock("MaIntDel")
// LINHA COMENTADA PARA NAO PERDEMOS O HISTORICO DO QUE JA FOI FEITO
// CRIADO ESTORNO PARA A ROTINA AUTOMATICA DO MAINTBXCR
Local cSeqEst		:= ""
Local nRegSE5		:= 0
Local oModelBxR     := NIL
Local oSubFK1       := NIL
Local oSubFK5       := NIL
Local cLog			:= ""
Local cChaveTit		:= ""
Local cChaveFK7		:= ""
Local cCamposE5		:= ""
Local lRet			:= .T.
Local cHistMov		:= ""
Local cIdMov		:= ""
Local lTravaSA1		:= !ExistBlock("F070TRAVA") .Or. ExecBlock("F070TRAVA", .F., .F.)
Local lFA330SE1 	:= ExistBlock("FA330SE1")
Local cQuery		:= ""
Local cKeySE1		:= SE1->(IndexKey())
Local lJGrvBaixa	:= FindFunction("JGrvBaixa")
Local nRecTitPri    := SE1->(Recno())
Local cTitPai		:= ""
Local cFilCred		:= ""
Local lCmTxCon  	:= SuperGetMv("MV_CMTXCON", .F., .F.)
Local lMoedTxDif    := .F.

Private cLote		:= ""

Default lLctPad     := .F.
Default lComisNCC   := .F.
//SIGAPFS - Alteração realizada no cOrigem para que a compensação das Faturas com RAs fiquem com o E5_TIPODOC="BA".
//Sem isso, o estorno não estava sendo feito. - Chamado TQMYFS
Default cOrigem     := Iif(FwIsInCallStack("JURA203"),"JURA203","FINA330")
Default bContabil   := {|| .T.}
Default bBlock      := {|| .T.}
Default cProcComp   := ""

// Não permite que títulos já baixados possam ser acessados.
If !lEstorno .AND. (SE1->E1_SALDO <= 0 .Or. !DtMovFin(,.F./*lHelp*/))
    Return(.F.)  //nao pode ter mensagem pois eh usado em rotina automatica
Endif

If (cPaisLoc != "RUS" .or. !lEstorno)
    For nX := 1 To Len(aCompensar)
        For nY := 4 To 10
            If Len(aCompensar[nX])<nY
                aadd(aCompensar[nX],Nil)
            EndIf
            Do Case
                Case nY == 4 											// Data da Baixa
                    DEFAULT aCompensar[nX][4] := dDataBase
                Case nY == 5 											// Numero do Lote para Contabilizacao
                    DEFAULT aCompensar[nX][5] := ""
                    // Verifica o numero do Lote
                    LoteCont( "FIN" )
                    aCompensar[nX][5] := cLote
                Case nY == 8
                    DEFAULT aCompensar[nX][8] := 2
                Case nY == 9
                    DEFAULT aCompensar[nX][9] := .F.
                Case nY == 10
                    DEFAULT aCompensar[nX][10] := 0
            EndCase
        Next nY
    Next nX
EndIf

// Posiciona registros
dbSelectArea("SA1")
dbSetOrder(1)
DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA)

// Trava o registro principal
If RecLock("SE1") .And. (!lTravaSA1 .Or. RecLock("SA1"))
    If !lEstorno
        // Inicia a compensacao dos titulos
        For nX := 1 To Len(aCompensar)
            If aCompensar[nX][CMP_VLRCMP]<>0

                // Calcula os valores a compensar do Titulo principal
                cPrincipal:= SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_LOJA

                //Obtenho a chave do título principal para amarração com o adiantamento (FK1_IDCOMP)
                If Empty(cProcComp)
  					cChaveTit := xFilial("SE1",SE1->E1_FILORIG) + "|" + SE1->E1_PREFIXO + "|" +	SE1->E1_NUM		+ "|" +;	
                                            SE1->E1_PARCELA + "|" + SE1->E1_TIPO	+ "|" +	SE1->E1_CLIENTE + "|" + SE1->E1_LOJA
					cChaveFK7P := FINGRVFK7("SE1",cChaveTit)
                Else 
                    cChaveFK7P := cProcComp
                Endif

                If aCompensar[NX][CMP_VLABAT]==0
                    nVlBxMdCr := aCompensar[nX][CMP_VLRCMP]
                    nVlBxMd1  := xMoeda(aCompensar[nX][CMP_VLRCMP],SE1->E1_MOEDA,1,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP])
                Else
                    nVlBxMdCr := aCompensar[nX][CMP_VLABAT]
                    nVlBxMd1  := xMoeda(aCompensar[nX][CMP_VLABAT],SE1->E1_MOEDA,1,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP])
                Endif

                // O Saldo pelo Loja tem tratamento diferenciado: ver changeset 182116 (01/10/2013 17:18:48)
                If lFrtBxNCC .AND. nX == 1
                    nSldMdCr  := (SE1->E1_SALDO-nVlBxMdCr - SE1->E1_SDDECRE + SE1->E1_SDACRES) + ((SE1->E1_JUROS + SE1->E1_MULTA) - SE1->E1_DESCONT)
                Else
                    nSldMdCr  := (SE1->E1_SALDO-nVlBxMdCr - SE1->E1_SDDECRE + SE1->E1_SDACRES)
                EndIf

                nTitAcres  := xMoeda(SE1->E1_SDACRES,nMoedaCR,1,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP])
                nTitDecre  := xMoeda(SE1->E1_SDDECRE,nMoedaCR,1,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP])
				If ( (SE1->E1_SALDO - SE1->E1_SDDECRE + SE1->E1_SDACRES) - ( nVlBxMdCr + aTitulo[CR_VLRABAT] ) <= 0.009 ) ;
                    .AND. !lFrtBxNCC
                    // no loja , na compensacao do titulo nao retorna no saldo o valor total,
                    // que esta com acrescimo, gerando divergencia na baixa e estorno da baixa
                    nSldMdCr := 0
                    nVlBxMdCr:= SE1->E1_SALDO
                EndIf

                nVlBxMdCr := nVlBxMdCr - nTitDecre + nTitAcres

                If  SE1->E1_MOEDA > 1 .And. nSldMdCr <= 0.01
                    nSldMdCr 	:= 0
                    nVlBxMdCr	:= SE1->E1_SALDO
                EndIf

                // Verifica a proxima sequencia de baixa do titulo principal
                cSeqBx := FaNxtSeqBx()

                // Posiciona no titulo de adiantamento 
                dbSelectArea("SE1")
                MsGoTo(aCompensar[nX][CMP_RECNO])
                cNCC_RA   := SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_LOJA
                //Obtenho a chave do título de adiantamento para amarração com o adiantamento (FK1_IDCOMP)
                If Empty(cProcComp)
  					cChaveTit := xFilial("SE1",SE1->E1_FILORIG) + "|" + SE1->E1_PREFIXO + "|" +	SE1->E1_NUM	 + "|" +;	
                                 SE1->E1_PARCELA + "|" + SE1->E1_TIPO + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA
					cChaveFK7A := FINGRVFK7("SE1",cChaveTit)
                Else 
                    cChaveFK7A := cProcComp
                Endif

                //Armazena o codigo cliente da NCC para posterior busca do titulo que compensou
                cFornAdt := SE1->E1_CLIENTE
                cLojaAdt := SE1->E1_LOJA

                lMoedTxDif := .F.
                
                //Compensacoes na mesma moeda com taxas contratadas diferentes
                If SE1->E1_MOEDA == nMoedaCR .And. SE1->E1_TXMOEDA > 0
                    If aCompensar[nX][CMP_TAXAD] <> aCompensar[nX][CMP_TAXAP] .And. !lCmTxCon
                        lMoedTxDif := .T.
                    EndIf
                EndIf

                If RecLock("SE1")
                    // Verifica a proxima sequencia de baixa
                    cSeqBxCp := FaNxtSeqBx()

                    // Verifica a maior sequencia entre os dois titulos
                    cSeqBx := IIf(cSeqBxCp>cSeqBx,cSeqBxCp,cSeqBx)

                    // Calcula os valores a compensar do Titulo de adiantamento
                    If aCompensar[nX][CMP_VLABAT] == 0
                        nVlCpMd1  := xMoeda(aCompensar[nX][CMP_VLRCMP],nMoedaCR,1,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],IIF(lMoedTxDif,aCompensar[nX][CMP_TAXAD],aCompensar[nX][CMP_TAXAP] ))

                        If SE1->E1_MOEDA > 1
                            nVlCpMdCp := xMoeda(aCompensar[nX][CMP_VLRCMP],nMoedaCR,SE1->E1_MOEDA,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP],aCompensar[nX][CMP_TAXAD])
                        Else
                            nVlCpMdCp := aCompensar[nX][CMP_VLRCMP]
                        EndIf
                    Else
                        nVlCpMd1  := xMoeda(aCompensar[nX][CMP_VLABAT],nMoedaCR,1,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAD])

                        If SE1->E1_MOEDA > 1
                            xMoeda(aCompensar[nX][CMP_VLABAT],nMoedaCR,SE1->E1_MOEDA,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP],aCompensar[nX][CMP_TAXAD])
                        Else
                            nVlCpMdCp := aCompensar[nX][CMP_VLABAT]
                        EndIf
                    Endif
                    nSldMdCp  := SE1->E1_SALDO - nVlCpMdCp - SE1->E1_SDDECRE + SE1->E1_SDACRES
                    nAdtAcres  := xMoeda(SE1->E1_SDACRES,nMoedaCR,nMoedaCR,SE1->E1_MOEDA,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP],aCompensar[nX][CMP_TAXAD])
                    nAdtDecre  := xMoeda(SE1->E1_SDDECRE,nMoedaCR,nMoedaCR,SE1->E1_MOEDA,aCompensar[nX][CMP_DATAP],aCompensar[nX][CMP_NUMDEC],aCompensar[nX][CMP_TAXAP],aCompensar[nX][CMP_TAXAD])

                    //Considerar o valor de acrescimo fin. separado da parcela (MV_LJICMJR) para compensar as parcelas em abertas quando devoluçao de marcadoria (LOJA720)
                    nSldTCom := iIf(FwIsInCallStack("LOJA720"), SE1->E1_SALDO - SE1->E1_SDDECRE + SE1->E1_SDACRES, SE1->E1_SALDO)

                    If ( nSldTCom - ( nSldMdCp + aCompensar[nX][CMP_VLABAT] ) <= 0.01 .and. nSldMdCp <= 0.01  ) .OR. (nSldMdCp <= 0.01 .And. SE1->E1_MOEDA > 1 )
                        nSldMdCp  := 0
                        nVlBxMdCp := SE1->E1_SALDO
                        nVlCpMdCp := SE1->E1_SALDO
                    EndIf
                    //------------------------------------------------------------------
                    // Efetua a baixa do titulo principal
                    //------------------------------------------------------------------
                    RestArea(aAreaSE1)
                    RecLock("SE1")
                    SE1->E1_SALDO   := nSldMdCr
                    SE1->E1_BAIXA   := If("OMSA341"$Upper(FunName()),IIf(nSldMdCr>0,Nil,aCompensar[nX][CMP_DTREC]),aCompensar[nX][CMP_DTREC])
                    SE1->E1_LOTE    := ""
                    SE1->E1_MOVIMEN := aCompensar[nX][CMP_DTREC]
                    If !lFrtBxNCC .AND. (nModulo != 12 .And. nModulo != 23)
                        SE1->E1_DESCONT := 0
                        SE1->E1_MULTA   := 0
                        SE1->E1_JUROS   := 0
                    EndIf
                    If (!lCmTxCon .Or. (lCmTxCon .And. !SE1->E1_TIPO $ MVRECANT))
                        SE1->E1_CORREC  := 0
                    EndIf
                    SE1->E1_VALLIQ  := SE1->E1_VALLIQ + IIf(SE1->E1_MOEDA == 1, nVlCpMd1, nVlCpMdCp)
                    SE1->E1_STATUS  := IIf(SE1->E1_SALDO>0.01,"A","B")

                    //se vier de compensacao, nao zera para nao divergir no estorno
                    // pois esse acrescimo sera utilizao na gravacao do movimento de baixa(SE5)
                    // no FINa070
                    If (!lFrtBxNCC .And. nModulo<>12) .OR. nSldMdCr == 0
                        SE1->E1_SDACRES := 0
                    EndIf

                    SE1->E1_SDDECRE := 0
                    SE1->( MsUnLock() )

                    If lFA330SE1
                        ExecBlock("FA330SE1",.F.,.F.)
                    EndIf

                    // Calcula os dias de Atraso
                    nAtraso:=aCompensar[nX][CMP_DTREC]-SE1->E1_VENCTO
                    If nAtraso > 1
                        If Dow(SE1->E1_VENCTO) == 1 .Or. Dow(SE1->E1_VENCTO) == 7
                            If Dow(aCompensar[nX][CMP_DTREC]) == 2 .And. nAtraso <= 2
                                nAtraso := 0
                            EndIf
                        EndIf
                        nAtraso:=Max(0,nAtraso)
                    EndIf

                    // Atualiza os acumulados do cliente
                    // Atualiza maior atraso
                    If lTravaSA1
                        SA1->A1_MATR := nAtraso
                    EndIf

                    // Efetua a movimentacao de baixa do titulo principal
                    If nVlBxMd1 <> 0
                        //Define os campos que não existem nas FKs e que serão gravados apenas na E5, para que a gravação da E5 continue igual
                        If !Empty(cCamposE5)
                            cCamposE5 += "|"
                        Endif

                        cCamposE5 += "{"
                        cCamposE5 += "{'E5_DTDIGIT', dDataBase}"
                        cCamposE5 += ",{'E5_PREFIXO', SE1->E1_PREFIXO}"
                        cCamposE5 += ",{'E5_NUMERO', SE1->E1_NUM}"
                        cCamposE5 += ",{'E5_PARCELA', SE1->E1_PARCELA}"
                        cCamposE5 += ",{'E5_CLIFOR', SE1->E1_CLIENTE}"
                        cCamposE5 += ",{'E5_CLIENTE', SE1->E1_CLIENTE}"
                        cCamposE5 += ",{'E5_LOJA', SE1->E1_LOJA}"
                        cCamposE5 += ",{'E5_BENEF', SE1->E1_NOMCLI}"
                        cCamposE5 += ",{'E5_TIPO', SE1->E1_TIPO}"
                        cCamposE5 += ",{'E5_FORNADT', '"+cFornAdt+"'}"
                        cCamposE5 += ",{'E5_LOJAADT', '"+cLojaAdt+"'}"
                        If cPaisLoc == "PER" .and. Funname() == "MATA468N"
                            cCamposE5 += ",{'E5_MOEDA', '01'}"
                        EndIf
                        cCamposE5 += ",{'E5_VLJUROS', "+cValToChar(nTitAcres)+"}"
                        cCamposE5 += ",{'E5_VLACRES', "+cValToChar(nTitAcres)+"}"
                        cCamposE5 += ",{'E5_VLDESCO', "+cValToChar(nTitDecre)+"}"
                        cCamposE5 += ",{'E5_VLDECRE', "+cValToChar(nTitDecre)+"}"
						cCamposE5 += ",{'E5_DTDISPO', dDataBase}"

                        If ValType(aTitulo[4]) != "U" .And. aTitulo[4] != 0 .And. (!lCmTxCon .Or. (lCmTxCon .And. !SE1->E1_TIPO $ MVRECANT))
                            cCamposE5 += ",{'E5_VLCORRE', "+cValToChar(aTitulo[4])+"}"
                        EndIf

                        cCamposE5 += ",{'E5_LA', '"+ IIf(lLctPad,"S","N")+"'}"
                        cCamposE5 += "}"

                        oModelBxR := FWLoadModel("FINM010") //Model de baixas a Receber
                        oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Inclusao
                        oModelBxR:Activate()
                        oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Informa se vai gravar SE5 ou não
                        oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5
                        oModelBxR:SetValue( "MASTER", "NOVOPROC", .T. ) //Informa que a inclusão será feita com um novo número de processo

                        oSubFKA := oModelBxR:GetModel("FKADETAIL")
                        oSubFK1 := oModelBxR:GetModel("FK1DETAIL")

                        cChaveTit := xFilial("SE1") + "|" +  SE1->E1_PREFIXO + "|" + SE1->E1_NUM + "|" + SE1->E1_PARCELA + "|" + ;
                                      SE1->E1_TIPO + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA

                        cChaveFK7 := FINGRVFK7("SE1", cChaveTit)
                        cIdMov:= FWUUIDV4()

                        oSubFKA:SetValue( "FKA_IDORIG", cIdMov )
                        oSubFKA:SetValue( "FKA_TABORI", "FK1" )

                        //Historico diferenciado para gestao de contratos
                        If aCompensar[nX,CMP_GRCONT]
                            cHistMov := "//CMP--CTR..COMP.AUTOMATICA CAUCAO CONTRATOS"
                        Else
                            cHistMov := "Comp. p/Prestacao de Contas"
                        EndIf

                        //Dados da baixa a receber
                        oSubFK1:SetValue( "FK1_DATA", aCompensar[nX][CMP_DTREC] )
                        oSubFK1:SetValue( "FK1_VENCTO", SE1->E1_VENCREA )
                        oSubFK1:SetValue( "FK1_CCUSTO", SE1->E1_CCUSTO )
                        oSubFK1:SetValue( "FK1_LA"    , IIf(lLctPad,"S","N"))
                        oSubFK1:SetValue( "FK1_VALOR" , If(SE1->E1_MOEDA == 1, nVlBxMd1, nVlBxMdCR) )
                        oSubFK1:SetValue( "FK1_MOEDA" , StrZero(SE1->E1_MOEDA,2) )
                        oSubFK1:SetValue( "FK1_NATURE", SE1->E1_NATUREZ )
                        oSubFK1:SetValue( "FK1_RECPAG", "R" )
                        oSubFK1:SetValue( "FK1_TPDOC" , If(cOrigem=="MATA465","BA","CP") )
                        oSubFK1:SetValue( "FK1_VLMOE2", If(SE1->E1_MOEDA == 1, nVlBxMdCR, nVlBxMd1) )
                        oSubFK1:SetValue( "FK1_MOTBX" , "CMP" )
                        oSubFK1:SetValue( "FK1_TXMOED", Iif( SE1->E1_MOEDA > 1, aCompensar[nX][CMP_TAXAP], 0 ) )
                        oSubFK1:SetValue( "FK1_ORIGEM", FunName() )
                        oSubFK1:SetValue( "FK1_SEQ"   , cSeqBx )
                        oSubFK1:SetValue( "FK1_IDDOC" , cChaveFK7 )
                        oSubFK1:SetValue( "FK1_FILORI",	SE1->E1_FILORIG)
                        oSubFK1:SetValue( "FK1_LOTE"  , aCompensar[nX][CMP_LOTE])
                        oSubFK1:SetValue( "FK1_DOC"   , cNCC_RA)
                        oSubFK1:SetValue( 'FK1_HISTOR', cHistMov)
                        oSubFK1:SetValue( 'FK1_IDCOMP', cChaveFK7A)     //Gravo a chave do adiantamento

                        If aTitulo[4] != 0    // Geracao de Correcao monetaria
                            FinGerCM(1, 'R', aTitulo[4], oModelBxR, cIdMov)
                        EndIf

                        If oModelBxR:VldData()
                            oModelBxR:CommitData()
                               SE5->(dbGoto(oModelBxR:GetValue( "MASTER", "E5_RECNO" )))

                            // Integração SIGAPFS e SIGAFIN
                            If lJGrvBaixa
                                JGrvBaixa( nRecTitPri,  SE5->(Recno()), aCompensar[nX][CMP_RECNO] ) // Comp. do Tit. Principal | 1º paramêtro RECNO Tit. Principal - 3º paramêtro RECNO do RA
                            EndIf

                        Else
                            lRet := .F.
                            cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                            cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                            cLog += cValToChar(oModelBxR:GetErrorMessage()[6])

                            Help( ,,"M020VALID",,cLog, 1, 0 )
                        Endif

                        oModelBxR:DeActivate()
                        oModelBxR:Destroy()
                        oModelBxR:= Nil

                        If lUsaFlag .AND. lLctPad // Armazena em aFlagCTB para atualizar no modulo Contabil
                            aAdd( aFlagCTB, {"FK1_LA", "S", "FK1", FK1->( Recno() ), 0, 0, 0} )
                            aAdd( aFlagCTB, {"E5_LA", "S", "SE5", SE5->( Recno() ), 0, 0, 0} )
                        EndIf

                        If l330Mov1
                            ExecBlock("SE5FI330",.F.,.F.)
                        EndIf

                        // Guarda a chave primary da baixa para busca futura
                        cPrimary := FK1->FK1_DOC

                        // FKs - Trecho só poderá ser reescrito após a Fa440CalcB convertida para FKs
                        If lComisNCC
                            aadd(aComissao,{SE5->E5_MOTBX,SE5->E5_SEQ,SE5->(RecNo())})
                        EndIf

                    EndIf

                    // Encerra os titulos de abatimento caso a baixa seja total
                    If SE1->E1_SALDO == 0
                        xFilSE1   := SE1->E1_FILIAL
                        cPrefixo  := SE1->E1_PREFIXO
                        cNumero   := SE1->E1_NUM
                        cParcela  := SE1->E1_PARCELA
                        cCliente  := SE1->E1_CLIENTE
                        cLoja     := SE1->E1_LOJA

                        dbSelectArea("SE1")
                        dbSetOrder(2)
                        SE1->(dbCommit())

                        aAreaAbat := SE1->(GetArea())

                        cAliasSE1 := "FaCmpCR"
                        lQuery    := .T.
                        cQuery := "SELECT SE1.E1_TIPO, SE1.R_E_C_N_O_ SE1RECNO "
                        cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
                        cQuery += "WHERE SE1.E1_FILIAL='" + xFilSE1 + "' AND "
                        cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
                        cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
                        cQuery += "SE1.E1_PARCELA='"+cParcela+"' AND "
                        cQuery += "SE1.E1_CLIENTE='"+cCliente+"' AND "
                        cQuery += "SE1.E1_LOJA='"+cLoja+"' AND "
                        cQuery += "SE1.D_E_L_E_T_=' ' "

                        cQuery := ChangeQuery(cQuery)

                        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)

                        While !(cAliasSE1)->(Eof())

                            If (cAliasSE1)->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT+"/"+MVPIABT+"/"+	MVCFABT+"/"+MVCSABT
                                dbSelectArea("SE1")
                                MsGoto((cAliasSE1)->SE1RECNO)
                                RecLock("SE1",.F.)
                                SE1->E1_SALDO   := 0
                                SE1->E1_BAIXA   := aCompensar[nX][CMP_DTREC]
                                SE1->E1_LOTE    := aCompensar[nX][CMP_LOTE]
                                SE1->E1_MOVIMEN := aCompensar[nX][CMP_DTREC]
                                SE1->E1_STATUS  := "B"
                                MsUnLock()
                            EndIf
                            dbSelectArea(cAliasSE1)
                            dbSkip()
                        EndDo

                        dbSelectArea(cAliasSE1)
                        dbCloseArea()

                        dbSelectArea("SE1")
                        RestArea(aAreaAbat)

                    EndIf

                    If nVlBxMd1 <> 0
                        //Armazena o codigo cliente da NCC para posterior busca do titulo que compensou
                        cFornAdt := SE1->E1_CLIENTE
                        cLojaAdt := SE1->E1_LOJA

                        // Posiciona no titulo de adiantamento
                        dbSelectArea("SE1")
                        MsGoTo(aCompensar[nX][CMP_RECNO])

                        //------------------------------------------------------------------
                        // Efetua a baixa do titulo de adiantamento
                        //------------------------------------------------------------------
                        RecLock("SE1")
                        SE1->E1_SALDO   := nSldMdCp
                        SE1->E1_BAIXA   := aCompensar[nX][CMP_DTREC]
                        SE1->E1_LOTE    := aCompensar[nX][CMP_LOTE]
                        SE1->E1_MOVIMEN := aCompensar[nX][CMP_DTREC]
                        If !lFrtBxNCC .And. (nModulo != 12 .And. nModulo != 23)
                            SE1->E1_DESCONT := 0
                            SE1->E1_MULTA   := 0
                            SE1->E1_JUROS   := 0
                        EndIf
                        If (!lCmTxCon .Or. (lCmTxCon .And. !SE1->E1_TIPO $ MVRECANT))
                            SE1->E1_CORREC  := 0
                        EndIf
                        SE1->E1_VALLIQ  := SE1->E1_VALLIQ + IIf(SE1->E1_MOEDA == 1,nVlCpMd1,nVlCpMdCp)
                        SE1->E1_STATUS  := IIf(SE1->E1_SALDO>0.01,"A","B")
                        SE1->E1_SDACRES := 0
                        SE1->E1_SDDECRE := 0
                        SE1->( MsUnLock() )

                        If !Empty(FK1->FK1_DOC)

                            //Define os campos que não existem nas FKs e que serão gravados apenas na E5, para que a gravação da E5 continue igual
                            If !Empty(cCamposE5)
                                cCamposE5 := ""
                            EndIf

                            cCamposE5 += "{"
                            cCamposE5 += "{'E5_DTDIGIT', dDataBase}"
                            cCamposE5 += ",{'E5_PREFIXO', SE1->E1_PREFIXO}"
                            cCamposE5 += ",{'E5_NUMERO', SE1->E1_NUM}"
                            cCamposE5 += ",{'E5_PARCELA', SE1->E1_PARCELA}"
                            cCamposE5 += ",{'E5_CLIFOR', SE1->E1_CLIENTE}"
                            cCamposE5 += ",{'E5_CLIENTE', SE1->E1_CLIENTE}"
                            cCamposE5 += ",{'E5_LOJA', SE1->E1_LOJA}"
                            cCamposE5 += ",{'E5_BENEF', SE1->E1_NOMCLI}"
                            cCamposE5 += ",{'E5_TIPO', SE1->E1_TIPO}"
                            cCamposE5 += ",{'E5_FORNADT', '"+cFornAdt+"'}"
                            cCamposE5 += ",{'E5_LOJAADT', '"+cLojaAdt+"'}"
                            If cPaisLoc == "PER" .and. Funname() == "MATA468N"
                                cCamposE5 += ",{'E5_MOEDA', '01'}"
                            EndIf
                            cCamposE5 += ",{'E5_VLJUROS',"+cValToChar(nAdtAcres)+"}"
                            cCamposE5 += ",{'E5_VLDESCO',"+cValToChar(nAdtDecre)+"}"
							cCamposE5 += ",{'E5_DTDISPO', dDataBase}"

                            If aCompensar[nX][11] != 0 .And. (!lCmTxCon .Or. (lCmTxCon .And. !SE1->E1_TIPO $ MVRECANT))
                                cCamposE5 += ",{'E5_VLCORRE',"+cValToChar(aCompensar[nX][11])+"}"
                            EndIf

                            cCamposE5 += ",{'E5_LA', '" + IIf(lLctPad, "S", "N")+ "'}"
                            cCamposE5 += "}"

                            oModelBxR := FWLoadModel("FINM010") //Model de baixas a Receber

                            oModelBxR:SetOperation( MODEL_OPERATION_INSERT ) //Inclusao
                            oModelBxR:Activate()
                            oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Informa se vai gravar SE5 ou não
                            oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5
                            oModelBxR:SetValue( "MASTER", "NOVOPROC", .T. ) //Informa que a inclusão será feita com um novo número de processo

                            oSubFKA := oModelBxR:GetModel("FKADETAIL")
                            oSubFK1 := oModelBxR:GetModel("FK1DETAIL")
                            oSubFK5 := oModelBxR:GetModel("FK5DETAIL")
                            cChaveTit := xFilial("SE1") + "|" +  SE1->E1_PREFIXO + "|" + SE1->E1_NUM + "|" + SE1->E1_PARCELA + "|" + ;
                                          SE1->E1_TIPO + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA
                            cChaveFK7 := FINGRVFK7("SE1", cChaveTit)
                            cIdMov:= FWUUIDV4()

                            oSubFKA:SetValue( "FKA_IDORIG", cIdMov )
                            oSubFKA:SetValue( "FKA_TABORI", "FK1" )

                            //Historico diferenciado para gestao de contratos
                            If aCompensar[nX,CMP_GRCONT]
                                cHistMov := "//CMP--CTR..COMP.AUTOMATICA CAUCAO CONTRATOS"
                            Else
                                cHistMov := "Baixa por Compensacao"
                            EndIf

                            //Dados da baixa a receber
                            oSubFK1:SetValue( "FK1_DATA", SE1->E1_BAIXA )
                            oSubFK1:SetValue( "FK1_VENCTO", SE1->E1_VENCREA )
                            oSubFK1:SetValue( "FK1_CCUSTO", SE1->E1_CCUSTO )
                            oSubFK1:SetValue( "FK1_LA"    , IIf(lLctPad,"S","N"))
                            oSubFK1:SetValue( "FK1_VALOR" , If(SE1->E1_MOEDA == 1, nVlCpMd1, nVlCpMdCp) )
                            oSubFK1:SetValue( "FK1_MOEDA" , StrZero(SE1->E1_MOEDA,2) )
                            oSubFK1:SetValue( "FK1_NATURE", SE1->E1_NATUREZ )
                            oSubFK1:SetValue( "FK1_RECPAG", "R" )
                            oSubFK1:SetValue( "FK1_TPDOC" , If(cOrigem $ "JURA203","BA",If(cOrigem<>"MATA465","BA","CP")) )
                            oSubFK1:SetValue( "FK1_VLMOE2", If(SE1->E1_MOEDA == 1, nVlCpMdCp, nVlCpMd1) )
                            oSubFK1:SetValue( "FK1_MOTBX" , "CMP" )
                            oSubFK1:SetValue( "FK1_TXMOED", Iif( SE1->E1_MOEDA > 1, aCompensar[nX][CMP_TAXAD], 0 ) )
                            oSubFK1:SetValue( "FK1_ORIGEM", FunName() )
                            oSubFK1:SetValue( "FK1_SEQ"	  , cSeqBx )
                            oSubFK1:SetValue( "FK1_IDDOC" , cChaveFK7 )
                            oSubFK1:SetValue( "FK1_FILORI",	SE1->E1_FILORIG)
                            oSubFK1:SetValue( "FK1_LOTE"  ,aCompensar[nX][CMP_LOTE])
                            oSubFK1:SetValue( "FK1_DOC"   ,cPrincipal)
                            oSubFK1:SetValue( 'FK1_HISTOR', cHistMov)
                            oSubFK1:SetValue( 'FK1_IDCOMP', cChaveFK7P)     //Gravo a chave do título principal

                            If aCompensar[nX][11] != 0    // Geracao de Correcao monetaria
                                FinGerCM(2, 'R', aCompensar[nX][11], oModelBxR, cIdMov)
                            EndIf

                            If oModelBxR:VldData()
                                oModelBxR:CommitData()
                                   SE5->(dbGoto(oModelBxR:GetValue( "MASTER", "E5_RECNO" )))

                                // Integração SIGAPFS e SIGAFIN
                                If lJGrvBaixa
                                    JGrvBaixa( aCompensar[nX][CMP_RECNO],  SE5->(Recno()), nRecTitPri) // Baixa do RA | 1º paramêtro RECNO do RA - 3º RECNO tit. principal
                                EndIf

                            Else
                                lRet := .F.
                                cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                cLog += cValToChar(oModelBxR:GetErrorMessage()[6])

                                Help( ,,"M020VALID",,cLog, 1, 0 )
                            EndIf

                            oModelBxR:DeActivate()
                            oModelBxR:Destroy()
                            oModelBxR:= Nil

                            If l330Mov2
                                ExecBlock("SE5FI331",.F.,.F.)
                            EndIf

                            If lUsaFlag .AND. lLctPad // Armazena em aFlagCTB para atualizar no modulo Contabil
                                aAdd( aFlagCTB, {"FK1_LA", "S", "FK1", FK1->( Recno() ), 0, 0, 0} )
                                aAdd( aFlagCTB, {"E5_LA", "S", "SE5", SE5->( Recno() ), 0, 0, 0} )
                            EndIf

                        EndIf

                        // Encerra os titulos de abatimento caso a baixa seja total 
                        If SE1->E1_SALDO == 0 .And. aCompensar[nX][CMP_VLABAT]<>0

                            cPrefixo  := SE1->E1_PREFIXO
                            cNumero   := SE1->E1_NUM
                            cParcela  := SE1->E1_PARCELA
                            cCliente  := SE1->E1_CLIENTE
                            cLoja     := SE1->E1_LOJA

                            dbSelectArea("SE1")
                            dbSetOrder(2)
                            SE1->(dbCommit())
                            aStruSE1  := SE1->(dbStruct())
                            cAliasSE1 := "FaCmpCR"
                            lQuery    := .T.
                            cQuery := "SELECT SE1.*,SE1.R_E_C_N_O_ SE1RECNO "
                            cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
                            cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
                            cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
                            cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
                            cQuery += "SE1.E1_PARCELA='"+cParcela+"' AND "
                            cQuery += "SE1.E1_CLIENTE='"+cCliente+"' AND "
                            cQuery += "SE1.E1_LOJA='"+cLoja+"' AND "
                            cQuery += "SE1.D_E_L_E_T_=' ' "

                            cQuery := ChangeQuery(cQuery)

                            dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)

                            For nY := 1 To Len(aStruSE1)
                                If aStruSE1[nY][2]<>"C"
                                    TcSetField(cAliasSE1,aStruSE1[nY][1],aStruSE1[nY][2],aStruSE1[nY][3],aStruSE1[nY][4])
                                EndIf
                            Next nY

                            While !Eof() .And. (cAliasSE1)->E1_FILIAL == xFilial("SE1") .And.;
                                    (cAliasSE1)->E1_CLIENTE == cCliente	.And.;
                                    (cAliasSE1)->E1_LOJA == cLoja .And.;
                                    (cAliasSE1)->E1_PREFIXO == cPrefixo .And.;
                                    (cAliasSE1)->E1_NUM == cNumero .And.;
                                    (cAliasSE1)->E1_PARCELA == cParcela

                                If (cAliasSE1)->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT+"/"+MVPIABT+"/"+	MVCFABT+"/"+MVCSABT
                                    If lQuery
                                        dbSelectArea("SE1")
                                        MsGoto((cAliasSE1)->SE1RECNO)
                                    EndIf
                                    RecLock("SE1")
                                    SE1->E1_SALDO   := 0
                                    SE1->E1_BAIXA   := aCompensar[nX][CMP_DTREC]
                                    SE1->E1_LOTE    := aCompensar[nX][CMP_LOTE]
                                    SE1->E1_MOVIMEN := aCompensar[nX][CMP_DTREC]
                                    SE1->E1_STATUS  := "B"
                                    MsUnLock()
                                EndIf
                                dbSelectArea(cAliasSE1)
                                dbSkip()
                            EndDo
                            If lQuery
                                dbSelectArea(cAliasSE1)
                                dbCloseArea()
                                dbSelectArea("SE1")
                            Else
                                dbSelectArea("SE1")
                                If !Empty(cFilterSE1)
                                    If nOrdSE1 == 0 .And. !Empty(cKeySE1)
                                        cFilterSE1 += ".AND. ORDERBY("+StrTran(ClearKey(cKeySE1),"+",",")+")"
                                    EndIf
                                EndIf

                                If ( !Empty(cFilterSE1) )
                                    Set Filter to &cFilterSE1
                                EndIf
                            EndIf
                        EndIf
                    EndIf
                EndIf
            EndIf

            // Bloco de codigo para contabilizacao
            If lLctPad
                // Posiciona no titulo de adiantamento
                dbSelectArea("SE1")
                MsGoTo(aCompensar[nX][CMP_RECNO])
                Eval(bContabil)
            EndIf

            // Executa o codeblock
            Eval(bBlock,aAreaSE1[3],cPrimary)

            // Repociona o titulo principal
            RestArea(aAreaSE1)
        Next nX

        // Calcula a Comissao do titulo principal
        If SuperGetMv("MV_COMISCR") == "S" .And. SuperGetMv("MV_TPCOMIS") == "O" .And. Len(aComissao)>0
            RestArea(aAreaSE1)
            Fa440CalcB(aComissao,.F.,.F.,"FINA070")
        EndIf
    Else
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Inicia o estorno da compensacao                              ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        aTitulo    := Array(3)
        aTitulo    := Afill(aTitulo,0)
        aCompensar := Array(8)
        aCompensar := Afill(aCompensar,0)
        If RecLock("SE1")
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Restaura os titulos de abatimento caso a baixa seja total    ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            If SE1->E1_SALDO == 0
                cTitPai := PadR( SE1->(E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO + E1_CLIENTE + E1_LOJA) , TamSX3("E1_TITPAI")[1] )
                dbSelectArea("SE1")
                dbSetOrder(2)
                SE1->(dbCommit())
                aStruSE1  := SE1->(dbStruct())
                cAliasSE1 := "FaCmpCR"
                lQuery    := .T.
                cQuery := "SELECT SE1.*,SE1.R_E_C_N_O_ SE1RECNO "
                cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
                cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
                cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
                cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
                cQuery += "SE1.E1_PARCELA='"+cParcela+"' AND "
                cQuery += "SE1.E1_CLIENTE='"+cCliente+"' AND "
                cQuery += "SE1.E1_LOJA='"+cLoja+"' AND "
                cQuery += "SE1.D_E_L_E_T_=' ' "

                cQuery := ChangeQuery(cQuery)

                dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)

                For nX := 1 To Len(aStruSE1)
                    If aStruSE1[nX][2]<>"C"
                        TcSetField(cAliasSE1,aStruSE1[nX][1],aStruSE1[nX][2],aStruSE1[nX][3],aStruSE1[nX][4])
                    EndIf
                Next nX

                While !Eof() .And. (cAliasSE1)->E1_FILIAL == xFilial("SE1") .And.;
                        (cAliasSE1)->E1_CLIENTE == cCliente	.And.;
                        (cAliasSE1)->E1_LOJA == cLoja .And.;
                        (cAliasSE1)->E1_PREFIXO == cPrefixo .And.;
                        (cAliasSE1)->E1_NUM == cNumero .And.;
                        (cAliasSE1)->E1_PARCELA == cParcela

                    If (cAliasSE1)->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT+"/"+MVPIABT+"/"+	MVCFABT+"/"+MVCSABT
                        If (cAliasSE1)->E1_TITPAI == cTitPai
                            If lQuery
                                dbSelectArea("SE1")
                                MsGoto((cAliasSE1)->SE1RECNO)
                            EndIf
                            RecLock("SE1")
                            SE1->E1_SALDO   := SE1->E1_VALOR
                            SE1->E1_BAIXA   := Ctod("")
                            SE1->E1_LOTE    := ""
                            SE1->E1_MOVIMEN := Ctod("")
                            SE1->E1_STATUS  := "A"
                            MsUnLock()
                            aTitulo[CR_VLRABAT] += SE1->E1_VALOR
                        EndIf
                    EndIf
                    dbSelectArea(cAliasSE1)
                    dbSkip()
                EndDo
                If lQuery
                    dbSelectArea(cAliasSE1)
                    dbCloseArea()
                    dbSelectArea("SE1")
                    lQuery := .F.
                Else
                    dbSelectArea("SE1")
                    If !Empty(cFilterSE1)
                        If nOrdSE1 == 0 .And. !Empty(cKeySE1)
                            cFilterSE1 += ".AND. ORDERBY("+StrTran(ClearKey(cKeySE1),"+",",")+")"
                        EndIf
                    EndIf

                    If ( !Empty(cFilterSE1) )
                        Set Filter to &cFilterSE1
                    EndIf
                EndIf
            EndIf

            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Efetua o estorno de um baixa                                 ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            RestArea(aAreaSE1)

            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Atualiza o saldo do titulo com base no abatimento            ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            SE1->E1_SALDO += aTitulo[CR_VLRABAT]

            //Tratamento para não dar error.log caso alguma rotina esteja chamando a MaintBX para estorno, informando o vetor na estrutura anterior
            If ValType( aEstorno[1] ) == "A"
                If Len( aEstorno ) > 1
                    cSeqEst := aEstorno[2] //Pega a sequencia da baixa para posicionar a SE5 corretamente
                Else
                    cSeqEst := ""
                Endif
            Else
                cSeqEst := ""
            Endif

            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Pesquisa pelos registros de baixa da compensacao             ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            dbSelectArea("SE5")
            dbSetOrder(7) //E5_FILIAL+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ
            DbSeek( xFilial("SE5")+ SE1->E1_PREFIXO + SE1->E1_NUM + SE1->E1_PARCELA + SE1->E1_TIPO + SE1->E1_CLIENTE + SE1->E1_LOJA + cSeqEst )
            aAreaE5a := SE5->(GetArea())

            FK1->(DbSetOrder(1))
            // FKs- Mantida verificação pela SE5 por questão de performance
            While !Eof() .And. (cAliasSE5)->E5_FILIAL == xFilial("SE5") .And.;
            (cAliasSE5)->E5_PREFIXO == SE1->E1_PREFIXO .And.;
            (cAliasSE5)->E5_NUMERO == SE1->E1_NUM      .And.;
            (cAliasSE5)->E5_PARCELA == SE1->E1_PARCELA .And.;
            (cAliasSE5)->E5_TIPO == SE1->E1_TIPO       .And.;
            (cAliasSE5)->E5_CLIFOR == SE1->E1_CLIENTE  .And.;
            (cAliasSE5)->E5_LOJA == SE1->E1_LOJA       .And.;
            (cAliasSE5)->E5_SEQ == Iif( !Empty(cSeqEst), cSeqEst, (cAliasSE5)->E5_SEQ )
                
                FK1->(DbSeek((cAliasSE5)->E5_FILIAL + (cAliasSE5)->E5_IDORIG) )
                If  (FK1->FK1_TPDOC == "CP" .And. FK1->FK1_MOTBX == "CMP" );
                .OR. (cAliasSE5)->E5_TIPODOC == "CM"

                    //Tratamento para não dar error.log caso alguma rotina esteja chamando a MaintBX para estorno, informando o vetor na estrutura anterior
                    If ValType( aEstorno[1] ) == "A"

                        If aScan(aEstorno[1],Rtrim(FK1->FK1_DOC)) <> 0
                            aadd(aDelCmp,{FK1->FK1_DOC,If(lQuery,(cAliasSE5)->SE5RECNO,(cAliasSE5)->(RecNo())),FK1->FK1_SEQ,.T.})
                        ElseIf (cAliasSE5)->E5_TIPODOC == "CM"
                            aadd(aDelCorre,{ SE5->(Recno()) })
                        Endif

                    Else

                        If aScan(aEstorno,Rtrim(FK1->FK1_DOC)) <> 0
                            aadd(aDelCmp,{FK1->FK1_DOC,If(lQuery,(cAliasSE5)->SE5RECNO,(cAliasSE5)->(RecNo())),FK1->FK1_SEQ,.T.})
                        ElseIf (cAliasSE5)->E5_TIPODOC == "CM"
                            aadd(aDelCorre,{ SE5->(Recno()) })
                        Endif

                    EndIf

                EndIf

                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Nao deve processar sequencias que sofreram Estorno pelo sistema ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                If FK1->FK1_TPDOC == "ES" .And.;
                        FK1->FK1_MOTBX == "CMP" .And.;
                        FK1->FK1_RECPAG == "P"
                    nDelCmp := aScan( aDelCmp,{ |x| x[1] == FK1->FK1_DOC .And. x[3] == FK1->FK1_SEQ } )
                    If nDelCmp > 0
                        aDelCmp[nDelCmp][4] := .F.
                    EndIf
                EndIf
                dbSelectArea(cAliasSE5)
                dbSkip()
            EndDo

            If lQuery
                dbSelectArea(cAliasSE5)
                dbCloseArea()
                dbSelectArea("SE5")
            EndIf

            RestArea(aAreaE5a)
            If Len(aDelCmp)>0
                For nX := 1 To Len(aDelCmp)
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Processa somente se a sequencia nao foi estornada            ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    If aDelCmp[nX][4]
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Posiciona no registro de baixa do titulo compensado          ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        dbSelectArea("SE5")
                        
                        MsGoto(aDelCmp[nX][2])
                        cSeqBx := aDelCmp[nX][3]

                        FK1->(DbSetOrder(1))
                        FK1->(DbSeek(SE5->E5_FILIAL + SE5->E5_IDORIG))
                        
                        If Empty(FK1->FK1_FILORI)
                            cFilCred := FK1->FK1_FILIAL
                        Else
                            cFilCred := FwxFilial("FK1", FK1->FK1_FILORI)
                        EndIf

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Pesquisa o titulo de adiantamento                            ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        dbSelectArea("SE1")
                        dbSetOrder(1)
                        If DbSeek(XFILIAL("SE1",cFilCred) + RTrim(aDelCmp[nX][1])) .And. RecLock("SE1")
                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Restaura os titulos de abatimento caso a baixa seja total    ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            aAreaCMP := SE1->(GetArea())
                            If SE1->E1_SALDO == 0
                                cPrefixo  := SE1->E1_PREFIXO
                                cNumero   := SE1->E1_NUM
                                cParcela  := SE1->E1_PARCELA
                                cCliente  := SE1->E1_CLIENTE
                                cLoja     := SE1->E1_LOJA
                                cTitPai   := Padr( SE1->(E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO + E1_CLIENTE + E1_LOJA) , TamSX3("E1_TITPAI")[1] )

                                dbSelectArea("SE1")
                                dbSetOrder(2)
                                SE1->(dbCommit())
                                aStruSE1  := SE1->(dbStruct())
                                cAliasSE1 := "FaCmpCR"
                                lQuery    := .T.
                                cQuery := "SELECT SE1.*,SE1.R_E_C_N_O_ SE1RECNO "
                                cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
                                cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
                                cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
                                cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
                                cQuery += "SE1.E1_PARCELA='"+cParcela+"' AND "
                                cQuery += "SE1.E1_CLIENTE='"+cCliente+"' AND "
                                cQuery += "SE1.E1_LOJA='"+cLoja+"' AND "
                                cQuery += "SE1.D_E_L_E_T_=' ' "

                                cQuery := ChangeQuery(cQuery)

                                dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)

                                For nY := 1 To Len(aStruSE1)
                                    If aStruSE1[nY][2]<>"C"
                                        TcSetField(cAliasSE1,aStruSE1[nY][1],aStruSE1[nY][2],aStruSE1[nY][3],aStruSE1[nY][4])
                                    EndIf
                                Next nY

                                While !Eof() .And. (cAliasSE1)->E1_FILIAL == xFilial("SE1") .And.;
                                        (cAliasSE1)->E1_CLIENTE == cCliente	.And.;
                                        (cAliasSE1)->E1_LOJA == cLoja .And.;
                                        (cAliasSE1)->E1_PREFIXO == cPrefixo .And.;
                                        (cAliasSE1)->E1_NUM == cNumero .And.;
                                        (cAliasSE1)->E1_PARCELA == cParcela

                                    If (cAliasSE1)->E1_TIPO $ MVABATIM+"/"+MVIRABT+"/"+MVINABT+"/"+MVPIABT+"/"+	MVCFABT+"/"+MVCSABT
                                        If (cAliasSE1)->E1_TITPAI == cTitPai
                                            If lQuery
                                                dbSelectArea("SE1")
                                                MsGoto((cAliasSE1)->SE1RECNO)
                                            EndIf
                                            RecLock("SE1")
                                            SE1->E1_SALDO   := SE1->E1_VALOR
                                            SE1->E1_BAIXA   := Ctod("")
                                            SE1->E1_LOTE    := ""
                                            SE1->E1_MOVIMEN := CtoD("")
                                            SE1->E1_STATUS  := "A"
                                            MsUnLock()
                                            aCompensar[CMP_VLABAT] += SE1->E1_VALOR
                                        EndIf
                                    EndIf
                                    dbSelectArea(cAliasSE1)
                                    dbSkip()
                                EndDo
                                If lQuery
                                    dbSelectArea(cAliasSE1)
                                    dbCloseArea()
                                    dbSelectArea("SE1")
                                Else
                                    dbSelectArea("SE1")
                                    If !Empty(cFilterSE1)
                                        If nOrdSE1 == 0 .And. !Empty(cKeySE1)
                                            cFilterSE1 += ".AND. ORDERBY("+StrTran(ClearKey(cKeySE1),"+",",")+")"
                                        EndIf
                                    EndIf

                                    If ( !Empty(cFilterSE1) )
                                        Set Filter to &cFilterSE1
                                    EndIf
                                EndIf
                            EndIf
                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Reposiciona nos titulos de adiantamento                      ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            RestArea(aAreaCMP)
                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Atualiza o saldo do titulo com base no abatimento            ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            SE1->E1_SALDO += aCompensar[CMP_VLABAT]
                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Localiza o registro de baixa do adiantamento                 ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            dbSelectArea("SE5")
                            dbSetOrder(7)
                            If DbSeek(xFilial("SE5")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_CLIENTE+SE1->E1_LOJA+cSeqBx)
                                nRegSE5	:= SE5->(Recno())
                                // FKs - Mantida verificação pela SE5 por questão de performance
                                While ( !Eof() .And. SE5->E5_FILIAL == xFilial("SE5") .And.;
                                        SE5->E5_PREFIXO == SE1->E1_PREFIXO .And.;
                                        SE5->E5_NUMERO == SE1->E1_NUM .And.;
                                        SE5->E5_PARCELA == SE1->E1_PARCELA .And.;
                                        SE5->E5_TIPO == SE1->E1_TIPO .And.;
                                        SE5->E5_CLIFOR == SE1->E1_CLIENTE .And.;
                                        SE5->E5_LOJA == SE1->E1_LOJA .And.;
                                        SE5->E5_SEQ == cSeqBx )

                                    If TemBxCanc(   SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ) , .T.)
                                        SE5->( dbskip())
                                        Loop
                                    EndIf

                                    If SE5->E5_TIPODOC <> "CM"
                                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                                        //³ Atualiza o saldo do titulo com base no SE5                   ³
                                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                        SE1->E1_SALDO += SE5->E5_VALOR
                                    Endif
                                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                                    //³ Bloco de codigo para contabilizacao                          ³
                                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

                                       If lMaIntDel .and. ExecBlock("MaIntDel",.F.,.F.)

                                        //Posiciona a FK5 para mandar a operação de alteração com base no registro posicionado da SE5
                                        If AllTrim( SE5->E5_TABORI ) == "FK1"
                                            aAreaAnt := GetArea()
                                            dbSelectArea( "FK1" )
                                            FK5->( DbSetOrder( 1 ) )
                                            If MsSeek( xFilial("FK1") + SE5->E5_IDORIG )
                                                oModelBxR := FWLoadModel("FINM010") //Recarrega o Model de movimentos para pegar o campo do relacionamento (SE5->E5_IDORIG)
                                                oModelBxR:SetOperation( MODEL_OPERATION_UPDATE ) //Alteração
                                                oModelBxR:Activate()
                                                oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Habilita gravação SE5
                                                oModelBxR:SetValue( "MASTER", "HISTMOV", STR0031 ) //"Estorno de compensação"
                                                //E5_OPERACAO 1 = Altera E5_SITUACA da SE5 para 'C' e gera estorno na FK5
                                                //E5_OPERACAO 2 = Grava E5 com E5_TIPODOC = 'ES' e gera estorno na FK5
                                                //E5_OPERACAO 3 = Deleta da SE5 e gera estorno na FK5
                                                oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 2 ) //E5_OPERACAO 2

                                                cCamposE5 := "{"
                                                cCamposE5 += "{'E5_HISTOR' ,'Cancel. de Compensacao'}"
                                                cCamposE5 += "}"
                                                oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5

                                                If oModelBxR:VldData()
                                                       oModelBxR:CommitData()
                                                Else
                                                    lRet := .F.
                                                    cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                                    cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                                    cLog += cValToChar(oModelBxR:GetErrorMessage()[6])
                                                       Help( ,,"M030VALID",,cLog, 1, 0 )
                                                Endif

                                                oModelBxR:DeActivate()
                                                oModelBxR:Destroy()
                                                oModelBxR:= Nil

                                            EndIf

                                            RestArea(aAreaAnt)
                                        Endif

                                       Else

                                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                                        //³ Deleta o registro de baixa                                   ³
                                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                        If AllTrim( SE5->E5_TABORI ) == "FK1"
                                            aAreaAnt := GetArea()
                                            dbSelectArea( "FK1" )
                                            FK5->( DbSetOrder( 1 ) )
                                            If MsSeek( xFilial("FK1") + SE5->E5_IDORIG )
                                                oModelBxR := FWLoadModel("FINM010") //Recarrega o Model de movimentos para pegar o campo do relacionamento (SE5->E5_IDORIG)
                                                oModelBxR:SetOperation( MODEL_OPERATION_UPDATE ) //Alteração
                                                oModelBxR:Activate()
                                                oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Habilita gravação SE5
                                                oModelBxR:SetValue( "MASTER", "HISTMOV", STR0032 ) //"Cancelamento de compensação"
                                                //E5_OPERACAO 1 = Altera E5_SITUACA da SE5 para 'C' e gera estorno na FK5
                                                //E5_OPERACAO 2 = Grava E5 com E5_TIPODOC = 'ES' e gera estorno na FK5
                                                //E5_OPERACAO 3 = Deleta da SE5 e gera estorno na FK5
                                                oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 3 ) //E5_OPERACAO 3

                                                If oModelBxR:VldData()
                                                       oModelBxR:CommitData()
                                                Else
                                                    lRet := .F.
                                                    cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                                    cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                                    cLog += cValToChar(oModelBxR:GetErrorMessage()[6])
                                                       Help( ,,"M030VALID",,cLog, 1, 0 )
                                                Endif

                                                oModelBxR:DeActivate()
                                                oModelBxR:Destroy()
                                                oModelBxR:= Nil

                                            Endif
                                            RestArea(aAreaAnt)
                                        Endif

                                    Endif

                                    dbSelectArea("SE5")
                                    dbSkip()
                                EndDo
                                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                                //³ Encerra a atualizacao do adiantamento                        ³
                                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                SE1->E1_VALLIQ := 0
                                SE1->E1_STATUS := IIf(SE1->E1_SALDO>0.01,"A","B")
                                SE1->E1_BAIXA  := IIf(SE1->E1_SALDO==SE1->E1_VALOR,Ctod(""),SE1->E1_BAIXA)
                            EndIf
                        EndIf
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Bloco de codigo para contabilizacao                          ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lLctPad
                            SE5->(MsGoTo(nRegSE5))
                            Eval(bContabil)
                        EndIf
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Retira a trava do registro de adiantamento                   ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        SE1->( MsUnLock() )
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Reposiciona o titulo principal                               ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        RestArea(aAreaSE1)
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Reposiciona no registro de baixa do titulo compensado        ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        dbSelectArea("SE5")
                        MsGoto(aDelCmp[nX][2])
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Deleta o registro de baixa                                   ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lMaIntDel .and. ExecBlock("MaIntDel",.F.,.F.)
                            If AllTrim( SE5->E5_TABORI ) == "FK1"
                                aAreaAnt := GetArea()
                                dbSelectArea( "FK1" )
                                FK5->( DbSetOrder( 1 ) )
                                If MsSeek( xFilial("FK1") + SE5->E5_IDORIG )
                                    oModelBxR := FWLoadModel("FINM010") //Recarrega o Model de movimentos para pegar o campo do relacionamento (SE5->E5_IDORIG)
                                    oModelBxR:SetOperation( MODEL_OPERATION_UPDATE ) //Alteração
                                    oModelBxR:Activate()
                                    oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Habilita gravação SE5
                                    //E5_OPERACAO 1 = Altera E5_SITUACA da SE5 para 'C' e gera estorno na FK5
                                    //E5_OPERACAO 2 = Grava E5 com E5_TIPODOC = 'ES' e gera estorno na FK5
                                    //E5_OPERACAO 3 = Deleta da SE5 e gera estorno na FK5
                                    oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 2 ) //E5_OPERACAO 3

                                    cCamposE5 := "{"
                                    cCamposE5 += "{'E5_HISTOR' ,'Cancel. de Compensacao'}"
                                    cCamposE5 += "}"
                                    oModelBxR:SetValue( "MASTER", "E5_CAMPOS", cCamposE5 ) //Informa os campos da SE5 que serão gravados indepentes de FK5

                                    If oModelBxR:VldData()
                                           oModelBxR:CommitData()
                                    Else
                                        lRet := .F.
                                        cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[6])
                                           Help( ,,"M030VALID",,cLog, 1, 0 )
                                    Endif

                                    oModelBxR:DeActivate()
                                    oModelBxR:Destroy()
                                    oModelBxR:= Nil

                                Endif
                                RestArea(aAreaAnt)
                            EndIf
                          Else
                            If AllTrim( SE5->E5_TABORI ) == "FK1"
                                aAreaAnt := GetArea()
                                dbSelectArea( "FK1" )
                                FK5->( DbSetOrder( 1 ) )
                                If MsSeek( xFilial("FK1") + SE5->E5_IDORIG )
                                    oModelBxR := FWLoadModel("FINM010") //Recarrega o Model de movimentos para pegar o campo do relacionamento (SE5->E5_IDORIG)
                                    oModelBxR:SetOperation( MODEL_OPERATION_UPDATE ) //Alteração
                                    oModelBxR:Activate()
                                    oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Habilita gravação SE5
                                    oModelBxR:SetValue( "MASTER", "HISTMOV", STR0032 ) //"Cancelamento de compensação"
                                    //E5_OPERACAO 1 = Altera E5_SITUACA da SE5 para 'C' e gera estorno na FK5
                                    //E5_OPERACAO 2 = Grava E5 com E5_TIPODOC = 'ES' e gera estorno na FK5
                                    //E5_OPERACAO 3 = Deleta da SE5 e gera estorno na FK5
                                    oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 3 ) //E5_OPERACAO 3

                                    If oModelBxR:VldData()
                                           oModelBxR:CommitData()
                                    Else
                                        lRet := .F.
                                        cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                        cLog += cValToChar(oModelBxR:GetErrorMessage()[6])
                                           Help( ,,"M030VALID",,cLog, 1, 0 )
                                    Endif

                                    oModelBxR:DeActivate()
                                    oModelBxR:Destroy()
                                    oModelBxR:= Nil

                                Endif
                                RestArea(aAreaAnt)
                            EndIf
                        EndIf

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Guarda a chave primary da baixa para busca futura            ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        cPrimary := FK1->FK1_DOC

                        // FKs - Trecho só poderá ser reescrito após a Fa440CalcB convertida para FKs
                        aadd(aComissao,{SE5->E5_MOTBX,SE5->E5_SEQ,SE5->(RecNo())})

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Encerra a atualizacao do adiantamento                        ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If SE5->E5_TIPODOC <> "CM"
                            SE1->E1_SALDO  += SE5->E5_VALOR + SE1->E1_DECRESC
                            SE1->E1_SDDECRE := SE1->E1_DECRESC
                            SE1->E1_SDACRES := SE1->E1_ACRESC
                        EndIf

                        //VERIFICAR SE HOUVE BAIXA POR DECRESCIMO/ACRESCIMO E DESCONSIDERA PARA
                        //RECOMPOR O SALDO E DEPOIS O CANCELAMENTO DA BAIXA IRA RECOMPOR O SALDO COM DECRESCIMO
                        aAreaSE5 := SE5->(GetArea())
                        dbSelectArea("SE5")
                        dbSetOrder(7)
                        If DbSeek(xFilial("SE5")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_CLIENTE+SE1->E1_LOJA)
                            // FKs - Mantida verificação pela SE5 por conta de performance
                            While ( !Eof() .And. SE5->E5_FILIAL == xFilial("SE5") .And.;
                                    SE5->E5_PREFIXO == SE1->E1_PREFIXO .And.;
                                    SE5->E5_NUMERO == SE1->E1_NUM .And.;
                                    SE5->E5_PARCELA == SE1->E1_PARCELA .And.;
                                    SE5->E5_TIPO == SE1->E1_TIPO .And.;
                                    SE5->E5_CLIFOR == SE1->E1_CLIENTE .And.;
                                    SE5->E5_LOJA == SE1->E1_LOJA  )

                                // Nao pode pegar titulo ja cancelado na baixa
                                // Procurar registro da baixa DC para nao refazer o saldo de forma errada pois
                                // o decrescimo sera considerado no cancelamento da baixa
                                // Este caso so se aplica quando ha baixa de titulo com decrescimo
                                If SE5->E5_TIPODOC $ "DC" .AND. EMPTY(SE5->E5_SITUACA)
                                    SE1->E1_SALDO  -= SE1->E1_DECRESC
                                   SE1->E1_SDDECRE := 0
                                EndIF
                                dbSkip()
                            EndDo
                        EndIf

                        RestArea(aAreaSE5)
                        SE1->E1_VALLIQ := 0
                        SE1->E1_STATUS := IIf(SE1->E1_SALDO > 0.01,"A","B")
                        SE1->E1_BAIXA  := IIf(SE1->E1_SALDO==SE1->E1_VALOR,Ctod(""),SE1->E1_BAIXA)

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Executa o codeblock                                          ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        Eval(bBlock,aAreaSE1[3],cPrimary)
                    EndIf
                Next nX
                For nY := 1 to Len( aDelCorre )
                    dbGoTo(aDelCorre[nY][1])
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Bloco de codigo para contabilizacao                          ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    If lLctPad
                        Eval(bContabil)
                    EndIf
                    If AllTrim( SE5->E5_TABORI ) == "FK1"
                        aAreaAnt := GetArea()
                        dbSelectArea( "FK1" )
                        FK5->( DbSetOrder( 1 ) )
                        If MsSeek( xFilial("FK1") + SE5->E5_IDORIG )
                            oModelBxR := FWLoadModel("FINM010") //Recarrega o Model de movimentos para pegar o campo do relacionamento (SE5->E5_IDORIG)
                            oModelBxR:SetOperation( MODEL_OPERATION_UPDATE ) //Alteração
                            oModelBxR:Activate()
                            oModelBxR:SetValue( "MASTER", "E5_GRV", .T. ) //Habilita gravação SE5
                            oModelBxR:SetValue( "MASTER", "HISTMOV", STR0032 ) //"Cancelamento de compensação"
                            //E5_OPERACAO 1 = Altera E5_SITUACA da SE5 para 'C' e gera estorno na FK5
                            //E5_OPERACAO 2 = Grava E5 com E5_TIPODOC = 'ES' e gera estorno na FK5
                            //E5_OPERACAO 3 = Deleta da SE5 e gera estorno na FK5
                            oModelBxR:SetValue( "MASTER", "E5_OPERACAO", 3 ) //E5_OPERACAO 3

                            If oModelBxR:VldData()
                                   oModelBxR:CommitData()
                            Else
                                lRet := .F.
                                cLog := cValToChar(oModelBxR:GetErrorMessage()[4]) + ' - '
                                cLog += cValToChar(oModelBxR:GetErrorMessage()[5]) + ' - '
                                cLog += cValToChar(oModelBxR:GetErrorMessage()[6])
                                   Help( ,,"M030VALID",,cLog, 1, 0 )
                            Endif

                            oModelBxR:DeActivate()
                            oModelBxR:Destroy()
                            oModelBxR:= Nil

                        Endif
                        RestArea(aAreaAnt)
                    Endif

                Next nY
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Calcula a Comissao do titulo principal                       ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                If SuperGetMv("MV_COMISCR") == "S"
                    RestArea(aAreaSE1)
                    Fa440DeleB(aComissao,.F.,.F.,"FINA330")
                EndIf
            EndIf
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Retira a trava do registro principal                         ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            SE1->(MsUnLock())
        EndIf
    EndIf
EndIf
RestArea(aArea)
Return(.T.)

//---------------------------------------------------------------------------------------
/*/{Protheus.doc} FaNxtSeqBx
Esta rotina tem como objetivo calcular a próxima sequência de baixas válida
dos titulos a receber/pagar. O SE1/SE2 deve estar locado para
evitar-se qualquer problema de integridade.

@param cAlias, char, Indica se é título a receber ("SE1") ou pagar ("SE2")
@param lFKs, logical, Indica se usará as FKs (FK1/FK2) para definir a próxima sequência de baixa
@return cSeqBx, Próxima sequência de baixa válida

@author Eduardo Riera
@since 02/09/2001
@version 2.0
/*/
//---------------------------------------------------------------------------------------
Function FaNxtSeqBx(cAlias, lFKs)

Local aArea      := GetArea()
Local aAreaSE5   := {}
Local aTipoDoc   := {"CP","BA","VL","V2","LJ","TR","CH"}
Local nX         := 0
Local nTamSeq	 := TamSX3("FK2_SEQ")[1]
Local cSeqBx   	 := Replicate("0", nTamSeq)
Local cSeqFK5    := Replicate("0", nTamSeq)
Local cQuery     := ""
Local cAliasQry  := GetNextAlias()
Local cFilTit	 := ""
Local cPrefTit	 := ""
Local cNumTit	 := ""
Local cParcTit	 := ""
Local cTipoTit	 := ""
Local cCliFor	 := ""
Local cLjCliFor	 := ""
Local cChaveTit  := ""
Local cChvTitFK7 := ""
Local cQryTipoIN := ""
Local lSE5Direto := FwIsInCallStack('AtuaTroco') .or. FwIsInCallStack('LjInMovNCC') //Funções que chamam a FaNxtSeqBx() mas gravam SE5 via RecLock()
Local cFilOrig   := ""

Default cAlias 	 := "SE1"
Default lFKs 	 := .F.

If !lFks .and. !lSE5Direto
    lFKs := .T.
Endif

If __lPENxtSeq
    Execblock("FANXTSEQ",.F.,.F.,{'1'}) // Antes da busca do SEQ
EndIf

If cAlias == "SE1"
    cFilTit  := SE1->E1_FILIAL
    cPrefTit := SE1->E1_PREFIXO
    cNumTit  := SE1->E1_NUM
    cParcTit := SE1->E1_PARCELA
    cTipoTit := SE1->E1_TIPO
    cCliFor  := SE1->E1_CLIENTE
    cLjCliFor := SE1->E1_LOJA
    cFilOrig  := SE1->E1_FILORIG
Else
    cFilTit  := SE2->E2_FILIAL
    cPrefTit := SE2->E2_PREFIXO
    cNumTit  := SE2->E2_NUM
    cParcTit := SE2->E2_PARCELA
    cTipoTit := SE2->E2_TIPO
    cCliFor  := SE2->E2_FORNECE
    cLjCliFor := SE2->E2_LOJA
    cFilOrig  := SE2->E2_FILORIG
EndIf

If lFKs 
    //Verifica a ultima sequencia de baixa pela FK1/FK2/FK5
    cChaveTit := cFilTit + "|" + cPrefTit + "|" + cNumTit + "|" + cParcTit + "|" + cTipoTit + "|" + cCliFor + "|" + cLjCliFor
    cChvTitFK7 := FINGRVFK7(cAlias, cChaveTit)
    
    //Encontro a maior sequencia de baixa  para o título em questão
    If cAlias == "SE1"
        cQuery := "SELECT ISNULL( MAX(FK1_SEQ), '" + cSeqBx + "' ) MAXSEQ "
        cQuery += "FROM " + RetSqlName("FK1") + " FK1 "
        cQuery += "WHERE FK1_IDDOC = '" + cChvTitFK7 + "' "
        cQuery += "AND FK1.D_E_L_E_T_ = ' ' "
    Else
        cQuery := "SELECT ISNULL( MAX(FK2_SEQ), '" + cSeqBx + "' ) MAXSEQ "
        cQuery += "FROM " + RetSqlName("FK2") + " FK2 "
        cQuery += "WHERE FK2_IDDOC = '" + cChvTitFK7 + "' "
        cQuery += "AND FK2.D_E_L_E_T_ = ' ' "
    EndIf
    
    cQuery := ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry,.T.,.T.)

    cSeqBx := (cAliasQry)->MAXSEQ

    //Encontro a maior sequencia de movimento bancário para o título em questão
    (cAliasQry)->( dbCloseArea() )

    cQuery := "SELECT ISNULL( MAX(FK5_SEQ), '" + cSeqBx + "' ) MAXSEQ "
    cQuery += "FROM " + RetSqlName("FK5") + " FK5 "
    cQuery += "WHERE FK5_IDDOC = '" + cChvTitFK7 + "' "
    cQuery += "AND FK5.D_E_L_E_T_ = ' ' "

    cQuery := ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry,.T.,.T.)

    cSeqFK5 := (cAliasQry)->MAXSEQ

    (cAliasQry)->(DbCloseArea())

    cSeqbX := IF(cSeqbX > cSeqFK5, cSeqBx, cSeqFK5)

Else //Verifica a ultima sequencia de baixa pela SE5

	For nX := 1 To Len(aTipoDoc)
	    cQryTipoIN += "'" + aTipoDoc[nX] + "'"
	    cQryTipoIN += Iif( nX == Len(aTipoDoc), "", "," )
	Next nX

    aAreaSE5 := SE5->( GetArea() )
    SE5->( dbCommit() )
    
    cQuery := "SELECT MAX(R_E_C_N_O_) MAXREC "
    cQuery += "FROM " + RetSqlName("SE5") + " SE5 "
    cQuery += "WHERE SE5.E5_FILIAL='" + FWxFilial("SE5",cFilOrig) + "' AND "
    cQuery += "SE5.E5_PREFIXO='" + cPrefTit + "' AND "
    cQuery += "SE5.E5_NUMERO='" + cNumTit + "' AND "
    cQuery += "SE5.E5_PARCELA='" + cParcTit + "' AND "
    cQuery += "SE5.E5_TIPO='" + cTipoTit + "' AND "
    cQuery += "SE5.E5_CLIFOR='" + cCliFor + "' AND "
    cQuery += "SE5.E5_LOJA='" + cLjCliFor + "' AND "
    cQuery += "SE5.E5_TIPODOC IN( " + cQryTipoIN + " ) AND "
    cQuery += "SE5.D_E_L_E_T_= ' ' "

    cQuery := ChangeQuery(cQuery)
    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry,.T.,.T.)

    SE5->( dbGoTo( (cAliasQry)->MAXREC ) )
    cSeqBx := SE5->E5_SEQ

    (cAliasQry)->( dbCloseArea() )

    RestArea(aAreaSE5)
    FwFreeArray(aAreaSE5)
EndIf

If Type("lVldSEQ") != "U"
    If Valtype(lVldSEQ) = "L"
        If cSeqBx = Replicate("Z",nTamSeq)
            lVldSEQ := .T.
        Else
            lVldSEQ := .F.
        Endif
    Endif
Endif

//Mantém a sequência completamente preenchida
If Len( AllTrim(cSeqBx) ) <= nTamSeq
    cSeqBx := PadL( AllTrim(cSeqBx), nTamSeq, "0" )
Endif
cSeqBx := Soma1(cSeqBx, nTamSeq)

If __lPENxtSeq
    Execblock("FANXTSEQ",.F.,.F.,{'2'}) // Após a busca do SEQ
EndIf

RestArea(aArea)
FwFreeArray(aArea)
FwFreeArray(aTipoDoc)
Return(cSeqBx)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaNxtParCr³ Autor ³ Eduardo Riera         ³ Data ³23.09.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de calculo da ultima parcela do titulo a receber      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Contas a Receber                        (OPC)³±±
±±³          ³ExpC2: Prefixo                                          (OPC)³±±
±±³          ³ExpC3: Numero do titulo                                 (OPC)³±±
±±³          ³ExpC4: Parcela do Titulo                                (OPC)³±±
±±³          ³ExpC5: Tipo do titulo                                   (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpC1: Proxima parcela do titulo a receber                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo calcular a ultima parcela de um³±±
±±³          ³titulo a receber. O cadastro de clientes deve estar travado  ³±±
±±³          ³para a execucao desta rotina de forma que dois usuarios nao  ³±±
±±³          ³obtenham a mesma parcela. Os parametros seram opcionais se o ³±±
±±³          ³titulo estiver posicionado.                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FaNxtParCr( cAliasSE1, cPrefixo, cNumero, cParcela, cTipo )
Local aArea			:= GetArea()
Local aAreaSE1		:= SE1->(GetArea())
Local lQuery		:= .F.
Local lTipo			:= .F.
Local cCursor		:= "SE1"
Local cUltParc		:= Repl("Z",Len((cAliasSE1)->E1_PARCELA))
Local cAntParc		:= cParcela
Local cQuery		:= ""

Default cAliasSE1	:= "SE1"
Default cPrefixo	:= (cAliasSE1)->E1_PREFIXO
Default cNumero		:= (cAliasSE1)->E1_NUM
Default cParcela	:= Repl("0",Len((cAliasSE1)->E1_PARCELA))
Default cTipo		:= (cAliasSE1)->E1_TIPO

dbSelectArea("SE1")
dbSetOrder(1)

SE1->(dbCommit())
lQuery := .T.
cCursor := "FaNxtParCr"
cQuery := "SELECT E1_FILIAL,E1_PREFIXO,E1_NUM,E1_PARCELA,E1_TIPO,E1_CLIENTE,E1_LOJA "
cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
cQuery += "SE1.E1_PARCELA>='"+cParcela+"' AND "
cQuery += "SE1.E1_TIPO='"+cTipo+"' AND "
cQuery += "SE1.D_E_L_E_T_= ' ' "
cQuery += "ORDER BY "+SqlOrder(SE1->(IndexKey()))

cQuery := ChangeQuery(cQuery)

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor,.T.,.T.)

dbSelectArea(cCursor)
While ( !Eof() .And. (cCursor)->E1_FILIAL == xFilial("SE1") .And.;
        (cCursor)->E1_PREFIXO == cPrefixo .And.;
        (cCursor)->E1_NUM == cNumero )
    If (cCursor)->E1_TIPO==cTipo
        lTipo := .T.
        cAntParc := cParcela
        cParcela := (cCursor)->E1_PARCELA
    EndIf
    dbSelectArea(cCursor)
    dbSkip()
    If !((cCursor)->E1_FILIAL == xFilial("SE1") .And.;
            (cCursor)->E1_PREFIXO == cPrefixo .And.;
            (cCursor)->E1_NUM == cNumero .And.;
            (cCursor)->E1_TIPO == cTipo) .And.;
            lTipo
        If cParcela == cUltParc
            cParcela := Soma1(cAntParc)
        Else
            cParcela := Soma1(cParcela)
        EndIf
        Exit
    EndIf
EndDo
If lQuery
    dbSelectArea(cCursor)
    dbCloseArea()
    dbSelectArea("SE1")
EndIf
RestArea(aAreaSE1)
RestArea(aArea)
Return(cParcela)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaAbatCP  ³ Autor ³ Eduardo Riera         ³ Data ³05.10.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Calculo do abatimento do contas a pagar                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Prefixo                                               ³±±
±±³          ³ExpC2: Numero                                                ³±±
±±³          ³ExpC3: Parcela                                               ³±±
±±³          ³ExpC4: Fornecedor                                            ³±±
±±³          ³ExpC5: Loja                                                  ³±±
±±³          ³ExpN6: Moeda                                            (OPC)³±±
±±³          ³ExpC7: Tipo de retorno                                  (OPC)³±±
±±³          ³       [V] Valor do Titulo                          (DEFAULT)³±±
±±³          ³       [S] Saldo do Titulo                                   ³±±
±±³          ³ExpD8: Data para conversao da Moeda                     (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1: Valor do Abatimento                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo calcular o valor dos abatimen- ³±±
±±³          ³tos que o titulo sofreu, conforme os parametros solicitados. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaAbatCP( cPrefixo, cNumero, cParcela, cFornece, cLoja, nMoeda, cCpo, dData )
Local aArea     := GetArea()
Local aAreaSE2  := SE2->(GetArea())
Local nTotAbat  := 0
Local cCampo    := ""
Local cAliasSE2 := "SE2"
Local lQuery    := .F.
Local nX        := 0
Local cQry      := ""
Local aStruSE2  := {}

DEFAULT dData  := dDataBase
DEFAULT nMoeda := 1
DEFAULT cCpo   := "V"

cCampo := IIf( cCpo == "V", "E2_VALOR" , "E2_SALDO" )

dbSelectArea("SE2")
dbSetOrder( 1 )

SE2->(dbCommit())
cAliasSE2 := "FaAbatCr"
aStruSE2 := SE2->(dbStruct())
lQuery := .T.
cQry := "SELECT E2_FILIAL,E2_PREFIXO,E2_NUM,E2_PARCELA,E2_TIPO,E2_FORNECE,E2_LOJA,E2_MOEDA,E2_VALOR,E2_SALDO,E2_ORIGEM"
cQry += " FROM "+RetSqlName("SE2")+" SE2 "
cQry += "WHERE SE2.E2_FILIAL = '"+xFilial("SE2")+"' "
cQry += "AND SE2.E2_PREFIXO = '"+cPrefixo+"' "
cQry += "AND SE2.E2_NUM = '"+cNumero+"' "
cQry += "AND SE2.E2_PARCELA = '"+cParcela+"' "
cQry += "AND SE2.E2_FORNECE = '"+cFornece+"' "
cQry += "AND SE2.E2_LOJA = '"+cLoja+"' "
cQry += "AND SE2.D_E_L_E_T_=' ' "
cQry += "ORDER BY "+SqlOrder(SE2->(IndexKey()))

cQry := ChangeQuery(cQry)

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQry),cAliasSE2,.F.,.T.)

For nX := 1 To Len(aStruSE2)
    If aStruSE2[nX][2]<>"C"
        If !Empty( ( cAliasSE2 )->( FieldPos( aStruSE2[nX][1] ) ) )
            TcSetField(cAliasSE2,aStruSE2[nX][1],aStruSE2[nX][2],aStruSE2[nX][3],aStruSE2[nX][4])
        EndIf
    EndIf
Next nX

While !Eof() .And. (cAliasSE2)->E2_FILIAL == xFilial("SE2") .And.;
        (cAliasSE2)->E2_PREFIXO == cPrefixo .And.;
        (cAliasSE2)->E2_NUM == cNumero .And.;
        (cAliasSE2)->E2_PARCELA == cParcela

    If (cAliasSE2)->E2_TIPO $ MVABATIM .And.;
            (cAliasSE2)->E2_FORNECE == cFornece .And. (cAliasSE2)->E2_LOJA == cLoja .And.;
            !( FwIsInCallStack("LocxDelNF") .And. (cAliasSE2)->E2_ORIGEM == "MATA101N")
        nTotAbat += xMoeda((cAliasSE2)->(FieldGet(FieldPos(cCampo))),(cAliasSE2)->E2_MOEDA,nMoeda,dData)
    EndIf
    dbSelectArea(cAliasSE2)
    dbSkip()
EndDo
If lQuery
    dbSelectArea(cAliasSE2)
    dbCloseArea()
    dbSelectArea("SE2")
EndIf
RestArea(aAreaSE2)
RestArea(aArea)
Return (nTotAbat)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³MaIntBxCR ³ Autor ³ Eduardo Riera         ³ Data ³31.08.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de integracao com as baixas do financeiro             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Codigo da operacao a ser efetuada                     ³±±
±±³          ³       [1] Baixa simples do financeiro                       ³±±
±±³          ³       [2] Liquidacao de titulos                             ³±±
±±³          ³       [3] Compensacao de titulos de mesma carteira (RA/NCC) ³±±
±±³          ³ExpA2: Array com os recnos dos titulos a serem baixados      ³±±
±±³          ³ExpA3: Array com os dados da baixa simples do financeiro     ³±±
±±³          ³       [1] Motivo da Baixa                                   ³±±
±±³          ³       [2] Valor Recebido                                    ³±±
±±³          ³       [3] Banco                                             ³±±
±±³          ³       [4] Agencia                                           ³±±
±±³          ³       [5] Conta                                             ³±±
±±³          ³       [6] Data de Credito                                   ³±±
±±³          ³       [7] Data da Baixa                                     ³±±
±±³          ³ExpA4: Array com os recnos dos titulos a serem compensados   ³±±
±±³          ³ExpA5: Array com os dados da liquidacao do financeiro        ³±±
±±³          ³     {}[1] Prefixo                                           ³±±
±±³          ³       [2] Banco                                             ³±±
±±³          ³       [3] Agencia                                           ³±±
±±³          ³       [4] Conta                                             ³±±
±±³          ³       [5] Numero do Cheque                                  ³±±
±±³          ³       [6] Data Boa                                          ³±±
±±³          ³       [7] Valor                                             ³±±
±±³          ³       [8] Tipo                                              ³±±
±±³          ³       [9] Natureza                                          ³±±
±±³          ³       [A] Moeda                                             ³±±
±±³          ³ExpA6: Array com os parametros da rotina                     ³±±
±±³          ³       [1] Contabiliza On-Line                               ³±±
±±³          ³       [2] Aglutina Lancamentos Contabeis                    ³±±
±±³          ³       [3] Digita lancamentos contabeis                      ³±±
±±³          ³       [4] Juros para Comissao                               ³±±
±±³          ³       [5] Desconto para Comissao                            ³±±
±±³          ³       [6] Calcula Comiss s/NCC                              ³±±
±±³          ³ExpB7: Bloco de codigo a ser executado apos o processamento  ³±±
±±³          ³       da rotina, abaixo os parametro passados               ³±±
±±³          ³       [1] Recno do titulo baixado                           ³±±
±±³          ³       [2] Codigo a ser informado para cancelamento futuro.  ³±±
±±³          ³ExpA8: Utilizado quando deve-se estornar uma das baixas efe- ³±±
±±³          ³       tuadas. Para tanto, deve-se informar o codigo informa-³±±
±±³          ³       do no codeBlock anterior.                             ³±±
±±³          ³ExpA13:Array com os valores parciais dos titulos a serem     ³±±
±±³          ³       compensados - na ausencia deste parametro sera criado ³±±
±±³          ³       um Array contendo o mesmo tamanho do Array definido   ³±±
±±³          ³       no 4o. parametro e preenchidos com zeros (0).         ³±±
±±³          ³       aNCC_RA    ( 4o. parametro)                           ³±±
±±³          ³       aNCC_RAvlr (13o. parametro)                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpC1: Primary Key do documento gerado.                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a integracao com as bai³±±
±±³          ³xas do modulo financeiro e os titulos gerados pelo modulo de ³±±
±±³          ³faturamento                                                  ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
#DEFINE CR_MOTBX   1
#DEFINE CR_VLRREC  2
#DEFINE CR_BANCO   3
#DEFINE CR_AGENCIA 4
#DEFINE CR_CONTA   5
#DEFINE CR_DTBAIXA 6
#DEFINE CR_DTCRED  7

#DEFINE LQ_PREFIXO   1
#DEFINE LQ_BANCO     2
#DEFINE LQ_AGENCIA   3
#DEFINE LQ_CONTA     4
#DEFINE LQ_NROCHQ    5
#DEFINE LQ_DATABOA   6
#DEFINE LQ_VALOR     7
#DEFINE LQ_TIPO      8
#DEFINE LQ_NATUREZA  9
#DEFINE LQ_MOEDA    10
#DEFINE LQ_DATALIQ  11
#DEFINE LQ_CLIENTE  12
#DEFINE LQ_LOJA	     13
#DEFINE LQ_NUMLIQ   14

Function MaIntBxCR( nCaso, aSE1, aBaixa, aNCC_RA, aLiquidacao, aParam, bBlock, aEstorno, aSE1Dados, aNewSE1, nSaldoComp, aCpoUser,;
                    aNCC_RAvlr, nSomaCheq, nTaxaCM, aTxMoeda, lConsdAbat, lRetLoja, cProcComp )
Local aArea			:= GetArea()
Local aAreaSEF		:= SEF->(GetArea())
Local aAreaSE1		:= {}
Local aTitulo		:= {0,0,0}
Local aRecebido		:= {}
Local aValores		:= {}
Local aComplem		:= {}
Local bContabil		:= {|| .T.}
Local dInicio		:= dDataBase
Local nX			:= 0
Local nY			:= 0
Local nVlrCR		:= 0
Local nVlrACmp		:= 0
Local nVlrComp		:= 0
Local nVlrALiqCR	:= 0
Local nVlrLiqCR		:= 0
Local nVlrLiq		:= 0
Local nMoeda		:= 0
Local nHdlPrv		:= 0
Local nHdl460		:= 0
Local nTotalCtb		:= 0
Local lContabil		:= .F.
Local lAgluCtb		:= .F.
Local lDigita		:= .F.
Local lDesconto		:= .F.
Local lJuros		:= .F.
Local lComisNCC		:= .T.
Local lHeadProva	:= .F.
Local lEstorno		:= !Empty(aEstorno)
Local lContinua		:= .T.
Local lRetorno		:= .T.
Local cLoteCtb		:= ""
Local cArqCtb		:= ""
Local cPadrao		:= ""
Local cRetorno		:= ""
Local cNumLiq		:= ""
Local cParcela		:= "0"
Local cCliente		:= ""
Local cLoja			:= ""
Local cHistor		:= ""
Local cAliasSE1		:= ""
Local cQuery		:= ""
Local lContSaldo	:= ValType( nSaldoComp ) == "N"
Local lFrtBxNCC		:= FwIsInCallStack("FRTBXNCC") .Or. FwIsInCallStack("LJGRVREC") // Retorna se a funcao foi chamada a partir da FRTBXNCC ou pela rotina de recebimento de titulo do LOJA
Local nMultaTit		:= 0							// Aramazena valor da Multa digitado na escolha do Titulo
Local nJurosTit		:= 0							// Aramazena valor do Juros digitado na escolha do Titulo
Local nDescoTit		:= 0							// Aramazena valor do Desconto digitado na escolha do Titulo
Local nVlrMoeTit	:= 0
Local nMoedaAdd		:= 0
Local nMoedaBco		:= 0
Local nPerc			:= 0
Local cChaveTit		:= ""
Local cChaveFK7		:= ""
Local lExistFJU		:= FJU->(ColumnPos("FJU_RECPAI")) >0 .and. FindFunction("FinGrvEx")
Local lF460SE1	    := ExistBlock("F460SE1")
Local lF460VAL  	:= ExistBlock("F460VAL")
Local c1DupNat 		:= SuperGetMv("MV_1DUPNAT",,"")
Local c1DupMcr 		:= ""
Local nTxMoedNf     := 0
Local nTaxaRA       := 0
Local nTxConNf      := 0
Local cCaDvTecF     := "" // Carteira de devolução TECHFIN.

//Rastreamento
Local aRastroOri	:= {}
Local aRastroDes	:= {}
Local lCmTxCon   	:= If(cPaisLoc == "BRA", SuperGetMv("MV_CMTXCON", .F., .F.), .F.)
Local nValRec	  	:= 0
Local nCasDec    	:= (MsDecimais(1) + 1)
Local aAreaAdt		:= {}
Local nVlRealCmp    := 0

Default lRetLoja    := .F. //Utilizada para retorno da rotina quando utilizada no modulo de Varejo/Loja
Default cProcComp   := ""
Default nSaldoComp	:= 0

Private STRLCTPAD	:= ""
Private VALOR		:= 0
Private RegValor	:= 0
Private aFlagCTB	:= {}
Private lUsaFlag	:= SuperGetMV( "MV_CTBFLAG" , .T. /*lHelp*/, .F. /*cPadrao*/)

Private VALORMF		:= 0	 	//Utilizada para Contabilizacao - Valor na moeda do título
Private VALOR7 		:= 0 		//Utilizada para Contabilizacao
Private VALOR8 		:= 0 		//Utilizada para Contabilizacao

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica os parametros da rotina                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty(aParam)
    lContabil  := aParam[01]
    lAgluCtb   := aParam[02]
    lDigita    := aParam[03]
    lDesconto  := aParam[04]
    lJuros     := aParam[05]
    lComisNCC  := aParam[06]
EndIf

Default bBlock     := {|| .T.}
Default aSE1Dados  := {}
Default aCpoUser   := {}
Default nSomaCheq  := 0 //-- Total dos Cheques informados na baixa
Default lConsdAbat := .F.

//Lê a origem do movimento de baixa/adiantamento
If __lVldFKB
    If ChkFile("FKB")
        FINGrvFKB()
    EndIf
    __lVldFKB := .F.
Endif

// exclusivo para uso de NCC_RA para compensacao de valores parciais
// valores igual ou inferior ao valor do saldo disponivel
If ValTYPE( aNCC_RA ) == "A"
    If ValTYPE( aNCC_RAvlr ) == "A"
        // condicao necessaria
        // - vetor aNCC_RAvlr com  "VALORES PARCIAIS" de baixa nos Títulos RA utiliza a mesma referencia (indice) do vetor aNCC_RA
        // - Foi criado um desvio
        If Len(aNCC_RA) <> Len(aNCC_RAvlr)
            Return(lRetorno)
        EndIf
    Else
        aNCC_RAvlr := Array( Len(aNCC_RA) )
        Afill(aNCC_RAvlr, 0)
    EndIf
EndIf

aNewSE1 := {} // array com os recno novos da tabela se1
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ HeadProva                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lContabil
    dbSelectArea("SX5")
    dbSetOrder(1)
    If DbSeek(xFilial()+"09FIN")
        cLoteCtb := X5Descri()
    Else
        DbSeek(xFilial()+"09")
        cLoteCtb := X5Descri()
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Inicializa Lancamento Contabil                                   ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    //nHdlPrv := HeadProva(cLoteCtb,"FINA070",Substr(cUsuario,7,6),@cArqCtb)
    nHdlPrv := HeadProva(   cLoteCtb,;
                            "FINA070",;
                            Substr( cUsuario, 7, 6 ),;
                            @cArqCtb )

    lHeadProva := .T.
Else
    lContabil := .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Efetua a integracao com o financeiro                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Do Case
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Baixa simples do Financeiro                                  ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nCaso == 1
    Begin Transaction
        For nX := 1 To Len(aSE1)
            If lContSaldo
                If	Empty( nSaldoComp )
                    Exit
                EndIf
            EndIf

            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Posiciona registros                                          ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            dbSelectArea("SE1")
            dbSetOrder(1)
            SE1->( MsGoto(aSE1[nX]) )

            dbSelectArea("SA1")
            dbSetOrder(1)
            DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA)

            If RecLock("SE1") .And. RecLock("SA1")

                If !lEstorno
                    If SE1->E1_SALDO > 0
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Montagem dos valores para baixa                              ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If Len(aSE1Dados) >= nX .And. aSE1[nX] == aSE1Dados[nX][1]
                            cHistor := aSE1Dados[nX][2]
                            aValores := aClone( aSE1Dados[nX][3] )
                            DEFAULT cHistor := "Prestacao de Contas"
                        Else
                            aValores  := FaVlAtuCr("SE1",aBaixa[CR_DTBAIXA])
                            cHistor := "Prestacao de Contas"
                        EndIf
                        aTitulo   := { 	aValores[02],; //Abatimentos
                                        aValores[04],; //Descrescimo
                                        aValores[05]}  //Acrescimo

                        aRecebido := { 	aBaixa[CR_MOTBX],;
                                        aBaixa[CR_BANCO],;
                                        aBaixa[CR_AGENCIA],;
                                        aBaixa[CR_CONTA],;
                                        aBaixa[CR_DTBAIXA],;
                                        aBaixa[CR_DTCRED],;
                                        cHistor,;
                                        aValores[09],; //Desconto
                                        0,; //Multa
                                        aValores[08],; //Juros
                                        aValores[10],; //Correcao monetaria
                                        Min(aBaixa[CR_VLRREC],aValores[12])}

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Verifica o Codigo do lancamento padrao                       ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lContabil
                            cPadrao   := Fa070Pad()
                            lContabil := VerPadrao(cPadrao)
                        EndIf
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Efetua a baixa simples dos titulos                           ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        cRetorno := FaBaixaCR(aTitulo,aRecebido,lDesconto,lJuros,lContabil,,,nSomaCheq)
                        aBaixa[CR_VLRREC] -= aValores[11]
                        /* 	Atualiza o status do titulo no SERASA */
                        If cPaisLoc == "BRA"
                            SE1->( MsGoto(aSE1[nX]) )
                            If SE1->E1_SALDO <= 0
                                cChaveTit := xFilial("SE1") + "|" +;
                                            SE1->E1_PREFIXO + "|" +;
                                            SE1->E1_NUM		+ "|" +;
                                            SE1->E1_PARCELA + "|" +;
                                            SE1->E1_TIPO	+ "|" +;
                                            SE1->E1_CLIENTE + "|" +;
                                            SE1->E1_LOJA
                                cChaveFK7 := FINGRVFK7("SE1",cChaveTit)
                                F770BxRen("1",TrazCodMot(aBaixa[CR_MOTBX]),cChaveFK7)
                            Endif
                            If !Empty(cRetorno)
                                If __lPIXCanc
                                    If !PIXCancel(xFilial("SE1", SE1->E1_FILORIG), cChaveFK7)
                                        DisarmTransaction()
                                        Exit
                                    EndIf
                                EndIf
                            EndIf
                        Endif

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ DetProva                                                     ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lHeadProva .And. lContabil
                            nTotalCtb += DetProva( 	nHdlPrv,;
                                                    cPadrao,;
                                                    "FINA070",;
                                                    cLoteCtb,;
                                                    /*nLinha*/,;
                                                    /*lExecuta*/,;
                                                    /*cCriterio*/,;
                                                    /*lRateio*/,;
                                                    /*cChaveBusca*/,;
                                                    /*aCT5*/,;
                                                    /*lPosiciona*/,;
                                                    @aFlagCTB,;
                                                    /*aTabRecOri*/,;
                                                    /*aDadosProva*/ )
                        EndIf

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Executa o bloco de codigo passado                            ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        Eval(bBlock,aSE1[nX],cRetorno)
                    Endif
                Else
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Verifica o Codigo do lancamento padrao                       ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    If lContabil
                        cPadrao   := "527"
                        lContabil := VerPadrao(cPadrao)
                    EndIf
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Efetua o cancelamento da baixa simples do financeiro         ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    FaBaixaCR(aTitulo,aRecebido,lDesconto,lJuros,lContabil,aEstorno[nX])
                    cRetorno := aEstorno[nX]
                    /*	Atualiza o status do titulo no SERASA */
                    If cPaisLoc == "BRA"
                        SE1->( MsGoto(aSE1[nX]) )
                        cChaveTit := xFilial("SE1") + "|" +;
                                    SE1->E1_PREFIXO + "|" +;
                                    SE1->E1_NUM		+ "|" +;
                                    SE1->E1_PARCELA + "|" +;
                                    SE1->E1_TIPO	+ "|" +;
                                    SE1->E1_CLIENTE + "|" +;
                                    SE1->E1_LOJA
                        cChaveFK7 := FINGRVFK7("SE1",cChaveTit)
                        F770BxRen("3","",cChaveFK7)
                    Endif

                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ DetProva                                                     ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    If lHeadProva .And. lContabil
                        //nTotalCtb += DetProva(nHdlPrv,cPadrao,"FINA070",cLoteCtb)
                        nTotalCtb += DetProva( nHdlPrv,;
                                            cPadrao,;
                                            "FINA070",;
                                            cLoteCtb,;
                                            /*nLinha*/,;
                                            /*lExecuta*/,;
                                            /*cCriterio*/,;
                                            /*lRateio*/,;
                                            /*cChaveBusca*/,;
                                            /*aCT5*/,;
                                            /*lPosiciona*/,;
                                            @aFlagCTB,;
                                            /*aTabRecOri*/,;
                                            /*aDadosProva*/ )
                    EndIf
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Executa o bloco de codigo passado                            ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    Eval(bBlock,aSE1[nX],cRetorno)
                EndIf
            Endif
        Next nX
    End Transaction
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Liquidacao do Financeiro                                     ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nCaso == 2
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Efetua o Lock de gravacao da Rotina - Monousuario            ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    For nX := 1 To 10
        nHdl460 := MsFCreate("FINA460.L"+cEmpAnt)
        If nHdl460 > 0
            Exit
        Else
            If !KillApp()
                Sleep(1000*nX)
            EndIf
        EndIf
    Next nX
    If nHdl460 > 0
        Begin Transaction
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Calcula o valor a liquidar                                   ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            For nX := 1 To Len(aLiquidacao)
                nVlrALiqCR += aLiquidacao[nX][LQ_VALOR]
            Next nX
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Calcula o numero da proxima liquidacao                       ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            cNumLiq := Soma1(GetMv("MV_NUMLIQ"))
            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Efetua a baixa dos titulos a liquidar                        ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

            For nX := 1 To Len(aSE1)
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Posiciona registros                                          ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                dbSelectArea("SE1")
                dbSetOrder(1)
                SE1->( MsGoto(aSE1[nX]) )

                dbSelectArea("SA1")
                dbSetOrder(1)
                DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA)

                c1DupMcr := ""
                c1DupMcr := &c1DupNat
                If RecLock("SE1") .And. RecLock("SA1")

                    If !lEstorno

                        If Len(aLiquidacao[1]) > 10
                            dInicio := aLiquidacao[1][LQ_DATALIQ]
                        Endif

                        //Rastreamento - Geradores
                        If __lRastro .And. SE1->E1_SALDO == 0
                            aadd(aRastroOri,{ SE1->E1_FILIAL, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA,;
                                               SE1->E1_TIPO, SE1->E1_CLIENTE, SE1->E1_LOJA, SE1->E1_SALDO } )
                        EndIf

                        If SE1->E1_SALDO > 0

                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Montagem dos valores para baixa                              ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            If Len(aSE1Dados) >= nX .and. aSE1[nX] == aSE1Dados[nX][1]
                                cHistor := aSE1Dados[nX][2]
                                aValores := aClone( aSE1Dados[nX][3] )
                            Else
                                cHistor := "Prestacao de Contas"
                                aValores  := FaVlAtuCr("SE1",dInicio)
                            EndIf

                            aTitulo   := { aValores[02],; //Abatimentos
                                              aValores[04],; //Descrescimo
                                           aValores[05]}  //Acrescimo

                            nVlrLiq := xMoeda(nVlrALiqCR-nVlrLiqCR,aLiquidacao[1][LQ_MOEDA],1)

                            aRecebido := { 	"LIQ",;
                                            "",;									//Banco
                                            "",;									//Agencia
                                            "",;									//Conta
                                            dDataBase,;								//Data Credito
                                            dDataBase,;								//Data Baixa
                                            cHistor,;								//Historico
                                            aValores[09],;							//Desconto
                                            aValores[13],;							//Multa
                                            aValores[08],;							//Juros
                                            aValores[10],;							//Correcao monetaria
                                            Min(nVlrLiq,aValores[12]),;				//Valor Recebido
                                            "",;									//Nosso Numero
                                            "",;									//Nome do Arquivo CNAB
                                            "",;									//Ocorrencia CNAB
                                            "",;									//Numero do Lote
                                            0,;										//Outros Valores
                                            0,;										//Diferenca de Cambio
                                            0,;										//Taxa da Moeda
                                            cNumLiq,;								//Numero da Liquidacao
                                            aLiquidacao[1][LQ_TIPO]}				//Tipo do titulo de liquidacao

                            nVlrLiqCR += xMoeda(Min(nVlrLiq,aValores[12]),1,aLiquidacao[1][LQ_MOEDA])
                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Verifica o Codigo do lancamento padrao                       ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            If lContabil
                                cPadrao   := Fa070Pad()
                                lContabil := VerPadrao(cPadrao)
                            EndIf
                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Efetua a baixa simples dos titulos                           ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            cRetorno := FaBaixaCR(aTitulo,aRecebido,lDesconto,lJuros,lContabil)

                            //Rastreamento - Geradores
                            If __lRastro
                                aadd(aRastroOri,{ SE1->E1_FILIAL, SE1->E1_PREFIXO, SE1->E1_NUM, SE1->E1_PARCELA,;
                                                   SE1->E1_TIPO, SE1->E1_CLIENTE, SE1->E1_LOJA, SE1->E1_VALLIQ } )
                            EndIf

                            /*
                            Atualiza o status do titulo no SERASA */
                            If cPaisLoc == "BRA"
                                SE1->( MsGoto(aSE1[nX]) )
                                If SE1->E1_SALDO <= 0
                                    cChaveTit := xFilial("SE1") + "|" +;
                                                SE1->E1_PREFIXO + "|" +;
                                                SE1->E1_NUM		+ "|" +;
                                                SE1->E1_PARCELA + "|" +;
                                                SE1->E1_TIPO	+ "|" +;
                                                SE1->E1_CLIENTE + "|" +;
                                                SE1->E1_LOJA
                                    cChaveFK7 := FINGRVFK7("SE1",cChaveTit)
                                    F770BxRen("2","LIQ",cChaveFK7)
                                Endif
                                If !Empty(cRetorno) 
                                    If __lPIXCanc
                                        If !PIXCancel(xFilial("SE1", SE1->E1_FILORIG), cChaveFK7)
                                            DisarmTransaction()
                                            Exit
                                        EndIf
                                    EndIf
                                EndIf
                            Endif

                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ DetProva                                                     ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            If lHeadProva .And. lContabil
                                //nTotalCtb += DetProva(nHdlPrv,cPadrao,"FINA460",cLoteCtb)
                                nTotalCtb += DetProva( 	nHdlPrv,;
                                                        cPadrao,;
                                                        "FINA460",;
                                                        cLoteCtb,;
                                                        /*nLinha*/,;
                                                        /*lExecuta*/,;
                                                        /*cCriterio*/,;
                                                        /*lRateio*/,;
                                                        /*cChaveBusca*/,;
                                                        /*aCT5*/,;
                                                        /*lPosiciona*/,;
                                                        @aFlagCTB,;
                                                        /*aTabRecOri*/,;
                                                        /*aDadosProva*/ )
                            EndIf
                            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                            //³ Executa o bloco de codigo passado                            ³
                            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                            Eval(bBlock,aSE1[nX],cRetorno,cNumLiq)
                            If lF460SE1
                                aComplem := ExecBlock("F460SE1",.F.,.F.)
                            EndIf
                        Endif
                    Else
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Verifica o Codigo do lancamento padrao                       ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lContabil
                            cPadrao   := "527"
                            lContabil := VerPadrao(cPadrao)
                        EndIf
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Efetua o cancelamento da baixa simples do financeiro         ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        FaBaixaCR(aTitulo,aRecebido,lDesconto,lJuros,lContabil,aEstorno[nX])
                        cRetorno := aEstorno[nX]
                        /*
                        Atualiza o status do titulo no SERASA */
                        If cPaisLoc == "BRA"
                            SE1->( MsGoto(aSE1[nX]) )
                            cChaveTit := xFilial("SE1") + "|" +;
                                        SE1->E1_PREFIXO + "|" +;
                                        SE1->E1_NUM		+ "|" +;
                                        SE1->E1_PARCELA + "|" +;
                                        SE1->E1_TIPO	+ "|" +;
                                        SE1->E1_CLIENTE + "|" +;
                                        SE1->E1_LOJA
                            cChaveFK7 := FINGRVFK7("SE1",cChaveTit)
                            F770BxRen("3","",cChaveFK7)
                        Endif
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ DetProva                                                     ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lHeadProva .And. lContabil
                            //nTotalCtb += DetProva(nHdlPrv,cPadrao,"FINA070",cLoteCtb)
                            nTotalCtb += DetProva( 	nHdlPrv,;
                                                    cPadrao,;
                                                    "FINA070",;
                                                    cLoteCtb,;
                                                    /*nLinha*/,;
                                                    /*lExecuta*/,;
                                                    /*cCriterio*/,;
                                                    /*lRateio*/,;
                                                    /*cChaveBusca*/,;
                                                    /*aCT5*/,;
                                                    /*lPosiciona*/,;
                                                    @aFlagCTB,;
                                                    /*aTabRecOri*/,;
                                                    /*aDadosProva*/ )

                        EndIf

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Estorna os titulos da liquidacao                             ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        aAreaSE1 := SE1->(GetArea())
                        dbSelectArea("SE1")
                        dbSetOrder(15)

                        cAliasSE1 := GetNextAlias()
                        cQuery := "SELECT E1_FILIAL, E1_NUMLIQ, E1_TIPO, R_E_C_N_O_ SE1RECNO"
                        cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
                        cQuery += "WHERE E1_FILIAL='"+xFilial("SE1")+"' AND "
                        cQuery += "E1_NUMLIQ='"+aLiquidacao[1][LQ_NUMLIQ]+"' AND "
                        cQuery += "E1_TIPO='"+aLiquidacao[1][LQ_TIPO]+"' AND "
                        cQuery += "SE1.D_E_L_E_T_ = ' '"

                        cQuery := ChangeQuery(cQuery)
                        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSE1,.T.,.T.)

                        dbSelectArea(cAliasSE1)
                        While !Eof() .And. (cAliasSE1)->E1_FILIAL == xFilial("SE1") .And.;
                            (cAliasSE1)->E1_NUMLIQ == aLiquidacao[1][LQ_NUMLIQ]
                            If (cAliasSE1)->E1_TIPO == aLiquidacao[1][LQ_TIPO]
                                dbSelectArea("SE1")
                                dbGoTo((cAliasSE1)->SE1RECNO)
                                //-- Verifica se existe um cheque gerado para este TITULO
                                //-- pois se tiver, dever  ser cancelado.
                                dbSelectArea("SEF")
                                SEF->(dbSetOrder(3))//EF_FILIAL+EF_PREFIXO+EF_TITULO+EF_PARCELA+EF_TIPO+EF_NUM+EF_SEQUENC
                                If SEF->(dbSeek(xFilial("SEF")+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)))
                                    While !Eof().And.SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)==;
                                        EF_PREFIXO+EF_TITULO+EF_PARCELA+EF_TIPO.AND.EF_FILIAL==xFilial("SEF")
                                        If (SEF->EF_FORNECE == SE1->E1_CLIENTE .Or.;
                                            SEF->EF_CLIENTE == SE1->E1_CLIENTE) .And. AllTrim(SEF->EF_ORIGEM) == "OMSA341"
                                            Reclock("SEF")
                                            SEF->(dbDelete())
                                            MsUnlock()
                                        Endif
                                        SEF->(dbSkip())
                                    Enddo
                                EndIf
                                //--
                                If lExistFJU
                                    FinGrvEx("R")
                                Endif
                                dbSelectArea("SE1")
                                RecLock("SE1",.F.)
                                DbDelete()
                                MsUnlock()
                            EndIf
                            dbSelectArea(cAliasSE1)
                            dbSkip()
                        EndDo

                        dbSelectArea(cAliasSE1)
                        dbCloseArea()
                        dbSelectArea("SE1")

                        RestArea(aAreaSEF)
                        RestArea(aAreaSE1)

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Executa o bloco de codigo passado                            ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        Eval(bBlock,aSE1[nX],cRetorno,cNumLiq)
                    EndIf
                Else
                    lContinua := .F.
                EndIf

            Next nX
            If lContinua
                If !lEstorno
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Verifica o Codigo do lancamento padrao                       ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    If lContabil
                        cPadrao   := "500"
                        lContabil := VerPadrao(cPadrao)
                    EndIf
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Cria os titulos da liquidacao                                ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    cParcela := Repl("0",Len(SE1->E1_PARCELA))
                    For nX := 1 To Len(aLiquidacao)

                        If Len(aLiquidacao[nX]) == 13
                            If !Empty(aLiquidacao[nX][LQ_CLIENTE]) .And.!Empty(aLiquidacao[nX][LQ_LOJA])
                                cCliente := aLiquidacao[nX][LQ_CLIENTE]
                                cLoja    := aLiquidacao[nX][LQ_LOJA]
                            Else
                                cCliente := SA1->A1_COD
                                cLoja    := SA1->A1_LOJA
                            Endif
                        Else
                            cCliente := SA1->A1_COD
                            cLoja    := SA1->A1_LOJA
                        Endif

                        dbSelectArea("SA1")
                        dbSetOrder(1)
                        DbSeek(xFilial("SA1")+cCliente+cLoja)

                        c1DupMcr := ""
                        c1DupMcr := &c1DupNat
                        cParcela := FaNxtParCr("SE1",aLiquidacao[nX][LQ_PREFIXO],;
                                               aLiquidacao[nX][LQ_NROCHQ],;
                                                cParcela,;
                                               aLiquidacao[nX][LQ_TIPO])

                        If nModulo == 39  //E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO
                            cParcela := OMSParcChq(aLiquidacao[nX,LQ_PREFIXO],aLiquidacao[nX,LQ_NROCHQ],cParcela,aLiquidacao[nX][LQ_TIPO])
                        EndIf

                        //
                        // Template GEM - Gestao de Empreendimentos Imobiliarios
                        // Gera o proxim no. de Parcela, conforme o prefixo,no. do titulo, cliente e loja
                        If ExistTemplate("GEMNxtParc") .And. HasTemplate("LOT")
                              cParcela := ExecTemplate("GEMNxtParc",.F.,.F.,{ "SE1",aLiquidacao[nX][LQ_PREFIXO],;
                                               aLiquidacao[nX][LQ_NROCHQ], cParcela, aLiquidacao[nX][LQ_TIPO]} )
                            // variavel private aPontoEntra declarado no fonte gema102.prw funcao GEMA102
                            aAdd(aPontoEntra,{xFilial("SE1"),aLiquidacao[nX][LQ_PREFIXO],aLiquidacao[nX][LQ_NROCHQ],cParcela,aLiquidacao[nX][LQ_TIPO]})
                        EndIf

                        RecLock("SE1",.T.)
                        SE1->E1_FILIAL	:= xFilial("SE1")
                        SE1->E1_PREFIXO	:= aLiquidacao[nX][LQ_PREFIXO]
                        SE1->E1_NUMLIQ	:= cNumLiq
                        SE1->E1_NUM		:= aLiquidacao[nX][LQ_NROCHQ]
                        SE1->E1_PARCELA	:= cParcela
                        SE1->E1_TIPO	:= aLiquidacao[nX][LQ_TIPO]
                        SE1->E1_CLIENTE	:= SA1->A1_COD
                        SE1->E1_LOJA	:= SA1->A1_LOJA
                        SE1->E1_NOMCLI	:= If(Empty(SA1->A1_NREDUZ),SA1->A1_NOME,SA1->A1_NREDUZ)
                        SE1->E1_EMISSAO	:= dDataBase
                        SE1->E1_EMIS1	:= dDataBase
                        SE1->E1_VENCTO	:= aLiquidacao[nX][LQ_DATABOA]
                        SE1->E1_VENCREA	:= DataValida(SE1->E1_VENCTO,.T.)
                        SE1->E1_VENCORI	:= SE1->E1_VENCTO
                        SE1->E1_VALOR	:= aLiquidacao[nX][LQ_VALOR]
                        SE1->E1_SALDO	:= SE1->E1_VALOR
                        SE1->E1_MOEDA	:= aLiquidacao[nX][LQ_MOEDA]
                        SE1->E1_VLCRUZ 	:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,1,dDataBase)
                        SE1->E1_NATUREZ	:= Iif(Empty(aLiquidacao[nX][LQ_NATUREZA]),c1DupMcr,aLiquidacao[nX][LQ_NATUREZA])
                        SE1->E1_SITUACA	:= "0"
                        SE1->E1_BCOCHQ	:= aLiquidacao[nX][LQ_BANCO]
                        SE1->E1_AGECHQ	:= aLiquidacao[nX][LQ_AGENCIA]
                        SE1->E1_CTACHQ	:= aLiquidacao[nX][LQ_CONTA]
                        SE1->E1_ORIGEM	:= "FINA460"
                        SE1->E1_FLUXO	:= "S"
                        SE1->E1_STATUS	:= "A"
                        If Len(aCpoUser) > 0
                            For nY := 1 To Len(aCpoUser[nX])
                                SE1->&(aCpoUser[nX,nY,1]) := aCpoUser[nX,nY,2]
                            Next nY
                        EndIf
                        If lF460VAL
                            VALOR := nX
                            ExecBlock("F460VAL",.F.,.F.,aComplem)
                        EndIf
                        SE1->(FkCommit(.T.))

                        //Rastreamento - Gerados
                        If __lRastro
                            aadd(aRastroDes,{ xFilial("SE1"), aLiquidacao[nX][LQ_PREFIXO], aLiquidacao[nX][LQ_NROCHQ], cParcela,;
                                              aLiquidacao[nX][LQ_TIPO], SA1->A1_COD, SA1->A1_LOJA, aLiquidacao[nX][LQ_VALOR] } )
                        EndIf

                        If lUsaFlag .AND. lContabil // Armazena em aFlagCTB para atualizar no modulo Contabil
                            aAdd( aFlagCTB, {"E1_LA", "S", "SE1", SE1->( Recno() ), 0, 0, 0} )
                        Endif

                        aAdd( aNewSE1 ,SE1->(Recno()) )

                        A040DupRec("FINA460")
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ DetProva                                                     ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lHeadProva .And. lContabil
                            //nTotalCtb += DetProva(nHdlPrv,cPadrao,"FINA460",cLoteCtb)
                            nTotalCtb += DetProva( 	nHdlPrv,;
                                                    cPadrao,;
                                                    "FINA460",;
                                                    cLoteCtb,;
                                                    /*nLinha*/,;
                                                    /*lExecuta*/,;
                                                    /*cCriterio*/,;
                                                    /*lRateio*/,;
                                                    /*cChaveBusca*/,;
                                                    /*aCT5*/,;
                                                    /*lPosiciona*/,;
                                                    @aFlagCTB,;
                                                    /*aTabRecOri*/,;
                                                    /*aDadosProva*/ )


                        EndIf
                    Next nX
                Else
                EndIf

                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Nota de Credito para os valores residuais                    ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                If !lEstorno
                    If nVlrLiqCR <> nVlrALiqCR
                        cParcela := Repl("0",Len(SE1->E1_PARCELA))
                        cParcela := FaNxtParCr("SE1","LIQ",;
                            cNumLiq,;
                            cParcela,;
                            SubStr(MV_CRNEG,1,Len(SE1->E1_TIPO)))
                        RecLock("SE1",.T.)
                        SE1->E1_FILIAL	:= xFilial("SE1")
                        SE1->E1_PREFIXO	:= "LIQ"
                        SE1->E1_NUM		:= cNumLiq
                        SE1->E1_PARCELA	:= cParcela
                        SE1->E1_TIPO	:= MV_CRNEG
                        SE1->E1_NATUREZ := Iif(Empty(aLiquidacao[1][LQ_NATUREZA]),c1DupMcr,aLiquidacao[1][LQ_NATUREZA])
                        SE1->E1_EMISSAO	:= dDataBase
                        SE1->E1_EMIS1   := SE1->E1_EMISSAO
                        SE1->E1_VENCTO	:= dDataBase
                        SE1->E1_VENCREA	:= DataValida(SE1->E1_VENCTO)
                        SE1->E1_VENCORI := 	SE1->E1_VENCTO
                        SE1->E1_SALDO	:= nVlrALiqCR-nVlrLiqCR
                        SE1->E1_VALOR	:= SE1->E1_SALDO
                        SE1->E1_VLCRUZ	:= xMoeda(SE1->E1_VALOR,aLiquidacao[1][LQ_MOEDA],1)
                        SE1->E1_MOEDA	:= aLiquidacao[1][LQ_MOEDA]
                        SE1->E1_CLIENTE	:= SA1->A1_COD
                        SE1->E1_LOJA	:= SA1->A1_LOJA
                        SE1->E1_NOMCLI	:= If(Empty(SA1->A1_NREDUZ),SA1->A1_NOME,SA1->A1_NREDUZ)
                        SE1->E1_NUMLIQ	:= cNumLiq
                        SE1->E1_STATUS	:= "A"
                        SE1->E1_SITUACA := "0"
                        SE1->E1_ORIGEM  := "FINA460"
                        SE1->E1_FILORIG := cFilAnt
                        SA1->(AtuSalDup("-",SE1->E1_VALOR,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO))
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ DetProva                                                     ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lHeadProva .And. lContabil
                            //nTotalCtb += DetProva(nHdlPrv,cPadrao,"FINA460",cLoteCtb)
                            nTotalCtb += DetProva( nHdlPrv,;
                                                    cPadrao,;
                                                    "FINA460",;
                                                    cLoteCtb,;
                                                    /*nLinha*/,;
                                                    /*lExecuta*/,;
                                                    /*cCriterio*/,;
                                                    /*lRateio*/,;
                                                    /*cChaveBusca*/,;
                                                    /*aCT5*/,;
                                                    /*lPosiciona*/,;
                                                    @aFlagCTB,;
                                                    /*aTabRecOri*/,;
                                                    /*aDadosProva*/ )

                        EndIf
                        If ExistBlock("F460NCC")
                            ExecBlock("F460NCC",.F.,.F.)
                        EndIf
                    EndIf
                Else
                EndIf
                //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                //³ Atualiza o numero da liquidacao                              ³
                //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                PutMv("MV_NUMLIQ",cNumLiq)
            EndIf
        End Transaction
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Cancela o Lock de gravacao da rotina                         ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        FClose(nHdl460)
        FErase("FINA460.L"+cEmpAnt)

        //Gravacao do rastreamento
        If __lRastro
            FINRSTGRV(2, "SE1", aRastroOri, aRastroDes, __nValProc)
        EndIf
    Else
        lRetorno := .F.
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Compensacao do Financeiro                                    ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nCaso == 3
    cCaDvTecF := PadR(SuperGetMv("MV_DEVTECF",.F.,""),TamSX3("E1_SITUACA")[1]) 
    Begin Transaction
        For nX := 1 To Len(aSE1)
            If lContSaldo
                If	Empty( nSaldoComp )
                    Exit
                EndIf
            EndIf

            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³ Posiciona registros                                          ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
            dbSelectArea("SE1")
            dbSetOrder(1)
            SE1->( MsGoto(aSE1[nX]) )
            dbSelectArea("SA1")
            dbSetOrder(1)
            DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA)

            If RecLock("SE1")
                If !lEstorno
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Montagem dos valores para baixa                              ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    //Montagem dos valores para baixa
                    If lCmTxCon .And. Len(aNCC_RA) > 0
                        aAreaAdt := GetArea()
                        SE1->(DbGoto(aNCC_RA[Len(aNCC_RA)]))

                        If SE1->E1_MOEDA > 1
                             nVlRealCmp := nSaldoComp

                            If SE1->E1_TXMOEDA > 0
                                nVlRealCmp := Round(NoRound(xMoeda(nSaldoComp, 1, SE1->E1_MOEDA, SE1->E1_EMISSAO, nCasDec, 1, IIF(nTaxaCM > 0, nTaxaCM, SE1->E1_TXMOEDA)),3), 2)
                            EndIf

                            nValRec := Round(NoRound(xMoeda(nVlRealCmp, SE1->E1_MOEDA, 1, SE1->E1_EMISSAO, nCasDec, nTaxaCM),3), 2)
                        EndIf
                        RestArea(aAreaAdt)
                    EndIf

                    aValores  := FaVlAtuCr("SE1",dDataBase,Nil,If(Upper(AllTrim(FunName()))$"OMSA320|OMSA341|MATA103",.T.,Nil),,,nTaxaCM,aTxMoeda,lConsdAbat,nValRec,nVlRealCmp)
                    aTitulo   := {	aValores[02],; //Abatimentos
                                    aValores[04],; //Descrescimo
                                    aValores[05],; //Acrescimo
                                    aValores[10]}  //Correção Monetária
                    aRecebido := {}
                    nVlrComp  := 0
                    nVlrCR    := aValores[12]
                    nVlrMoeTit:= aValores[11]
                    nMoeda    := SE1->E1_MOEDA
                    nMultaTit := SE1->E1_MULTA
                    nJurosTit := SE1->E1_JUROS
                    nDescoTit := SE1->E1_DESCONT
                    nTxConNf  := SE1->E1_TXMOEDA

                    If nJurosTit > 0
                        __nJurCmpLj	:= nJurosTit
                    EndIf
                    If nDescoTit > 0
                         __nDesCmpLj	:= nDescoTit
                    EndIf
                    If nMultaTit > 0
                         __nMulCmpLj	:= nMultaTit
                    EndIf

                    // Se for chamado a partir da funcao FrtBxNCC o array e reordenado
                    If lFrtBxNCC .OR. nModulo == 12
                        aNCC_RA  := aSort(aNCC_RA)
                    Endif

                    For nY := 1 To Len(aNCC_RA)
                        If aNCC_RA[nY] <> 0
                            dbSelectArea("SE1")
                            dbSetOrder(1)
                            MsGoto(aNCC_RA[nY])
                            nMoedaBco := FinBcoRA("SE1")[2]
                            nMoedaAdd := SE1->E1_MOEDA

                            If nY > 1 .and. SE1->E1_TXMOEDA > 0
                                nVlRealCmp := Round(NoRound(xMoeda(nSaldoComp, 1, SE1->E1_MOEDA, SE1->E1_EMISSAO, nCasDec, 1, IIF(nTaxaCM > 0, nTaxaCM, SE1->E1_TXMOEDA)),3), 2)
                            EndIf

                            If Len(aSE1Dados) >= nY .and. aNCC_RA[nY] == aSE1Dados[nY][1]
                                aValores := aClone( aSE1Dados[nY][3] )
                            Else
                                aValores := FaVlAtuCR("SE1",dDataBase,/*/cMotBx/*/,/*/lTitulo/*/,/*/cFilSE1/*/,/*/lExecQry/*/,nTaxaCM,aTxMoeda,/*lConsdAbat*/,/*nValRec*/, nVlRealCmp)
                            EndIf

                            nPerc := 1
                            // Antes de executar a funcao, verifica se valor informado eh maior ao valor de saldo disponivel
                            // Troca por um valor menor ao valor disponivel (saldo) do RA (baixa parcial)
                            If aNCC_RAvlr[nY] > 0 .and. aNCC_RAvlr[nY] <= aValores[12]
                                aValores[12] := aNCC_RAvlr[nY]
                            Endif
                            /* Trataviva para não permitir a compensação automaticas de NCCs com Bloqueio do TOTVS Antecipa 
                               Compensação só é permitida se o movimento vier através da API do TOTVS Antecipa*/
                            If SE1->E1_SITUACA <> PadR("0",TamSX3("E1_SITUACA")[1]) .and. !Empty(cCaDvTecF) .And. !FwIsInCallStack('FINI136O') .And. SE1->E1_SITUACA $ cCaDvTecF 
                                aValores[12] := 0 
                            EndIf 

                            If (aValores[12]) > 0
                                If !lFrtBxNCC .And. ( nModulo <> 12 )
                                    nVlrACmp  := Min((nVlrCR-nVlrComp),aValores[12])
                                Else
                                    nVlrACmp  := Min((nVlrCR-nVlrComp)+((nMultaTit+nJurosTit)-nDescoTit),aValores[12])
                                Endif

                                If lContSaldo
                                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                                    //³ Ajusta o Valor a compensar                                   ³
                                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                    nVlrACmp   := Min( nVlrACmp, nSaldoComp )
                                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                                    //³ Baixa o saldo a compensar                                    ³
                                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                    nSaldoComp -= nVlrACmp
                                EndIf

                                nVlrComp  += nVlrACmp
                                If ( nMoeda != nMoedaAdd ) .And. !lCmTxCon
                                    nPerc	:= nVlrCR / aValores[nY]
                                Elseif (nMoeda > 1) .and. !lCmTxCon
                                    nPerc	:= nVlrMoeTit / aValores[11]
                                Endif

                                nTxMoedNf := GetTxMoeNew(aTxMoeda,nMoeda)
                                nTaxaRA   := GetTxMoeNew(aTxMoeda,SE1->E1_MOEDA)

                                If SE1->E1_MOEDA > 1 
                                    If !lCmTxCon
                                        If SE1->E1_MOEDA == nMoeda .And. SE1->E1_TXMOEDA > 0
                                            If SE1->E1_TXMOEDA <> nTxConNf 
                                                nTaxaRA   := SE1->E1_TXMOEDA
                                                nTxMoedNf := nTxConNf
                                            EndIf
                                        EndIf
                                    Else
                                        nTaxaRA   := nTaxaCM
                                        nTxMoedNf := nTaxaCM
                                    EndIf
                                EndIf
                                aadd(aRecebido,{ aNCC_RA[nY],;
                                    IIf(FunName()=="MATA468N",nVlrACmp,Round(xMoeda(nVlrACmp,1,nMoeda,,3,,nTaxaCM),2)),;
                                    aValores[02],;
                                    Nil,;
                                    cLoteCtb,;
                                    NIL,;
                                    nTxMoedNf,;
                                    NIL,;
                                    NIL,;
                                    nTaxaRA,;
                                    aValores[10] * nPerc} )
                                If nVlrCR <= nVlrComp
                                    Exit
                                EndIf
                            Else
                                aNCC_RA[nY] := 0
                            EndIf
                        EndIf
                    Next nY
                    If ( Len(aRecebido) <> 0 )
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Posiciona no titulo principal                                ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        dbSelectArea("SE1")
                        dbSetOrder(1)
                        SE1->( MsGoto(aSE1[nX]) )
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Verifica o Codigo do lancamento padrao                       ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        cPadrao := "596"
                        If lHeadProva .And. VerPadrao(cPadrao)
                            bContabil := {|| nTotalCtb += DetProva( 	nHdlPrv,;
                                                                        cPadrao,;
                                                                        "FINA330",;
                                                                        cLoteCtb,;
                                                                        /*nLinha*/,;
                                                                        /*lExecuta*/,;
                                                                        /*cCriterio*/,;
                                                                        /*lRateio*/,;
                                                                        /*cChaveBusca*/,;
                                                                        /*aCT5*/,;
                                                                        /*lPosiciona*/,;
                                                                        @aFlagCTB,;
                                                                        /*aTabRecOri*/,;
                                                                        /*aDadosProva*/ ) }

                            STRLCTPAD := SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO
                        Else
                            lContabil := .F.
                        EndIf
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Efetua a baixa simples dos titulos                           ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        cRetorno := FaCmpCR(aTitulo,aRecebido,lContabil,lComisNCC,Nil,bContabil,bBlock,,cProcComp)

                        /* Atualiza o status do titulo no SERASA */
                        If cPaisLoc == "BRA"
                            SE1->( MsGoto(aSE1[nX]) )
                            If SE1->E1_SALDO <= 0
                                cChaveTit := xFilial("SE1") + "|" +;
                                            SE1->E1_PREFIXO + "|" +;
                                            SE1->E1_NUM		+ "|" +;
                                            SE1->E1_PARCELA + "|" +;
                                            SE1->E1_TIPO	+ "|" +;
                                            SE1->E1_CLIENTE + "|" +;
                                            SE1->E1_LOJA
                                cChaveFK7 := FINGRVFK7("SE1",cChaveTit)
                                F770BxRen("2","CMP",cChaveFK7)
                            Endif
                            If !Empty(cRetorno) .and. !(SE1->E1_TIPO $ MVRECANT+"/"+MV_CRNEG)
                                If __lPIXCanc
                                    If !PIXCancel(xFilial("SE1", SE1->E1_FILORIG), cChaveFK7)
                                        DisarmTransaction()
                                        Exit
                                    EndIf
                                EndIf
                            EndIf
                        Endif

                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ DetProva                                                     ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        If lHeadProva .And. lContabil
                            VALOR    := nVlrComp
                            REGVALOR := SE1->(RecNo())
                            SE5->(MsGoto(0))
                            SE1->(MsGoto(0))
                            //nTotalCtb += DetProva(nHdlPrv,cPadrao,"FINA330",cLoteCtb)
                            nTotalCtb += DetProva( 	nHdlPrv,;
                                                    cPadrao,;
                                                    "FINA330",;
                                                    cLoteCtb,;
                                                    /*nLinha*/,;
                                                    /*lExecuta*/,;
                                                    /*cCriterio*/,;
                                                    /*lRateio*/,;
                                                    /*cChaveBusca*/,;
                                                    /*aCT5*/,;
                                                    /*lPosiciona*/,;
                                                    @aFlagCTB,;
                                                    /*aTabRecOri*/,;
                                                    /*aDadosProva*/ )
                        EndIf
                    EndIf
                Else
                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ Verifica o Codigo do lancamento padrao                       ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    cPadrao := "588"
                    If lHeadProva .And. VerPadrao(cPadrao)
                        bContabil := {|| nVlrComp+=FK1->FK1_VALOR,nTotalCtb += DetProva( 	nHdlPrv,;
                                                                                            cPadrao,;
                                                                                            "FINA330",;
                                                                                            cLoteCtb,;
                                                                                            /*nLinha*/,;
                                                                                            /*lExecuta*/,;
                                                                                            /*cCriterio*/,;
                                                                                            /*lRateio*/,;
                                                                                            /*cChaveBusca*/,;
                                                                                            /*aCT5*/,;
                                                                                            /*lPosiciona*/,;
                                                                                            @aFlagCTB,;
                                                                                            /*aTabRecOri*/,;
                                                                                            /*aDadosProva*/ ) }

                        STRLCTPAD := SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO
                    Else
                        lContabil := .F.
                    EndIf
                    cRetorno := FaCmpCR(aTitulo,aRecebido,lContabil,lComisNCC,Nil,bContabil,bBlock,aEstorno[nX])
                    /* 	Atualiza o status do titulo no SERASA */
                    If cPaisLoc == "BRA"
                        SE1->( MsGoto(aSE1[nX]) )
                        cChaveTit := xFilial("SE1") + "|" +;
                                    SE1->E1_PREFIXO + "|" +;
                                    SE1->E1_NUM		+ "|" +;
                                    SE1->E1_PARCELA + "|" +;
                                    SE1->E1_TIPO	+ "|" +;
                                    SE1->E1_CLIENTE + "|" +;
                                    SE1->E1_LOJA
                        cChaveFK7 := FINGRVFK7("SE1",cChaveTit)
                        F770BxRen("2","",cChaveFK7)
                    Endif

                    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    //³ DetProva                                                     ³
                    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                    If lHeadProva .And. lContabil
                        VALOR    := nVlrComp
                        REGVALOR := SE1->(RecNo())
                        SE5->(MsGoto(0))
                        SE1->(MsGoto(0))
                        //nTotalCtb += DetProva(nHdlPrv,cPadrao,"FINA330",cLoteCtb)
                        nTotalCtb += DetProva( 	nHdlPrv,;
                                                cPadrao,;
                                                "FINA330",;
                                                cLoteCtb,;
                                                /*nLinha*/,;
                                                /*lExecuta*/,;
                                                /*cCriterio*/,;
                                                /*lRateio*/,;
                                                /*cChaveBusca*/,;
                                                /*aCT5*/,;
                                                /*lPosiciona*/,;
                                                @aFlagCTB,;
                                                /*aTabRecOri*/,;
                                                /*aDadosProva*/ )
                    EndIf
                EndIf
            EndIf
        Next nX
        lRetLoja := .T.
    End Transaction
OtherWise
EndCase
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Efetua a integracao com o Contabil                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lHeadProva
    RodaProva(  nHdlPrv,;
                nTotalCtb )
    If nTotalCtb > 0
        cA100Incl( cArqCtb,;
                   nHdlPrv,;
                   1,;
                   cLoteCtb,;
                   lDigita,;
                   lAgluCtb,;
                   /*cOnLine*/,;
                   /*dData*/,;
                   /*dReproc*/,;
                   @aFlagCTB,;
                   /*aDadosProva*/,;
                   /*aDiario*/ )
        aFlagCTB := {}  // Limpa o coteudo apos a efetivacao do lancamento
    EndIf
EndIf
RestArea(aArea)
Return(lRetorno)

//---------------------------------------------------------------------
/*/{Protheus.doc} FaCanDelCP
Esta rotina tem como objetivo verificar se um titulo do contas a pagar 
pode ser excluido. 
Um titulo somente pode ser excluido, quando nenhuma atualizacao foi 
feita apos sua inclusao

@param cAliasSE2    Alias do SE2
@param cOrigem      Origem da exclusao
@param lHelp        Indica se o help deve ser acionado
@param cMsg         Mensagem a ser retornada (nome do help apresentado)

@return lRet        Indica se a exclusao pode ser efetuada

@author Eduardo Riera  
@since 05/10/2001
@version P12
/*/
//---------------------------------------------------------------------
Function FaCanDelCP(cAliasSE2,cOrigem,lHelp,cMsg)

Local aArea       := GetArea()
Local aAreaSE1    := SE1->(GetArea())
Local aAreaSE2    := SE2->(GetArea())
Local aParcela    := {}
Local aRecSE2     := {}
Local nX          := 0
Local nY          := 0
Local cMunic      := PadR(SuperGetMv("MV_MUNIC"),Len(SE2->E2_FORNECE))
Local cPrefixo    := (cAliasSE2)->E2_PREFIXO
Local cNumero     := (cAliasSE2)->E2_NUM
Local cParcela    := (cAliasSE2)->E2_PARCELA
Local cTipo       := (cAliasSE2)->E2_TIPO
Local cFornece    := (cAliasSE2)->E2_FORNECE
Local cLoja       := (cAliasSE2)->E2_LOJA
Local cCursor     := ""
Local lQuery      := .F.
Local lRetorno    := .T.
Local lIntegracao := SuperGetMv("MV_EASY")=="S"
Local lContrRet   := .T.
Local cLojaZero   := PadR("00",Len( SE2->E2_LOJA ) , "0" )
Local cParcINP	  := " "
Local cQuery      := ""
Local aStru       := {}
Local lCposIMA	  := (SE2->(ColumnPos("E2_IMA"))   > 0 .And. SE2->(ColumnPos("E2_PARCIMA")) > 0)
Local cParCam	  := ""
Local aPenCont    := {}
Local cQryImp     := ""
Local cAliasImp   := ""
Local cChaveSE2   := ""
Local lTemSFR     := TableInDic('SFR')
Local cChaveTit   := ""
Local cChaveFK7   := ""
Local cAliasFK2   := ""

// Verifica os parametros da rotina
DEFAULT cAliasSE2 := "SE2"
DEFAULT cOrigem   := "FINA050"
DEFAULT lHelp     := .T.

SA2->(dbSetOrder(1))
SA2->(DbSeek(xFilial("SA2")+cFornece+cLoja))
If  SA2->(FieldPos("A2_MUNIC")) > 0 .And. !Empty(SA2->A2_MUNIC)
    cMunic := PadR(SA2->A2_MUNIC,Len(SE2->E2_FORNECE))
EndIf

dbSelectArea(cAliasSE2)
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVISS           ,"E2_PARCISS" ,"E2_ISS" ,MVISS ,E2_PARCISS,cMunic,PadR(IIf(SubStr(cMunic,Len(SE2->E2_FORNECE)+1)<>"",SubStr(cMunic,Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVINSS+"/"+"INA","E2_PARCINS" ,"E2_INSS",MVINSS,E2_PARCINS,PadR(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCISS","E2_ISS" ,MVTAXA,E2_PARCISS,cMunic,PadR(IIf(SubStr(cMunic,Len(SE2->E2_FORNECE)+1)<>"",SubStr(cMunic,Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCIR" ,"E2_IRRF",MVTAXA,E2_PARCIR,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCPIS" ,"E2_PIS",MVTAXA,E2_PARCPIS,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCCOF" ,"E2_COFINS",MVTAXA,E2_PARCCOF,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCSLL" ,"E2_CSLL",MVTAXA,E2_PARCSLL,PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFET" ,"E2_FETHAB",MVTAXA,E2_PARCFET,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFAB" ,"E2_FABOV",MVTAXA,E2_PARCFAB,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFAC" ,"E2_FACS",MVTAXA,E2_PARCFAC,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})

If lFamad
    aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCFAM" ,"E2_FAMAD",MVTAXA,E2_PARCFAM,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
EndIf

If lCposIMA
    aadd(aParcela,{(cAliasSE2)->E2_TIPO$MVTAXA+"/"+MVTXA,"E2_PARCIMA" ,"E2_IMA" ,MVTAXA,E2_PARCIMA,PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})
Endif

GetParcINP(@cParcINP)
aadd(aParcela,{(cAliasSE2)->E2_TIPO$"INP",""/*"E2_PARCINS"*/ ,"E2_VALOR","INP",cParcINP,PadR(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA))})

// Verifica se o titulo foi gerado pelo SIGAEIC
If lRetorno .And. lIntegracao .And. cPaisLoc <> "ARG" .And. (cAliasSE2)->E2_TIPO = "INV" .And.;
        UPPER(AllTrim((cAliasSE2)->E2_ORIGEM)) == "SIGAEIC"
    If lHelp
        HELP(" ",1,"FAORIEIC")
        cMsg := "FAORIEIC"
    EndIf
    lRetorno := .F.
EndIf

// Verifica se o titulo foi gerado pelo SIGAEIC
If lRetorno .And. lIntegracao .And. (cAliasSE2)->E2_TIPO == MVPROVIS .And.;
        UPPER(AllTrim((cAliasSE2)->E2_ORIGEM)) == "SIGAEIC" 
    If lHelp
        HELP(" ",1,"FAORIEIC")
        cMsg := "FAORIEIC"
    EndIf
    lRetorno := .F.
EndIf

// PA ou cheque gerado por PA devera cancelar a Ordem de Pagto.
If  lRetorno .And. cPaisLoc $ "ARG"
    If ((cAliasSE2)->E2_TIPO==MVPAGANT).Or.((cAliasSE2)->E2_TIPO == MVCHEQUE .And. !Empty((cAliasSE2)->E2_ORDPAGO))
        If lHelp
            Help(" ",1,"ORDPAGO")
            cMsg := "ORDPAGO"
        EndIf
        lRetorno := .F.
    EndIf
EndIf

// Verifica se os dados nao foram gravados por outro modulo
If  lRetorno .And. !Empty((cAliasSE2)->E2_ORIGEM) .And.;
        !Upper(AllTrim((cAliasSE2)->E2_ORIGEM))$cOrigem
    If lHelp
        Help(" ",1,"NO_DELETE2")
        cMsg := "NO_DELETE2"
    EndIf
    lRetorno := .F.
EndIf

// Verifica se o titulo nao esta em bordero
If  lRetorno .And. !Empty((cAliasSE2)->E2_NUMBOR)
    If lHelp
        Help("",1,"FA050BORD")
        cMsg := "FA050BORD"
    EndIf
    lRetorno := .F.
EndIf

If lRetorno 
    If	"MATA100" $ cOrigem
        //Dados da tabela auxiliar com o código do título a pagar
        cChaveTit := xFilial("SE2", (cAliasSE2)->E2_FILORIG) + "|" + (cAliasSE2)->E2_PREFIXO + "|" + (cAliasSE2)->E2_NUM     + "|" + (cAliasSE2)->E2_PARCELA + "|" + ;
                                    (cAliasSE2)->E2_TIPO     + "|" + (cAliasSE2)->E2_FORNECE + "|" + (cAliasSE2)->E2_LOJA
        cChaveFK7 := FINGRVFK7( "SE2", cChaveTit )
        cAliasFK2 := ""

        If __oPreparP == NIL
            cQuery 	:= "SELECT SUM(FK2_VALOR) VALORBX FROM "+ RetSqlName("FK2") +" FK2 "
            cQuery 	+= "WHERE FK2_IDDOC = ? AND"
            cQuery 	+=      " FK2_RECPAG = 'P' AND"
            cQuery  +=      " SUBSTRING(FK2_HISTOR,1,12) <> '//CMP--CTR..' AND"
            cQuery 	+=      " FK2.D_E_L_E_T_ = ' ' "
            cQuery	+= "AND NOT EXISTS( "
            cQuery	+= "SELECT FK2EST.FK2_IDDOC FROM " + RetSqlName("FK2") +" FK2EST "
            cQuery	+= "WHERE FK2EST.FK2_IDDOC = ? AND"
            cQuery	+=      " FK2EST.FK2_SEQ = FK2.FK2_SEQ AND"
            cQuery	+=      " FK2EST.FK2_TPDOC = 'ES' AND"
            cQuery	+=      " FK2EST.D_E_L_E_T_ = ' ') "

            cQuery 	:= ChangeQuery(cQuery)
            __oPreparP:=FWPreparedStatement():New(cQuery)
        Endif

        __oPreparP:SetString(1,cChaveFK7)
        __oPreparP:SetString(2,cChaveFK7)

        cQuery := __oPreparP:GetFixQuery()

        cAliasFK2 := mpsysopenquery(cQuery)

        IF ( cAliasFK2 )->VALORBX > 0

            If ( cAliasFK2 )->VALORBX == (cAliasSE2)->E2_VALOR
                If lHelp
                    Help(" ",1,"FA050BAIXA")
                    cMsg := "FA050BAIXA"
                EndIf
                lRetorno := .F.
            EndIf

            If lRetorno 
                If lHelp
                    Help(" ",1,"BAIXAPARC")
                    cMsg := "BAIXAPARC"
                EndIf
                lRetorno := .F.
            EndIf

        Endif 
        ( cAliasFK2 )->( dbCloseArea() )

    Else
        // Verifica se titulo ja foi baixado total ou parcialmente
        If ("MATA100" $ cOrigem .OR. "MATA460" $ cOrigem)  .And. (cAliasSE2)->E2_SALDO == 0
            If lHelp
                Help(" ",1,"FA050BAIXA")
                cMsg := "FA050BAIXA"
            EndIf
            lRetorno := .F.
        EndIf

        If lRetorno .And. ((cAliasSE2)->E2_VALOR <> (cAliasSE2)->E2_SALDO .OR. Iif(cPaisloc=="ARG",!EMPTY((cAliasSE2)->E2_PREOP),.F.) ) 
            If lHelp
                Help(" ",1,"BAIXAPARC")
                cMsg := "BAIXAPARC"
            EndIf
            lRetorno := .F.
        EndIf

    EndIf
EndIf

// Verifica que la Factura no contenga detracciones ya pagadas  PERU
If lRetorno .And. cPaisLoc == "PER"
    cParCam := SuperGetMV("MV_1DUP",,"1")
    cParCam := IIf(!Empty(cParCam),cParCam,space(TamSX3("E2_PARCELA")[1]))
    cParCam := PADR(cParCam,TamSx3("E2_PARCELA")[1])
    lRetorno := getDetrcP((cAliasSE2)->E2_PREFIXO + (cAliasSE2)->E2_NUM+cParCam + PADR('TX',TamSx3("E2_TIPO")[1]) + (cAliasSE2)->E2_FORNECE + (cAliasSE2)->E2_LOJA)
EndIf

// Verifica se a data de movimentacao é valida
If lRetorno .And. !DtMovFin()
    lRetorno := .F.
EndIf

// Verifica se foi emitido cheque para este titulo
If lRetorno .And. (cAliasSE2)->E2_IMPCHEQ == "S" 
    If lHelp
        Help( " ", 1, "EXISTCHEQ" )
        cMsg := "EXISTCHEQ"
    EndIf
    lRetorno := .F.
EndIf

If lRetorno
    //Verifica se o titulo tem baixas com contabilização pendente
    aPenCont := FA050PenC({xFilial("SE2"),cPrefixo,cNumero,cParcela,cTipo,cFornece,cLoja})
    If Len(aPenCont) > 0
        lRetorno := FA050MonP(aPenCont,.F.)
    EndIf
EndIf

// Verificar se o documento foi ajustado por diferencia de cambio com data posterio a OP 
If lRetorno .And. cPaisLoc == "ARG"
    If lTemSFR //PARA GARANTIR QUE A TABELA SFR EXISTA
        SFR->(DbSetOrder(1))
        If SFR->(DbSeek(xFilial()+"2"+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA))
            If lHelp
                Help( " ", 1, "FA084010",,Left(SFR->FR_CHAVDE,Len(SE2->E2_PREFIXO+SE2->E2_NUM+SE2->E2_PARCELA+SE2->E2_TIPO)),5)
            EndIf
            lRetorno := .F.
        Endif
    Endif
Endif

// Verifica se foi emitido cheque para os titulos vinculados
If lRetorno
    For nX := 1 To Len(aParcela)
        If (cAliasSE2)->(FieldGet(FieldPos(aParcela[nX,3]))) > 0
            dbSelectArea("SE2")
            dbSetOrder(1)
            If DbSeek(xFilial("SE2")+cPrefixo+cNumero+aParcela[nX][5]+aParcela[nX][4]+aParcela[nX][6]+aParcela[nX][7])

                If Alltrim(SE2->E2_ORIGEM) $ AllTrim(cOrigem)
                    If  !Empty(SE2->E2_TITPAI) .And. (SE2->E2_TITPAI <> cPrefixo+cNumero+cParcela+cTipo+cFornece+cLoja)
                        Loop
                    EndIf
                    If SE2->E2_IMPCHEQ=="S"
                        If lHelp
                            Help( " ", 1, "EXISTCHEQ" )
                            cMsg := "EXISTCHEQ"
                        EndIf
                        lRetorno := .F.
                    EndIf
                    If SE2->E2_SALDO <> SE2->E2_VALOR
                        If lHelp
                            Help(" ",1,"BAIXAPARC")
                            cMsg := "BAIXAPARC"
                        EndIf
                        lRetorno := .F.
                    EndIf
                    If !Empty(SE2->E2_NUMBOR)
                        If lHelp
                            Help("",1,"FA050BORD")
                            cMsg := "FA050BORD"
                        EndIf
                        lRetorno := .F.
                    EndIf
                EndIf

            EndIf
        EndIf
        If !lRetorno
            Exit
        EndIf
    Next nX
    RestArea(aAreaSE2)
EndIf


//Tratativa para buscar baixas de títulos de impostos provenientes do documento de entrada/pré nota
//onde o usuário pode alterar o fornecedor(diferente do MV_MUNIC) para geração do título
//Exemplo: títulos de ISS
if lRetorno .and. ( IsInCallStack("MATA103") .or. IsInCallStack("MATA140") )

    cChaveSE2 := cPrefixo + cNumero + cParcela + cTipo + cFornece + cLoja
    cAliasImp := GetNextAlias()

    cQryImp := "SELECT E2_TITPAI FROM "+RetSqlName("SE2")+" SE2 "
    cQryImp += "WHERE E2_FILIAL = '" + FwxFilial("SE2") + "' "
    cQryImp += "AND E2_TITPAI = '" + cChaveSE2 + "' "
    cQryImp += "AND E2_VALOR <> E2_SALDO "
    cQryImp += "AND SE2.D_E_L_E_T_ = ' ' "

    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQryImp),cAliasImp,.T.,.T.)

    if (cAliasImp)->(!Eof())
        lRetorno := .F.
    endif

    if !lRetorno
        if lHelp
            Help(" ",1,"FA050BAIXA")
            cMsg := "FA050BAIXA"
        endif
    endif

    (cAliasImp)->(DbCloseArea())

endif

// Verifica se eh um titulo de imposto
If (cAliasSE2)->E2_TIPO $ MVISS+"/"+MVTAXA+"/"+MVTXA+"/"+MVINSS+"/"+"INA" .And. lRetorno .And. !("MATA460" $ cOrigem)

    // Se este titulo possuir um pai nao permitir a exclusao
    For nX := 1 To Len(aParcela)
        If aParcela[nX,1]
            nY := nX
            Exit
        EndIf
    Next nX
    dbSelectArea("SE2")
    dbSetOrder(1)

    SE2->(dbCommit())
    aStru  := SE2->(dbStruct())
    cCursor:= "FACANDELCP"
    lQuery := .T.
    cQuery := "SELECT * "
    cQuery += "FROM "+RetSqlName("SE2")+" SE2 "
    cQuery += "WHERE SE2.E2_FILIAL='"+xFilial("SE2")+"' AND "
    cQuery += "SE2.E2_PREFIXO='"+cPrefixo+"' AND "
    cQuery += "SE2.E2_NUM='"+cNumero+"' AND "
    cQuery += "SE2."+aParcela[nX][2]+"='"+cParcela+"' AND "
    cQuery += "SE2.D_E_L_E_T_=' ' "
    cQuery += "ORDER BY "+SqlOrder(SE2->(IndexKey()))

    cQuery := ChangeQuery(cQuery)

    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor,.T.,.T.)

    For nX := 1 To Len(aStru)
        If aStru[nX][2]<>"C"
            TcSetField(cCursor,aStru[nX][1],aStru[nX][2],aStru[nX][3],aStru[nX][4])
        EndIf
    Next nX

    While !Eof() .And. (cCursor)->E2_FILIAL == xFilial("SE2") .And.;
            (cCursor)->E2_PREFIXO == cPrefixo .And.;
            (cCursor)->E2_NUM == cNumero
        If (cCursor)->(FieldGet(FieldPos(aParcela[nY][2]))) == cParcela
            If ( cTipo $ MVTXA+"/"+"INA" .And. (cCursor)->E2_TIPO $ MVPAGANT+"/"+MV_CPNEG ) .Or. !cTipo $ MVTXA+"/"+"INA"
                If (cCursor)->(FieldGet(FieldPos(aParcela[nY,3]))) <> 0
                    If lHelp
                        Help(" ",1,"NOVALORIR")
                        cMsg := "NOVALORIR"
                    EndIf
                    lRetorno := .F.
                EndIf
            EndIf
        EndIf
        dbSelectArea(cCursor)
        DbSkip()
    EndDo
    If lQuery
        dbSelectArea(cCursor)
        dbCloseArea()
        dbSelectArea("SE2")
    EndIf
    RestArea(aAreaSE2)
    If lRetorno
        dbSelectArea("SE1")
        dbSetOrder(1)

        SE1->(dbCommit())
        aStru  := SE1->(dbStruct())
        cCursor:= "FACANDELCP"
        lQuery := .T.
        cQuery := "SELECT * "
        cQuery += "FROM "+RetSqlName("SE1")+" SE1 "
        cQuery += "WHERE SE1.E1_FILIAL='"+xFilial("SE1")+"' AND "
        cQuery += "SE1.E1_PREFIXO='"+cPrefixo+"' AND "
        cQuery += "SE1.E1_NUM='"+cNumero+"' AND "
        cQuery += "SE1.D_E_L_E_T_=' ' "
        cQuery += "ORDER BY "+SqlOrder(SE1->(IndexKey()))

        cQuery := ChangeQuery(cQuery)

        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor,.T.,.T.)

        For nX := 1 To Len(aStru)
            If aStru[nX][2]<>"C"
                TcSetField(cCursor,aStru[nX][1],aStru[nX][2],aStru[nX][3],aStru[nX][4])
            EndIf
        Next nX

        While !Eof() .And. (cCursor)->E1_FILIAL == xFilial("SE1") .And.;
                (cCursor)->E1_PREFIXO == cPrefixo .And.;
                (cCursor)->E1_NUM == cNumero
            If (cCursor)->E1_ISS <> 0 .And. (cCursor)->E1_PARCELA == cParcela
                If lHelp
                    Help(" ",1,"NOVALORIR")
                    cMsg := "NOVALORIR"
                EndIf
                lRetorno := .F.
            EndIf
            dbSelectArea(cCursor)
            dbSkip()
        EndDo
        If lQuery
            dbSelectArea(cCursor)
            dbCloseArea()
            dbSelectArea("SE1")
        EndIf
        RestArea(aAreaSE1)
    EndIf
EndIf

// Verifica se ha um titulo de abatimento vinculado a este titulo
If lRetorno .And. !(cAliasSE2)->E2_TIPO $ MVABATIM .And. !"FINA050"$cOrigem
    If FaAbatCP(cPrefixo,cNumero,cParcela,cFornece,cLoja) > 0
        If lHelp
            Help(" ",1,"FINABATTIT")
            cMsg := "FINABATTIT"
        EndIf
        lRetorno := .F.
    EndIf
EndIf

// Verifica se o titulo possui NCC e estas ja foram compensadas
If lRetorno
    If lContrRet
        aRecSE2 := FImpExcTit("SE2",(cAliasSE2)->E2_PREFIXO,(cAliasSE2)->E2_NUM,(cAliasSE2)->E2_PARCELA,(cAliasSE2)->E2_TIPO,(cAliasSE2)->E2_FORNECE,(cAliasSE2)->E2_LOJA)

        For nX := 1 to Len(aRecSE2)
            SE2->(MSGoto(aRecSE2[nX]))
            If SE2->E2_TIPO $ MV_CPNEG
                If SE2->E2_SALDO <> SE2->E2_VALOR
                    Help(" ",1,"NODELETA")
                    lRetorno := .F.
                Endif
            Endif
        Next

    Endif
Endif

RestArea(aAreaSE1)
RestArea(aAreaSE2)
RestArea(aArea)

FwFreeArray(aArea)
FwFreeArray(aAreaSE1)
FwFreeArray(aAreaSE2)
FwFreeArray(aParcela)
FwFreeArray(aRecSE2)
FwFreeArray(aStru)
FwFreeArray(aPenCont)

Return(lRetorno)


//------------------------------------------------------------------------
/*/{Protheus.doc} FaCanDelCR
Esta rotina tem como objetivo verificar se um titulo do contas a receber 
pode ser excluido. 
Um titulo somente pode ser excluido, quando nenhuma atualizacao foi 
feita apos sua inclusao

@param cAliasSE1    Alias do SE1
@param cOrigem      Origem da exclusao
@param lHelp        Indica se o help deve ser acionado
@param cMsg         Mensagem a ser retornada (nome do help apresentado)

@return lRet        Indica se a exclusao pode ser efetuada

@author Eduardo Riera  
@since 29/12/2001
@version P12
/*/
//------------------------------------------------------------------------
Function FaCanDelCR(cAliasSE1,cOrigem,lMessage,cMsg)
Local aArea       := GetArea()
Local aAreaSE1    := SE1->(GetArea())
Local aRecSE1     := {}
Local nX          := 0
Local lRetorno    := .T.
Local lIntegracao := SuperGetMv("MV_EASY")=="S"
Local lContrRet   := .T.
Local cMunic      := PadR(SuperGetMv("MV_MUNIC"),Len(SE2->E2_FORNECE))
Local cUniao   	  := PadR(SuperGetMV("MV_UNIAO"),Len(SE2->E2_FORNECE))
Local cRect       := PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE))
Local cForINSS 	  := PadR(SuperGetMV("MV_FORINSS"),Len(SE2->E2_FORNECE))
Local cLojaZero   := PadR("00",Len( SE2->E2_LOJA ) , "0" )
Local cISS 		  := &(SuperGetMv("MV_ISS",,""))
Local cNatInss    := Alltrim(&(SuperGetMv("MV_INSS")))
Local lCposIMA	  := (SE1->(ColumnPos("E1_IMA")) > 0 .And. SE1->(ColumnPos("E1_PARCIMA")) > 0)
Local cChaveTit   := ""
Local cChaveFK7   := ""
Local cAliasFK1   := ""
Local cQuery      := ""

// Verifica os parametros da rotina
DEFAULT cAliasSE1 := "SE1"
DEFAULT cOrigem   := "FINA040"
DEFAULT lMessage  := .T.  
DEFAULT cMsg	  := ""

// Verifica se o titulo foi gerado pelo SIGAEIC
If lIntegracao .And. Upper(AllTrim((cAliasSE1)->E1_ORIGEM)) == "SIGAEIC"
    If lMessage
        HELP(" ",1,"FAORIEIC")
        cMsg := "FAORIEIC"
    EndIf
    lRetorno := .F.
EndIf

// Verifica se os dados nao foram gravados por outro modulo
If lRetorno .And. !Empty((cAliasSE1)->E1_ORIGEM) .And. !Upper(AllTrim((cAliasSE1)->E1_ORIGEM))$cOrigem
    If lMessage
        Help(" ",1,"NO_DELETE")
        cMsg := "FAORIEIC"
    EndIf
    lRetorno := .F.
EndIf

If lRetorno
    If cOrigem == "MATA460"

        // Caso o modulo de gestao de contratos esteja presente
        // Verifica se e uma baixa do modulo gestao de contratos
        // Verifica se titulo possui baixas nao originadas de contratos

        // Verifica valores recebidos
        cChaveTit := xFilial("SE1", (cAliasSE1)->E1_FILORIG) + "|" + (cAliasSE1)->E1_PREFIXO + "|" + (cAliasSE1)->E1_NUM     + "|" + (cAliasSE1)->E1_PARCELA + "|" + ;
                                    (cAliasSE1)->E1_TIPO     + "|" + (cAliasSE1)->E1_CLIENTE + "|" + (cAliasSE1)->E1_LOJA
        cChaveFK7 := FINGRVFK7( "SE1", cChaveTit )
        cAliasFK1 := ""

        If __oPreparR == NIL
            cQuery 	:= "SELECT SUM(FK1_VALOR) VALORBX FROM "+ RetSqlName("FK1") +" FK1 "
            cQuery 	+= "WHERE FK1_IDDOC = ? AND"
            cQuery 	+=      " FK1_RECPAG = 'R' AND"
            cQuery  +=      " SUBSTRING(FK1_HISTOR,1,12) <> '//CMP--CTR..' AND"
            cQuery 	+=      " FK1.D_E_L_E_T_ = ' ' "
            cQuery	+= "AND NOT EXISTS( "
            cQuery	+= "SELECT FK1EST.FK1_IDDOC FROM " + RetSqlName("FK1") +" FK1EST "
            cQuery	+= "WHERE FK1EST.FK1_IDDOC = ? AND"
            cQuery	+=      " FK1EST.FK1_SEQ = FK1.FK1_SEQ AND"
            cQuery	+=      " FK1EST.FK1_TPDOC = 'ES' AND"
            cQuery	+=      " FK1EST.D_E_L_E_T_ = ' ') "

            cQuery 	:= ChangeQuery(cQuery)
            __oPreparR:=FWPreparedStatement():New(cQuery)
        Endif

        __oPreparR:SetString(1,cChaveFK7)
        __oPreparR:SetString(2,cChaveFK7)

        cQuery := __oPreparR:GetFixQuery()

        cAliasFK1 := mpsysopenquery(cQuery)

        IF ( cAliasFK1 )->VALORBX > 0

            If ( cAliasFK1 )->VALORBX == (cAliasSE1)->E1_VALOR
                If lMessage
	                Help(" ",1,"FA040BAIXA")
    	            cMsg := "FA040BAIXA"
                EndIf
                lRetorno := .F.
            EndIf

            If lRetorno 
                If lMessage
                    Help(" ",1,"BAIXAPARC")
                    cMsg := "BAIXAPARC"
                EndIf
                lRetorno := .F.
            EndIf

        Endif 
        ( cAliasFK1 )->( dbCloseArea() )

    Else
        // Verifica se o titulo foi baixado total ou parcialmente
        If lRetorno .And. (cAliasSE1)->E1_SALDO == 0 
            If cPaisLoc == "BRA" .Or.;
                ((cAliasSE1)->E1_VENCORI <> (cAliasSE1)->E1_EMISSAO .Or. SE4->E4_BXTITAV <> "1")

                If lMessage
                    Help(" ",1,"FA040BAIXA")
                    cMsg := "FA040BAIXA"
                EndIf
                lRetorno := .F.
            Endif
        EndIf
        If lRetorno .And. (cAliasSE1)->E1_VALOR <> (cAliasSE1)->E1_SALDO
            If cPaisLoc=="BRA" .Or.;
                ((cAliasSE1)->E1_VENCORI<>(cAliasSE1)->E1_EMISSAO .Or. SE4->E4_BXTITAV<>"1")

                If lMessage
                    Help(" ",1,"BAIXAPARC")
                    cMsg := "BAIXAPARC"
                EndIf
                lRetorno := .F.
            Endif
        EndIf
    EndIf
EndIf

// Verifica se a data de movimentacao eh valida
If lRetorno .And. !DtMovFin()
    lRetorno := .F.
EndIf

// Verifica se eh o titulo principal
If lRetorno .And. (cAliasSE1)->E1_TIPO $ MVIRABT+"/"+MVINABT+"/"+MVCFABT+"/"+MVCSABT+"/"+MVPIABT
    If lMessage
        Help(" ",1,"NAOPRINCIP")
        cMsg := "NAOPRINCIP"
    EndIf
    lRetorno := .F.
EndIf

// Verifica se o titulo esta em carteira
If lRetorno .And. (cAliasSE1)->E1_SITUACA <> "0"
    If lMessage
        Help(" ",1,"FA040SITU")
        cMsg := "FA040SITU"
    EndIf
    lRetorno := .F.
EndIf

// Verifica se o titulo possui bordero
If lRetorno .And. !Empty((cAliasSE1)->E1_NUMBOR)
    If lMessage
        Help(" ",1,"A520NUMBOR")
        cMsg := "A520NUMBOR"
    EndIf
    lRetorno := .F.
EndIf

// Verifica se o titulo possui NCC e estas ja foram compensadas
If lRetorno
    If lContrRet
        aRecSE1 := FImpExcTit("SE1",(cAliasSE1)->E1_PREFIXO,(cAliasSE1)->E1_NUM,(cAliasSE1)->E1_PARCELA,(cAliasSE1)->E1_TIPO,(cAliasSE1)->E1_CLIENTE,(cAliasSE1)->E1_LOJA)
        For nX := 1 to Len(aRecSE1)
            SE1->(MSGoto(aRecSE1[nX]))
            If SE1->E1_TIPO $ MV_CRNEG
                If SE1->E1_SALDO <> SE1->E1_VALOR
                    Help(" ",1,"NODELETA")
                    cMsg := "NODELETA"
                    lRetorno := .F.
                Endif
            Endif
        Next
    Endif
Endif

// Verifica os titulos vinculados no contas a pagar
If lRetorno .And. (cAliasSE1)->E1_IRRF <> 0
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCIRF)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
            (cAliasSE1)->E1_PREFIXO == SE2->E2_PREFIXO .And.;
            (cAliasSE1)->E1_NUM == SE2->E2_NUM .And.;
            (cAliasSE1)->E1_PARCIRF == SE2->E2_PARCELA .And.;
            lRetorno

        If SE2->E2_FORNECE == cUniao .And. SE2->E2_LOJA == cLojaZero .And. SE2->E2_TIPO $ MVTAXA
            lRetorno := FaCanDelCP("SE2",cOrigem,lMessage,@cMsg)
        EndIf

        dbSelectArea("SE2")
        dbSkip()
    EndDo
EndIf

If lRetorno .and. (cAliasSE1)->E1_FETHAB <> 0
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCFET)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
        (cAliasSE1)->E1_PREFIXO == SE2->E2_PREFIXO .And.;
        (cAliasSE1)->E1_NUM == SE2->E2_NUM .And.;
        (cAliasSE1)->E1_PARCFET == SE2->E2_PARCELA .and. lRetorno

        If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. SE2->E2_TIPO $ MVTAXA
            lRetorno := FaCanDelCP("SE2",cOrigem,lMessage,@cMsg)
        EndIf
        SE2->(dbSkip())
    EndDo
EndIf

If lRetorno .and. (cAliasSE1)->E1_FABOV <> 0
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCFAB)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
        (cAliasSE1)->E1_PREFIXO == SE2->E2_PREFIXO .And.;
        (cAliasSE1)->E1_NUM == SE2->E2_NUM .And.;
        (cAliasSE1)->E1_PARCFAB == SE2->E2_PARCELA .and. lRetorno

        If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. SE2->E2_TIPO $ MVTAXA
            lRetorno := FaCanDelCP("SE2",cOrigem,lMessage,@cMsg)
        EndIf
        SE2->(dbSkip())
    EndDo
EndIf

If lRetorno .and. (cAliasSE1)->E1_FACS <> 0
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCFAC)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
        (cAliasSE1)->E1_PREFIXO == SE2->E2_PREFIXO .And.;
        (cAliasSE1)->E1_NUM == SE2->E2_NUM .And.;
        (cAliasSE1)->E1_PARCFAC == SE2->E2_PARCELA .and. lRetorno

        If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. SE2->E2_TIPO $ MVTAXA
            lRetorno := FaCanDelCP("SE2",cOrigem,lMessage,@cMsg)
        EndIf
        SE2->(dbSkip())
    EndDo
EndIf

If lRetorno .and. lCposIMA .And. (cAliasSE1)->E1_IMA <> 0
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCIMA)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
        (cAliasSE1)->E1_PREFIXO == SE2->E2_PREFIXO .And.;
        (cAliasSE1)->E1_NUM == SE2->E2_NUM .And.;
        (cAliasSE1)->E1_PARCIMA == SE2->E2_PARCELA .and. lRetorno

        If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. SE2->E2_TIPO $ MVTAXA
            lRetorno := FaCanDelCP("SE2",cOrigem,lMessage,@cMsg)
        EndIf
        SE2->(dbSkip())
    EndDo
EndIf

If lRetorno .And. (cAliasSE1)->E1_ISS <> 0
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
            (cAliasSE1)->E1_PREFIXO == SE2->E2_PREFIXO .And.;
            (cAliasSE1)->E1_NUM == SE2->E2_NUM .And.;
            (cAliasSE1)->E1_PARCELA == SE2->E2_PARCELA .And.;
            lRetorno

        If AllTrim(SE2->E2_NATUREZ) == Alltrim(cISS) .And.;
                SE2->E2_FORNECE == cMunic .And. SE2->E2_LOJA == cLojaZero .AND. AllTrim(SE2->E2_ORIGEM) == AllTrim(cOrigem)
            lRetorno := FaCanDelCP("SE2",cOrigem,lMessage,@cMsg)
        EndIf

        dbSelectArea("SE2")
        dbSkip()
    EndDo
EndIf

If lRetorno .And. (cAliasSE1)->E1_INSS <> 0
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
            (cAliasSE1)->E1_PREFIXO == SE2->E2_PREFIXO .And.;
            (cAliasSE1)->E1_NUM == SE2->E2_NUM .And.;
            (cAliasSE1)->E1_PARCELA == SE2->E2_PARCELA .And.;
            lRetorno

        If AllTrim(SE2->E2_NATUREZ) == cNatInss .And.;
                SE2->E2_FORNECE == cForINSS .And. SE2->E2_LOJA == cLojaZero .AND. AllTrim(SE2->E2_ORIGEM) == AllTrim(cOrigem)
            lRetorno := FaCanDelCP("SE2",cOrigem,lMessage,@cMsg)
        EndIf

        dbSelectArea("SE2")
        dbSkip()
    EndDo
EndIf

// Verificar se o documento foi ajustado por diferencia de cambio com data posterio a OP
If lRetorno .And. cPaisLoc == "ARG"
    SIX->(DbSetOrder(1))
    If SIX->(DbSeek('SFR')) //PARA GARANTIR QUE A TABELA SFR EXISTA
        DbSelectArea('SFR')
        DbSetOrder(1)
        If DbSeek(xFilial()+"1"+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO)
            If lMessage
                Help( " ", 1, "FA074010",,Substr(SFR->FR_CHAVDE,Len(SE1->E1_CLIENTE+SE1->E1_LOJA)+1),5)
            EndIf
            lRetorno := .F.
        Endif
    Endif
Endif

RestArea(aAreaSE1)
RestArea(aArea)

FwFreeArray(aArea)
FwFreeArray(aAreaSE1)
FwFreeArray(aRecSE1)

Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaAvalSE2 ³ Autor ³ Eduardo Riera         ³ Data ³05.10.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de avaliacao dos eventos dos titulos a pagar do modulo³±±
±±³          ³financeiro                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Codigo do Evento                                      ³±±
±±³          ³       [1] Implantacao de um titulo a pagar                  ³±±
±±³          ³       [2] Estorno de um titulo a pagar                      ³±±
±±³          ³       [3] Exclusao dos titulos a pagar                      ³±±
±±³          ³ExpC2: Rotina de origem                                      ³±±
±±³          ³ExpL3: Indica se atualiza os acumulados do fornecedor        ³±±
±±³          ³ExpN4: Valor do IRRF Total                                   ³±±
±±³          ³ExpN5: Valor do INSS Total                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar os eventos vinculados³±±
±±³          ³ao titulo a pagar.                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaAvalSE2(	nEvento,	cOrigem,	lUpDate,	nTotIrrf,;
                    nTotINSS,	lRtPICFCS,	nTotISS,	nBasISS,;
                    lRatImp,	cRecIss, 	cTpImp, 	aCodR, ;
                    aMotRet,lPccMR,lIrfMR,lInsMR,lIssMR,lCidMR,lSestMR, nRecTitPai, aRatirf)

Local aArea    := GetArea("SE2")
Local aAreaSE2 := SE2->(GetArea(If(nEvento==1,"SE2",Nil)))
Local cMunic   := PadR(SuperGetMv("MV_MUNIC"),Len(SE2->E2_FORNECE))
Local aFornece := {}
Local aParcela := {}
Local aRecSE2  := {}
Local nY       := 0
Local nX       := 0
Local cPrefixo := SE2->E2_PREFIXO
Local cNumero  := SE2->E2_NUM
Local cParcela := SE2->E2_PARCELA
Local cFornece := SE2->E2_FORNECE
Local cLoja    := SE2->E2_LOJA
Local cTipo    := SE2->E2_TIPO
Local cSE2Filter:= ""
Local lContrRet := .T.
Local cQuery   := ""
Local cLojaZero:= PadR("00",Len(SE2->E2_LOJA), "0" )
Local lExistFJU := FJU->(ColumnPos("FJU_RECPAI")) >0 .and. FindFunction("FinGrvEx")
Local lDelFisico :=	GetNewPar('MV_DELFSEV',.T.) 
Local cParcINP	:= " "
Local lCalcINP	:= SED->( ColumnPos("ED_CALCINP") ) > 0
Local cISS 		:= SuperGetMv("MV_ISS",,"")
Local cIRF 		:= SuperGetMv("MV_IRF",,"")
Local lCposIMA	:= (SE2->(ColumnPos("E2_IMA"))   > 0 .And. SE2->(ColumnPos("E2_PARCIMA")) > 0)
Local cChaveTit := ""
Local lTemMotor	:= FindFunction("FTemMotor")
Local lMT103TRV	:= ExistBlock("MT103TRV")
Local lAtuSA2	:= .T.
Local aIssCpom	:= {}
Local lIssCpom  := FindFunction("ISSCPOM") .and. FindFunction("BtrISS") .and. ;
                   FindFunction("BtrISSMun") .and. SE2->(ColumnPos("E2_BTRISS")) > 0 .and. ;
                   SE2->(ColumnPos("E2_VRETBIS")) > 0 .and. SE2->(ColumnPos("E2_CODSERV")) > 0

DEFAULT cOrigem := "FINA050"
DEFAULT lRtPICFCS := .T.
DEFAULT nBasISS := 0
DEFAULT lRatImp := .F.
DEFAULT cTpImp 	:= "   "
DEFAULT aCodR	:= {}

//Motor de Retenção
Default lPccMR     := .F.
Default lIrfMR     := .F.
Default lInsMR     := .F.
Default lIssMR     := .F.
Default lCidMR     := .F.
Default lSestMR    := .F.
Default aMotRet    := {}
Default nRecTitPai := SE2->(Recno())
Default aRatirf := {} 

dbSelectArea("SA2")
dbSetOrder(1)
DbSeek(xFilial("SA2")+cFornece+cLoja)
If SA2->(FieldPos("A2_MUNIC")) > 0 .And. !Empty(SA2->A2_MUNIC)
    cMunic := PadR(SA2->A2_MUNIC,Len(SE2->E2_FORNECE))
EndIf

// Transfere titulo de ISS para fornecedor de origem
If !Empty(SE2->E2_FORNISS) .And. !Empty(SE2->E2_LOJAISS)
    cMunic := SE2->E2_FORNISS+SE2->E2_LOJAISS
EndIf

aFornece := {{PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCIR",{ || .T. }},;
    {PadR(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)), PadR(cLojaZero,Len(SE2->E2_LOJA)),PadR(MVINSS,Len(SE2->E2_TIPO)),"E2_PARCINS",{ || .T. }},;
    {Left(cMunic,Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(cMunic,Len(SE2->E2_FORNECE)+1)<>"",SubStr(cMunic,Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR(MVISS,Len(SE2->E2_TIPO)),"E2_PARCISS",{ || .T. }},;
    {PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCCSS",{|| AllTrim(SE2->E2_NATUREZ) == AllTrim(SuperGetMv("MV_CSS"))}}}

aadd(aFornece,{PadR(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)),PadR(cLojaZero,Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCCSS",{|| AllTrim(SE2->E2_NATUREZ) == AllTrim(SuperGetMv("MV_CSS"))}})
aadd(aFornece,{PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCPIS",{ || .T. }})
aadd(aFornece,{PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCCOF",{ || .T. }})
aadd(aFornece,{PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCSLL",{ || .T. }})

If SuperGetMv("MV_AGL5952",, .F.)
    aadd(aFornece,{PadR(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_UNIAO'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCSLL",{ || .T. }})
EndIf

aadd(aFornece,{PadR(GetNewPar('MV_FORSEST',''),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(GetNewPar('MV_FORSEST',''),Len(SE2->E2_FORNECE)+1)<>"",SubStr(GetNewPar('MV_FORSEST',''),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('SES',Len(SE2->E2_TIPO)),"E2_PARCSES",{ || .T. }})

aadd(aFornece,{PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCFET",{ || .T. }})
aadd(aFornece,{PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCFAB",{ || .T. }})
aadd(aFornece,{PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCFAC",{ || .T. }})
If lFamad
    aadd(aFornece,{PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCFAM",{ || .T. }})
EndIf

If lCposIMA
    aadd(aFornece,{PadR(SuperGetMv('MV_RECEST') ,Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1)<>"",SubStr(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE)+1),cLojaZero),Len(SE2->E2_LOJA)),PadR('TX',Len(SE2->E2_TIPO)),"E2_PARCIMA",{ || .T. }})
Endif

aadd(aFornece,{PadR(SuperGetMv('MV_FORINSS'),Len(SE2->E2_FORNECE)), PadR(cLojaZero,Len(SE2->E2_LOJA)),"INP","",{ || .T. }})

If lIssCpom .and. SE2->E2_BTRISS > 0
    aIssCpom := BtrISSMun("P",,SE2->E2_CODSERV)
    aadd(aFornece,{PadR(aIssCpom[4],Len(SE2->E2_FORNECE)),PadR(IIf(SubStr(aIssCpom[4],Len(SE2->E2_FORNECE)+1)<>"",SubStr(aIssCpom[4],Len(SE2->E2_FORNECE)+1),aIssCpom[5]),Len(SE2->E2_LOJA)),PadR(MVISS,Len(SE2->E2_TIPO)),"E2_PARCISS",{ || .T. }})
EndIf

Do Case
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Implantacao do Titulo a Pagar                                               ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nEvento == 1
    A050DupPag(cOrigem,lUpDate,nTotIrrf,nTotINSS,lRtPICFCS,nTotISS,nBasISS,lRatImp,,cRecIss,aCodR,aMotRet,lPccMR,lIrfMR,lInsMR,lIssMR,lCidMR,lSestMR,aRatirf)
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno do Titulo a Pagar                                                   ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nEvento == 2
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Posiciona Registros                                                         ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    dbSelectArea("SA2")
    dbSetOrder(1)
    DbSeek(xFilial("SA2")+SE2->E2_FORNECE+SE2->E2_LOJA)
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Atualiza os dados do PMS                                                    ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If "FINA050"$cOrigem
        PmsWriteFI(2,"SE2")	//Estorno
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Atualiza acumulados do Fornecedor                                           ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If !SE2->E2_NATUREZ $ cISS .Or. !SE2->E2_NATUREZ $ cIRF .Or. !SE2->E2_NATUREZ $ &(SuperGetMv("MV_INSS"))

        If lMT103TRV
            lAtuSA2 := ExecBlock("MT103TRV",.F.,.F.,{SE2->E2_FORNECE,SE2->E2_LOJA,"F"})[2]
        EndIf

        // Atualiza dados da SA2 com base no documento incluido
        If lAtuSA2
            RecLock("SA2")
            If !(SE2->E2_TIPO $ MVPAGANT+"/"+MV_CPNEG+"/"+MVABATIM)
                SA2->A2_SALDUP -= Round(NoRound(xMoeda(SE2->E2_VALOR,SE2->E2_MOEDA,1,SE2->E2_EMISSAO,3),3),2)
                SA2->A2_SALDUPM-= Round(NoRound(xMoeda(SE2->E2_VALOR,SE2->E2_MOEDA,Val(SuperGetMv("MV_MCUSTO")),SE2->E2_EMISSAO,3),3),2)
            Else
                SA2->A2_SALDUP += Round(NoRound(xMoeda(SE2->E2_SALDO,SE2->E2_MOEDA,1,SE2->E2_EMISSAO,3),3),2)
                SA2->A2_SALDUPM+= Round(NoRound(xMoeda(SE2->E2_SALDO,SE2->E2_MOEDA,Val(SuperGetMv("MV_MCUSTO")),SE2->E2_EMISSAO,3),3),2)
            EndIf
        Endif
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Atualiza as multiplas naturezas                                             ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If SE2->E2_MULTNAT == "1"
        DelMultNat("SE2")
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Exclusao do Titulo a Pagar                                                  ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nEvento == 3
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Atualiza os dados do PMS                                                    ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If "FINA050"$cOrigem
        PmsWriteFI(3,"SE2")	//Exclusao
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno das multiplas naturezas                                             ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If lDelFisico
        cQuery += "DELETE FROM "+RetSqlName("SEV")+" "
        cQuery += "WHERE EV_FILIAL='"+xFilial("SEV")+"' AND "
        cQuery += "EV_PREFIXO='"+SE2->E2_PREFIXO+"' AND "
        cQuery += "EV_NUM='"+SE2->E2_NUM+"' AND "
        cQuery += "EV_PARCELA='"+SE2->E2_PARCELA+"' AND "
        cQuery += "EV_TIPO='"+SE2->E2_TIPO+"' AND "
        cQuery += "EV_CLIFOR='"+SE2->E2_FORNECE+"' AND "
        cQuery += "EV_LOJA='"+SE2->E2_LOJA+"' AND "
        cQuery += "EV_RECPAG='P' "
        TcSqlExec(cQuery)
    Else
        dbSelectArea("SEV")
        dbSetOrder(1)
        DbSeek(xFilial("SEV")+SE2->E2_PREFIXO+SE2->E2_NUM+SE2->E2_PARCELA+SE2->E2_TIPO+SE2->E2_FORNECE+SE2->E2_LOJA)
        While !Eof() .And. SEV->EV_FILIAL == xFilial("SEV") .And.;
                SEV->EV_PREFIXO == SE2->E2_PREFIXO .And.;
                SEV->EV_NUM == SE2->E2_NUM .And.;
                SEV->EV_PARCELA == SE2->E2_PARCELA .And.;
                SEV->EV_TIPO == SE2->E2_TIPO .And.;
                SEV->EV_CLIFOR == SE2->E2_FORNECE .And.;
                SEV->EV_LOJA == SE2->E2_LOJA
            If SEV->EV_RECPAG == "P"
                RecLock("SEV")
                dbDelete()
                MsUnLock()
            EndIf
            dbSelectArea("SEV")
            dbSkip()
        EndDo
    Endif

    //Exclusão dos registros gravadas pelo motor de retenção
    If lTemMotor .And. FTemMotor() .And. nRecTitPai > 0
        FinSetAPrc("SE2")
        FinDelEst("SE2", nRecTitPai, .T.)
        FinSetAPrc("")
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Exclui os titulos agregados                                                 ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If ( lCalcINP .And. SED->ED_CALCINP == "1" )
        aAreaSE2 := SE2->(GetArea())
        GetParcINP(@cParcINP)
        RestArea(aAreaSE2)
    EndIf

    For nY := 1 To Len(aFornece)
        aadd(aParcela,Iif(aFornece[nY,3] == "INP", cParcINP,SE2->(FieldGet(FieldPos(aFornece[nY,4])))))
    Next nY
    cParcINP := " "
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados ao titulo principal                          ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

    If !Empty(SE2->(DbFilter()))
        cSE2Filter := SE2->(DbFilter())
        DbselectArea("SE2")
        Set Filter To
    EndIf

    For nY := 1 To Len(aFornece)
        dbSelectArea("SE2")
        dbSetOrder(1)
        If DbSeek(xFilial("SE2")+cPrefixo+cNumero+aParcela[nY]+aFornece[nY,3]+aFornece[nY,1]+aFornece[nY,2])
            If Alltrim(SE2->E2_ORIGEM) == AllTrim(cOrigem)
                If Eval(aFornece[nY][5])
                    RecLock("SE2",.F.)
                    FaAvalSE2(2)
                    If lExistFJU
                        FinGrvEx("P")
                    Endif
                    SE2->(dbDelete())
                EndIf
            EndIf
        EndIf
    Next nY
    If !Empty(cSE2Filter)
        DbselectArea("SE2")
        Set Filter To &cSE2Filter
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados ao titulo principal                          ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    dbSelectArea("SE2")
    dbSetOrder(1)
    DbSeek(xFilial("SE2")+cPrefixo+cNumero+cParcela)
    While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
            cPrefixo == SE2->E2_PREFIXO .And.;
            cNumero == SE2->E2_NUM .And.;
            cParcela == SE2->E2_PARCELA
        If SE2->E2_TIPO $ MVABATIM .And. SE2->E2_FORNECE == cFornece .And.;
                SE2->E2_LOJA == cLoja
            If Alltrim(SE2->E2_ORIGEM) == AllTrim(cOrigem)
                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif

                SE2->(dbDelete())
            EndIf
        EndIf
        dbSelectArea("SE2")
        dbSkip()
    EndDo

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Exclui os titulos de impostos                                               ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If lContrRet
        aRecSE2 := FImpExcTit("SE2",cPrefixo,cNumero,cParcela,cTipo,cFornece,cLoja)
        For nX := 1 to Len(aRecSE2)
            SE2->(MSGoto(aRecSE2[nX]))
            If Alltrim(SE2->E2_ORIGEM) == AllTrim(cOrigem)
                // PIS,COFINS e CSLL
                If (SE2->E2_VRETPIS > 0 .Or. SE2->E2_VRETCOF > 0 .Or. SE2->E2_VRETCSL > 0) .Or. ;	// Retido nele mesmo
                   (SE2->(E2_PRETPIS == "2" .Or. E2_PRETCOF == "2" .Or. E2_PRETCSL == "2"))			// Retido em outro titulo.
                    FaAvalSE2(4)
                Endif
                //INSS
                FaAvalSE2(4,,,,,,,,,,"INS")
            EndIf
        Next

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Exclui os registros de relacionamentos do SFQ                                ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        FImpExcSFQ("SE2",cPrefixo,cNumero,cParcela,cTipo,cFornece,cLoja)

    Endif

    // Exclusão da FK7 do título "pai" (NF) ou do recolhimento.
    SE2->(dbGoTo(nRecTitPai))
    cChaveTit := xFilial("SE2") + "|" + SE2->E2_PREFIXO + "|" + SE2->E2_NUM + "|" + SE2->E2_PARCELA + "|" + ;
                                        SE2->E2_TIPO + "|" + SE2->E2_FORNECE + "|" + SE2->E2_LOJA

    // Apaga os registros referentes ao rateio do titulo
    FAvaExcRat()

    FINDELFKs(cChaveTit,"SE2")

Case nEvento == 4

    If lContrRet
        If SE2->E2_TIPO $ MV_CPNEG
            If lExistFJU
                FinGrvEx("P")
            Endif

            RecLock("SE2",.F.)
                dbDelete()
            MsUnlock()
        Else
            RecLock("SE2",.F.)
            If (cTpImp == "   ")
                SE2->E2_PRETPIS := "1"
                SE2->E2_PRETCOF := "1"
                SE2->E2_PRETCSL := "1"
            Else
                SE2->E2_PRETINS := "1"
            EndIf
            MsUnlock()
        Endif
    Endif
EndCase

RestArea(aAreaSE2)
RestArea(aArea)
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaAvalSE1 ³ Autor ³ Eduardo Riera         ³ Data ³30.12.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de avaliacao dos eventos dos titulos a receber do mo- ³±±
±±³          ³dulo financeiro                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Codigo do Evento                                      ³±±
±±³          ³       [1] Implantacao de um titulo a receber                ³±±
±±³          ³       [2] Estorno de um titulo a receber                    ³±±
±±³          ³       [3] Exclusao dos titulos a receber                    ³±±
±±³          ³       [4] Exclui titulos de PIS,COFINS e CSLL aglutinados   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar os eventos vinculados³±±
±±³          ³ao titulo a receber.                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ DATA     ³ BOPS ³Prograd.³ALTERACAO                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³02/06/05  ³080020³Marcos  ³Os campos A1_VACUM e A1_NROCOM nao devem ser ³±±
±±³          ³      ³        ³gravados qdo o modulo for o loja e o         ³±±
±±³          ³      ³        ³ cliente = cliente padrao.                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaAvalSE1(nEvento,cOrigem,nValTit,nCont,aMotRet,lPccMR,lIrfMR,lInsMR,lIssMR,lCidMR,lSestMR,nRecTitPai)

Local aImposto := {{"E1_COFINS",MVCFABT,"MV_COFINS",.F.},;
    {"E1_PIS",MVPIABT,"MV_PISNAT",.F.},;
    {"E1_CSLL",MVCSABT,"MV_CSLL",.F.},;
    {"E1_INSS",MVINABT,"MV_INSS",.F.},;
    {"E1_FETHAB","FE-","MV_FETNAT",.F.},;
    {"E1_FABOV","FB-","MV_FABNAT",.F.},;
    {"E1_FACS","FC-","MV_FACNAT",.F.},;
    {"E1_IMA","IM-","MV_IMANAT",.F.},;
    {"E1_FAMAD","FM-","MV_FAMNAT",.F.},;
    {"E1_FMPEQ","FP-","MV_FMPNAT",.F.}}
Local aRecSE1  := {}
Local nMVCusto := 0
Local cPrefixo := SE1->E1_PREFIXO
Local cNumero  := SE1->E1_NUM
Local cParcela := SE1->E1_PARCELA
Local cNatureza:= SE1->E1_NATUREZ
Local cCliFor  := SE1->E1_CLIENTE
Local cLoja    := SE1->E1_LOJA
Local cTipo    := SE1->E1_TIPO
Local cMunic   := PadR(SuperGetMv("MV_MUNIC"),Len(SE2->E2_FORNECE))
Local cUniao   := PadR(SuperGetMV("MV_UNIAO"),Len(SE2->E2_FORNECE))
Local cRect    := PadR(SuperGetMv('MV_RECEST'),Len(SE2->E2_FORNECE))
Local cLojaZero:= PadR("00",Len(SE2->E2_LOJA) , "0" )
Local nX := 0
Local nRecSE1   := 0
Local cInss		:= PadR(SuperGetMV("MV_FORINSS"),Len(SE2->E2_FORNECE))
Local lContrAbt := .T.
Local lAtuAcum  := .T. // Atualiza acumulados se o cliente não for padrão do loja.
Local nValMinRet := GetNewPar("MV_VL10925",5000)
Local nTotGrupo	:= 0
Local nBaseAtual  := 0
Local nBaseAntiga := 0
Local nProp			:= 0
Local aDadRet 		:= {,,,,,,,.F.}
Local nValorDDI 	:= 0
Local nValorDif	:= 0
Local lTemSfq 		:= .F.
Local lExcRetentor:= .F.
Local aRetencoes	:= {}
Local nRecNoExcl := 0
Local aChave := {}
Local aPenCont:= {}
Local lRet := .T.
Local cTexto 	:= ""
Local nE 		:= 0
Local nI		:= 0
Local lExistFJU := FJU->(ColumnPos("FJU_RECPAI")) >0 .and. FindFunction("FinGrvEx")
Local cISS 		:= &(SuperGetMv("MV_ISS",,""))
Local cIRF 		:= &(SuperGetMv("MV_IRF",,""))
Local cChaveTit	:= ""
Local lTemMotor	:= FindFunction("FTemMotor")

DEFAULT cOrigem := "FINA040"
DEFAULT nCont   := 0

//Motor de Retenção
Default lPccMR     := .F.
Default lIrfMR     := .F.
Default lInsMR     := .F.
Default lIssMR     := .F.
Default lCidMR     := .F.
Default lSestMR    := .F.
Default aMotRet    := {}
Default nRecTitPai := SE1->(Recno())

aChave := {SE1->E1_FILIAL,SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA}
aPenCont := FA040PenC(aChave)

If Len(aPenCont) > 0
    If IsBlind()
        For nE := 1 to Len(aPenCont)
            For nI := 1 to Len(aPenCont[nE])
                cTexto += aPenCont[nE] + Space(2)
            Next
            cTexto += chr(10) + chr(13)
        Next
        HELP(" ",1,"FPENCONT",,cTexto,1,0)
        lRet := .F.
    Else
        lRet := FA040MonP(aPenCont)
    EndIf
EndIf

If !lRet
    Return lRet
EndIf

If SE1->E1_EMISSAO >= dLastPcc
    nValMinRet	:= 0
EndIf

aChave := {SE1->E1_FILIAL,SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA}
aPenCont := FA040PenC(aChave)

If Len(aPenCont) > 0
    If IsBlind()
        For nE := 1 to Len(aPenCont)
            cTexto += aPenCont[nE] + Space(2)
            cTexto += chr(10) + chr(13)
        Next
        HELP(" ",1,"FPENCONT",,cTexto,1,0)
        lRet := .F.
    Else
        lRet := FA040MonP(aPenCont)
    EndIf
EndIf

If !lRet
    Return lRet
EndIf
If SA1->(FieldPos("A1_MUNIC")) > 0
    dbSelectArea("SA1")
    dbSetOrder(1)
    DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA)
    If !Empty(SA1->A1_MUNIC)
        cMunic := PadR(SA1->A1_MUNIC,Len(SE2->E2_FORNECE))
    EndIf
EndIf

cMunic := IIF(cPaisLoc == "BRA",IIF(!Empty(SE1->E1_FORNISS),SE1->E1_FORNISS,cMunic),cMunic)

Do Case
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Implantacao do titulo a receber                                             ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nEvento == 1
    A040DupRec(cOrigem, IIf(nValTit<>Nil,1,Nil), nValTit,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil,aMotRet,lPccMR,lIrfMR,lInsMR,lIssMR,lCidMR,lSestMR)
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno de um titulo a receber                                              ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nEvento == 2
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Atualiza os dados do PMS                                                    ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If "FINA040"$cOrigem
        PmsWriteRC(2,"SE1")
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Posiciona registros                                                         ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    dbSelectArea("SA1")
    dbSetOrder(1)
    DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA)
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorna os valores acumulados                                               ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If !cNatureza $ cISS .And. !cNatureza $ cIRF .And.;
            !cNatureza $ &(SuperGetMv("MV_INSS")) .And. !SE1->E1_TIPO $ MVPROVIS .And.;
            !cNatureza $ SuperGetMv("MV_CSLL") .And. !cNatureza $ SuperGetMv("MV_COFINS") .And.;
            !cNatureza $ SuperGetMv("MV_PISNAT")

        If SE1->E1_TIPO $ MVRECANT+"/"+MVABATIM+"/"+MV_CRNEG
            AtuSalDup("+",SE1->E1_SALDO,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO)
        Else
            nMVCusto := IIf(SA1->A1_MOEDALC>0,SA1->A1_MOEDALC,Val(SuperGetMv("MV_MCUSTO")))
            AtuSalDup("-",SE1->E1_SALDO,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO)

            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
            //³Nao atualizar os campos A1_VACUM e A1_NROCOM se o modulo for o loja³
            //³e o cliente = cliente padrao.                                      ³
            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

            If nModulo == 12 .OR. nModulo == 72 // SIGALOJA //SIGAPHOTO
                If SA1->A1_COD + SA1->A1_LOJA == GetMv("MV_CLIPAD") + GetMv("MV_LOJAPAD")
                       lAtuAcum := .F.
                EndIf
            EndIf

            If lAtuAcum
                RecLock("SA1")
                    SA1->A1_VACUM -= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,nMVCusto,SE1->E1_EMISSAO)
                    If (cOrigem == "MATA520" .And. nCont == 1) .Or. (cOrigem <> "MATA520")
                        SA1->A1_NROCOM--
                    EndIf
                MsUnLock()
            EndIf

        EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Estorno da comissao vinculada ao titulos                                    ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        Fa440DeleE(cOrigem)
    EndIf
    If SE1->E1_TIPO $ MVRECANT
        AtuSalBco( SE5->E5_BANCO, SE5->E5_AGENCIA,SE5->E5_CONTA,dDataBase,SE5->E5_VALOR,"-")
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Atualiza as multiplas naturezas                                             ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If SE1->E1_MULTNAT == "1" .And. "FINA040"$cOrigem
        DelMultNat("SE1")
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Exclusao de um titulo a receber                                             ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nEvento == 3
    nRecNoExcl := SE1->( RecNo() )

    //Exclusão dos registros gravadas pelo motor de retenção
    If lTemMotor .And. FTemMotor() .And. nRecTitPai > 0
        FinSetAPrc("SE1")
        FinDelEst("SE1", nRecTitPai, .T.)
        FinSetAPrc("")
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Verifica os impostos do titulo principal                                    ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    For nX := 1 To Len(aImposto)
        aImposto[nX][4] := SE1->(FieldGet(FieldPos(aImposto[nX][1]))) <> 0
    Next nX
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Atualiza os dados do PMS                                                    ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If "FINA040"$cOrigem
        PmsWriteRC(3,"SE1")
    EndIf
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados de ISS                                       ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If SE1->E1_ISS <> 0
        dbSelectArea("SE2")
        dbSetOrder(1)
        DbSeek(xFilial("SE2")+cPrefixo+cNumero+cParcela)
        While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                cPrefixo == SE2->E2_PREFIXO .And.;
                cNumero == SE2->E2_NUM .And.;
                cParcela == SE2->E2_PARCELA

            If AllTrim(SE2->E2_NATUREZ) == Alltrim(cISS) .And.;
                    SE2->E2_FORNECE == cMunic .And. SE2->E2_LOJA == cLojaZero.And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)

                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif

                SE2->(dbDelete())

            EndIf

            dbSelectArea("SE2")
            dbSkip()

        EndDo
    EndIf
    If cPaisLoc == "BRA"
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Estorno dos titulos vinculados de IRRF                                      ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        dbSelectArea("SE2")
        dbSetOrder(1)
        DbSeek(xFilial("SE2")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCIRF)
        While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                SE1->E1_PREFIXO == SE2->E2_PREFIXO .And.;
                SE1->E1_NUM == SE2->E2_NUM .And.;
                SE1->E1_PARCIRF == SE2->E2_PARCELA
            If AllTrim(SE2->E2_NATUREZ) == Alltrim(cIRF) .And.;
                    SE2->E2_FORNECE == cUniao .And. SE2->E2_LOJA == cLojaZero .And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)
                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif

                SE2->(dbDelete())
            EndIf
            dbSelectArea("SE2")
            dbSkip()
        EndDo
    Endif

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados de Fethab                                    ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If SE1->E1_FETHAB <> 0
        dbSelectArea("SE2")
        dbSetOrder(1)
        DbSeek(xFilial("SE2")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCFET)
        While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                SE1->E1_PREFIXO == SE2->E2_PREFIXO .And.;
                SE1->E1_NUM == SE2->E2_NUM .And.;
                SE1->E1_PARCFET == SE2->E2_PARCELA

            If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)
                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif

                SE2->(dbDelete())

            EndIf
            SE2->(dbSkip())
        EndDo
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados de IMA                                  ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If  SE1->(FieldPos("E1_IMA")) > 0 .And. SE1->E1_IMA <> 0
        dbSelectArea("SE2")
        dbSetOrder(1)
        DbSeek(xFilial("SE2")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCIMA)
        While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                SE1->E1_PREFIXO == SE2->E2_PREFIXO .And.;
                SE1->E1_NUM == SE2->E2_NUM .And.;
                SE1->E1_PARCIMA == SE2->E2_PARCELA

            If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)
                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif

                SE2->(dbDelete())

            EndIf
            SE2->(dbSkip())
        EndDo
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados de Fabov                                     ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If SE1->E1_FABOV <> 0
        dbSelectArea("SE2")
        dbSetOrder(1)
        DbSeek(xFilial("SE2")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCFAB)
        While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                SE1->E1_PREFIXO == SE2->E2_PREFIXO .And.;
                SE1->E1_NUM == SE2->E2_NUM .And.;
                SE1->E1_PARCFAB == SE2->E2_PARCELA

            If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)
                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif

                SE2->(dbDelete())
            EndIf
            SE2->(dbSkip())
        EndDo
    EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados de Facs                                      ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If SE1->E1_FACS <> 0
            dbSelectArea("SE2")
            dbSetOrder(1)
            DbSeek(xFilial("SE2")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCFAC)
            While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                    SE1->E1_PREFIXO == SE2->E2_PREFIXO .And.;
                    SE1->E1_NUM == SE2->E2_NUM .And.;
                    SE1->E1_PARCFAC == SE2->E2_PARCELA

                If SE2->E2_FORNECE == cRect .And. SE2->E2_LOJA == cLojaZero .And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)
                    RecLock("SE2")
                    FaAvalSE2(2)
                    If lExistFJU
                        FinGrvEx("P")
                    Endif
                    SE2->(dbDelete())
                EndIf
                SE2->(dbSkip())
            EndDo
        EndIf

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados de FUNRURAL                                  ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If SA1->A1_TIPO $ "L#F"
        dbSelectArea("SE2")
        dbSetOrder(1)
        DbSeek(xFilial("SE2")+cPrefixo+cNumero+cParcela)
        While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                cPrefixo == SE2->E2_PREFIXO .And.;
                cNumero == SE2->E2_NUM .And.;
                cParcela == SE2->E2_PARCELA

            If (SE2->E2_FORNECE == cUniao .or. SE2->E2_FORNECE == cInss)  .And. SE2->E2_LOJA == cLojaZero .And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)

                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif
                SE2->(dbDelete())

            EndIf

            dbSelectArea("SE2")
            dbSkip()
        EndDo
    Endif

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos de INSS gerados pela nota e fornecedores que não recolhem ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If SA1->A1_RECINSS != "S" .And. cOrigem == "MATA520"
        dbSelectArea("SE2")
        dbSetOrder(1)
        DbSeek(xFilial("SE2")+cPrefixo+cNumero+cParcela)
        While !Eof() .And. xFilial("SE2") == SE2->E2_FILIAL .And.;
                cPrefixo == SE2->E2_PREFIXO .And.;
                cNumero == SE2->E2_NUM .And.;
                cParcela == SE2->E2_PARCELA

            If (SE2->E2_FORNECE == cUniao .or. SE2->E2_FORNECE == cInss)  .And. SE2->E2_LOJA == cLojaZero .And. AllTrim(SE2->E2_ORIGEM) == AllTrim(SE1->E1_ORIGEM)

                RecLock("SE2")
                FaAvalSE2(2)
                If lExistFJU
                    FinGrvEx("P")
                Endif
                SE2->(dbDelete())

            EndIf

            dbSelectArea("SE2")
            dbSkip()
        EndDo
    Endif

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Estorno dos titulos vinculados                                              ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    SFQ->(DbSetOrder(1)) // FQ_FILIAL+FQ_ENTORI+FQ_PREFORI+FQ_NUMORI+FQ_PARCORI+FQ_TIPOORI+FQ_CFORI+FQ_LOJAORI
    If SFQ->(MsSeek(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)))
        lTemSfq := .T.
        lExcRetentor := .T.
    Else
        SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES
        If SFQ->(MsSeek(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)))
            lTemSfq := .T.
        Endif
    Endif
    If lTemSfq
        // Altera Valor dos abatimentos do titulo retentor e tambem dos titulos gerados por ele.
        nTotGrupo := F040TotGrupo(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA), Left(Dtos(SE1->E1_VENCREA),6))
        nTotGrupo -= SE1->E1_VALOR
        nBaseAtual := nTotGrupo
        nBaseAntiga := nTotGrupo+SE1->E1_VALOR
        nProp := nBaseAtual / nBaseAntiga
        aDadRet := F040AltRet(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA),nProp,0,nTotGrupo <= nValMinRet) // Altera titulo retentor
    Endif
    If lContrAbt
        If !aDadRet[8]
            SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES
            If SFQ->(MsSeek(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)))
                If nTotGrupo <= nValMinRet
                    // Exclui o relacionamento SFQ
                    SE1->(DbSetOrder(1))
                    nRecSE1 := SE1->(Recno())
                    If SE1->(MsSeek(xFilial("SE1")+SFQ->(FQ_PREFORI+FQ_NUMORI+FQ_PARCORI+FQ_TIPOORI)))
                        aRecSE1 := FImpExcTit("SE1",SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA)
                        For nX := 1 to Len(aRecSE1)
                            SE1->(MSGoto(aRecSE1[nX]))
                            FaAvalSE1(4)
                        Next
                        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                        //³ Exclui os registros de relacionamentos do SFQ                               ³
                        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                        FImpExcSFQ("SE1",SFQ->FQ_PREFORI,SFQ->FQ_NUMORI,SFQ->FQ_PARCORI,SFQ->FQ_TIPOORI,SFQ->FQ_CFORI,SFQ->FQ_LOJAORI)
                    Endif
                    SE1->(MsGoto(nRecSE1))
                Endif
                RecLock("SFQ",.F.)
                DbDelete()
                MsUnlock()
            Endif
            SFQ->(DbSetOrder(1)) // FQ_FILIAL+FQ_ENTORI+FQ_PREFORI+FQ_NUMORI+FQ_PARCORI+FQ_TIPOORI+FQ_CFORI+FQ_LOJAORI
            // Caso o total do grupo for menor ou igual ao valor minimo de acumulacao,
            // e o retentor nao estava baixado. Recalcula os impostos dos titulos do mes
            // que possivelmente foram incluidos apos a base atingir o valor minimo
            If (nTotGrupo <= nValMinRet .And. lTemSfq) .Or.;
                (lTemSfq .And. lExcRetentor)
                F040RecalcMes(SE1->E1_VENCREA,nValMinRet, SE1->E1_CLIENTE, SE1->E1_LOJA)
            Endif
        ElseIf lTemSfq
            SFQ->(DbSetOrder(2)) // FQ_FILIAL+FQ_ENTDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES
            If SFQ->(MsSeek(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)))
                RecLock("SFQ",.F.)
                DbDelete()
                MsUnlock()
            Endif
            // Gera DDI
            // Calcula valor do DDI
            nValorDif := nBaseAtual - nBaseAntiga
            //Caso a base atua seja menor que o valor minimo de retencao (MV_VL10925)
            //O DDI sera o valor total dos impostos retidos do grupo (retidos + retentor)
            //Nao retirar o -1 pois neste caso o valor da diferenca eh o valor da base antiga
            //ja que os impostos foram descontados indevidamente. (Pequim & Claudio)
            If nBaseAtual <= nValMinRet
                nValorDif := (nBaseAntiga * (-1))
            Endif
            SED->(DbSetOrder(1))
            SED->(MsSeek(xFilial("SED")+SE1->E1_NATUREZ))
            nValorDDI := Round(nValorDif * (SED->(ED_PERCPIS+ED_PERCCSL+ED_PERCCOF)/100),TamSx3("E1_VALOR")[2])
            If nValorDDI < 0
                nValorDDI	:= Abs(nValorDDI)
                // Se ja existir um DDI gerado para o retentor, calcula a diferenca do novo DDI.
                SE1->(DbSetOrder(1))
                If SE1->(MsSeek(xFilial("SE1")+aDadRet[1]+aDadRet[2]+aDadRet[3]+"DDI"))
                    If (SE1->E1_VALOR == SE1->E1_SALDO)
                        nValorDDI := nValorDDI - SE1->E1_VALOR
                        RecLock("SE1",.F.)
                        SE1->E1_VALOR := nValorDDI
                        SE1->E1_SALDO := nValorDDI
                        MsUnlock()
                    Endif
                Else
                    GeraDDINCC(	aDadRet[1]		,;
                                     aDadRet[2] 		,;
                                    aDadRet[3] 		,;
                                    "DDI"		 		,;
                                    aDadRet[5] 		,;
                                    aDadRet[6] 	 	,;
                                    aDadRet[7] 	   ,;
                                    nValorDDI		,;
                                    dDataBase		,;
                                    dDataBase		,;
                                     "APDIFIMP"		,;
                                     .F. )
                Endif
            Endif
        Endif
    Endif

    dbSelectArea("SE1")
    dbSetOrder(1)
    DbSeek(xFilial("SE1")+cPrefixo+cNumero+cParcela)
    While !Eof() .And. xFilial("SE1") == SE1->E1_FILIAL .And.;
            cPrefixo == SE1->E1_PREFIXO .And.;
            cNumero == SE1->E1_NUM .And.;
            cParcela == SE1->E1_PARCELA

        nX := aScan(aImposto,{|x| SE1->E1_TIPO $ x[2] })
        If nX <> 0 .Or. SE1->E1_TIPO $ MVABATIM +"/"+MVIRABT+"/"+MVINABT+"/"+MVFUABT +"/"+MVISABT
            If nX == 0 .Or. aImposto[nX][4]
                RecLock("SE1")
                FaAvalSE1(2)
                If lExistFJU
                    FinGrvEx("R")
                Endif
                SE1->(dbDelete())
            EndIf
        EndIf
        dbSelectArea("SE1")
        dbSkip()
    EndDo

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Exclui os titulos de impostos PIS,COFINS e CSLL                             ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If lContrAbt
        aRecSE1 := FImpExcTit("SE1",cPrefixo,cNumero,cParcela,cTipo,cCliFor,cLoja)
        For nX := 1 to Len(aRecSE1)
            SE1->(MSGoto(aRecSE1[nX]))
            FaAvalSE1(4)
        Next

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Exclui os regsitros de relacionamentos do SFQ                               ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        FImpExcSFQ("SE1",cPrefixo,cNumero,cParcela,cTipo,cCliFor,cLoja)

    Endif

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Exclui os registros da SE5 ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If cOrigem $ "|MATA520|"
        SE1->(MsGoTo(nRecNoExcl))
        F040GrvSE5(2,E1_DESDOBR=='1',,,,nRecNoExcl)

        //Deleta as informações da FK7 do título principal
        SE1->(MsGoTo(nRecNoExcl))
        cChaveTit := xFilial("SE1") + "|" + SE1->E1_PREFIXO + "|" + SE1->E1_NUM     + "|" + SE1->E1_PARCELA + "|" + ;
                                            SE1->E1_TIPO    + "|" + SE1->E1_CLIENTE + "|" + SE1->E1_LOJA

       
        //realiza a exclus?o da tabela complementar
        If cPaisLoc=="BRA" 
		    If __lTitPix .And. TitTemPIX() .And. __lTemF71
                    If __lPIXCanc
                        cIdDoc := FinBuscaFK7(cChaveTit,"SE1")
                        If !PIXCancel(xFilial("SE1", SE1->E1_FILORIG), cIdDoc)
                            DisarmTransaction()
                        EndIf
                    EndIf
			EndIf
            Fa986excl("SE1")
        EndIf
        FINDELFKs(cChaveTit, "SE1")
    EndIf
Case nEvento == 4

    If lContrAbt
        If SE1->E1_TIPO $ MV_CRNEG
            If lExistFJU
                FinGrvEx("R")
            Endif
            RecLock("SE1",.F.)
            dbDelete()
            MsUnlock()
        Else
            If FinTemSFQ(@aRetencoes)
                RecLock("SE1",.F.)
                SE1->E1_SABTPIS := aRetencoes[1][1]
                SE1->E1_SABTCOF := aRetencoes[1][2]
                SE1->E1_SABTCSL := aRetencoes[1][3]
                SE1->E1_SABTIRF := SE1->E1_IRRF
                MsUnlock()
            Else
                RecLock("SE1",.F.)
                SE1->E1_SABTPIS := Iif(SE1->E1_PIS==0,SE1->E1_SABTPIS,SE1->E1_PIS)
                SE1->E1_SABTCOF := IIF(SE1->E1_COFINS==0,SE1->E1_SABTCOF,SE1->E1_COFINS)
                SE1->E1_SABTCSL := IIF(SE1->E1_CSLL==0,SE1->E1_SABTCSL,SE1->E1_CSLL)
                SE1->E1_SABTIRF := SE1->E1_IRRF
                MsUnlock()
            Endif
        Endif
    Endif

EndCase
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaDespFin ³ Autor ³ Eduardo Riera         ³ Data ³07.06.2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de implantacao de uma despesa financeira              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do Fornecedor                                  ³±±
±±³          ³ExpC2: Loja do Fornecedor                                    ³±±
±±³          ³ExpN3: Valor do Titulo a Pagar                               ³±±
±±³          ³ExpC4: Prefixo                                          (OPC)³±±
±±³          ³ExpC5: Numero                                           (OPC)³±±
±±³          ³ExpC6: Parcela                                          (OPC)³±±
±±³          ³ExpC7: Tipo                                             (OPC)³±±
±±³          ³ExpC8: Natureza                                         (OPC)³±±
±±³          ³ExpD9: Vencto                                           (OPC)³±±
±±³          ³ExpBA: Code Block para contabilizacao                   (OPC)³±±
±±³          ³ExpCB: Rotina chamadora                                 (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo incluir uma despesa financeira ³±±
±±³          ³para o fornecedor informado                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaDespFin(	cFornece,	cLoja,		nValor,		cPrefixo,;
                    cNumero,	cParcela,	cTipo,		cNatureza,;
                    dVencto,	bCtbOnLine,	cRotina)

Local aArea    := GetArea()
Local aAreaSA2 := SA2->(GetArea())
Local aAreaSED := SED->(GetArea())

Local cMay     := ""
Local nIrrf    := 0
Local nISS     := 0
Local nINSS    := 0
Local cQuery   := ""

DEFAULT cPrefixo := Space(Len(SE2->E2_PREFIXO))
DEFAULT cParcela := SuperGetMv("MV_1DUP")
DEFAULT cTipo    := MVDUPLIC
DEFAULT dVencto  := dDataBase
DEFAULT cRotina  := "FINA050"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica a Primary Key da Titulo a pagar                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(cNumero)
    cQuery := "SELECT MAX(E2_NUM) E2_NUM "
    cQuery += "FROM "+RetSqlName("SE2")+" "
    cQuery += "WHERE E2_FILIAL='"+xFilial("SE2")+"' AND "
    cQuery += "E2_FORNECE='"+cFornece+"' AND "
    cQuery += "E2_LOJA='"+cLoja+"' AND "
    cQuery += "E2_PREFIXO='"+cPrefixo+"' AND "
    cQuery += "E2_TIPO='"+cTipo+"' AND "
    cQuery += "D_E_L_E_T_=' ' "

    cQuery := ChangeQuery(cQuery)

    dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),"FADESPFIN")

    cNumero := E2_NUM

    dbCloseArea()
    dbSelectArea("SE2")

    If Empty(cNumero)
        cNumero := StrZero(1,Len(SE2->E2_NUM))
    Else
        cNumero := Soma1(cNumero)
    EndIf
EndIf

dbSelectArea("SE2")
cMay := "SE2"+xFilial("SE2")+cFornece+cLoja+cPrefixo
dbSetOrder(6)
While ( DbSeek(cMay+cNumero+cParcela) .Or. !MayIUseCode(cMay+cNumero+cParcela) )
    If cParcela == Repl("Z",Len(SE2->E2_PARCELA))
        cNumero := Soma1(cNumero,Len(SE2->E2_NUM))
    Else
        cParcela := Soma1(cParcela)
    EndIf
EndDo

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona os registros necessarios                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SA2")
dbSetOrder(1)
DbSeek(xFilial("SA2")+cFornece+cLoja)
If Empty(cNatureza)
    cNatureza := SA2->A2_NATUREZ
EndIf

dbSelectArea("SED")
dbSetOrder(1)
DbSeek(xFilial("SED")+cNatureza)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula os impostos da Natureza                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If SED->ED_CALCIRF == "S" .And. !(SE2->E2_TIPO $ MV_CPNEG)
    IF SA2->A2_TIPO == "F"
        nIrrf := Fa050TabIR(nValor)
    Else
        nIrrf := Round((nValor * IIF(SED->ED_PERCIRF>0,SED->ED_PERCIRF,SuperGetMV("MV_ALIQIRF"))/100),2)
    EndIf
EndIf
If SED->ED_CALCISS == "S" .and. SA2->A2_RECISS <> "S"
    nIss := Round(((nValor * GetMV("MV_ALIQISS"))/100),2)
EndIf
If SED->ED_CALCINS == "S" .and. SA2->A2_RECINSS == "S"
    nInss := Round((nValor * (SED->ED_PERCINS/100)),2)
EndIf
nValor -= (nIrrf + nIss + nInss)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Implanta o Titulo a Pagar                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RecLock("SE2",.T.)
SE2->E2_FILIAL    := xFilial("SE2")
SE2->E2_PREFIXO   := cPrefixo
SE2->E2_NUM       := cNumero
SE2->E2_PARCELA   := cParcela
SE2->E2_TIPO      := cTipo
SE2->E2_FORNECE   := SA2->A2_COD
SE2->E2_LOJA      := SA2->A2_LOJA
SE2->E2_NOMFOR    := SA2->A2_NREDUZ
SE2->E2_VALOR     := Abs(nValor)
SE2->E2_EMIS1     := dDataBase
SE2->E2_EMISSAO   := dDataBase
SE2->E2_VENCTO    := dVencto
SE2->E2_VENCREA   := DataValida(SE2->E2_VENCTO,.T.)
SE2->E2_VENCORI   := SE2->E2_VENCTO
SE2->E2_SALDO     := SE2->E2_VALOR
SE2->E2_NATUREZ   := cNatureza
SE2->E2_VLCRUZ    := SE2->E2_VALOR
SE2->E2_IRRF		 := nIrrf
SE2->E2_ISS       := nIss
SE2->E2_INSS	    := nInss
SE2->E2_ORIGEM    := "FINA050"
SE2->E2_MOEDA     := 1
SE2->E2_RATEIO    := "N"
SE2->E2_FLUXO     := "S"
SE2->E2_LA        := IIf(!Empty(bCtbOnLine),"S","N")
SE2->E2_FILORIG   := cFilAnt
FaAvalSe2(1,cRotina)

If !Empty(bCtbOnLine)
    Eval(bCtbOnLine)
EndIf

RestArea(aAreaSA2)
RestArea(aAreaSED)
RestArea(aArea)
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³MaIntBxCP ³ Autor ³ Aline Correa do Vale  ³ Data ³30.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de integracao com as baixas do financeiro             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Codigo da operacao a ser efetuada                     ³±±
±±³          ³       [1] Baixa simples do financeiro                       ³±±
±±³          ³       [2] Compensacao de titulos de mesma carteira (PA/NDF) ³±±
±±³          ³ExpA2: Array com os recnos dos titulos a serem baixados      ³±±
±±³          ³ExpA3: Array com os dados da baixa simples do financeiro     ³±±
±±³          ³       [1] Motivo da Baixa                                   ³±±
±±³          ³       [2] Valor Recebido                                    ³±±
±±³          ³       [3] Banco                                             ³±±
±±³          ³       [4] Agencia                                           ³±±
±±³          ³       [5] Conta                                             ³±±
±±³          ³       [6] Data de Credito                                   ³±±
±±³          ³       [7] Data da Baixa                                     ³±±
±±³          ³ExpA4: Array com os recnos dos titulos a serem compensados   ³±±
±±³          ³ExpA5: Array com os dados da liquidacao do financeiro        ³±±
±±³          ³     {}[1] Prefixo                                           ³±±
±±³          ³       [2] Banco                                             ³±±
±±³          ³       [3] Agencia                                           ³±±
±±³          ³       [4] Conta                                             ³±±
±±³          ³       [5] Numero do Cheque                                  ³±±
±±³          ³       [6] Data Boa                                          ³±±
±±³          ³       [7] Valor                                             ³±±
±±³          ³       [8] Tipo                                              ³±±
±±³          ³       [9] Natureza                                          ³±±
±±³          ³       [A] Moeda                                             ³±±
±±³          ³ExpA6: Array com os parametros da rotina                     ³±±
±±³          ³       [1] Contabiliza On-Line                               ³±±
±±³          ³       [2] Aglutina Lancamentos Contabeis                    ³±±
±±³          ³       [3] Digita lancamentos contabeis                      ³±±
±±³          ³       [4] Juros para Comissao                               ³±±
±±³          ³       [5] Desconto para Comissao                            ³±±
±±³          ³       [6] Calcula Comiss s/NCC                              ³±±
±±³          ³ExpB7: Bloco de codigo a ser executado apos o processamento  ³±±
±±³          ³       da rotina, abaixo os parametro passados               ³±±
±±³          ³       [1] Recno do titulo baixado                           ³±±
±±³          ³       [2] Codigo a ser informado para cancelamento futuro.  ³±±
±±³          ³ExpA8: Utilizado quando deve-se estornar uma das baixas efe- ³±±
±±³          ³       tuadas. Para tanto, deve-se informar o codigo informa-³±±
±±³          ³       do no codeBlock anterior.                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpC1: Primary Key do documento gerado.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a integracao com as bai³±±
±±³          ³xas do modulo financeiro e os titulos gerados pelo modulo de ³±±
±±³          ³faturamento                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
#DEFINE CP_MOTBX   1
#DEFINE CP_VLRREC  2
#DEFINE CP_BANCO   3
#DEFINE CP_AGENCIA 4
#DEFINE CP_CONTA   5
#DEFINE CP_DTBAIXA 6
#DEFINE CP_DTCRED  7

#DEFINE LQ_PREFIXO  1
#DEFINE LQ_BANCO    2
#DEFINE LQ_AGENCIA  3
#DEFINE LQ_CONTA    4
#DEFINE LQ_NROCHQ   5
#DEFINE LQ_DATABOA  6
#DEFINE LQ_VALOR    7
#DEFINE LQ_TIPO     8
#DEFINE LQ_NATUREZA 9
#DEFINE LQ_MOEDA	10
#DEFINE LQ_DATALIQ  11
#DEFINE LQ_FORNECE	12
#DEFINE LQ_LOJA		13

Function MaIntBxCP(nCaso, aSE2, aBaixa, aNDF_PA, aLiquidacao, aParam, bBlock, aEstorno, aNDFDados, nSaldoComp, dBaixaCMP, nTaxaCM, nHdl, aRecSE5, lHelp)
    Local lRet := .F.

    Default nCaso       := 0
    Default aSE2        := {}
    Default aBaixa      := {}
    Default aNDF_PA     := {}
    Default aLiquidacao := {}
    Default aParam      := {}
    Default bBlock      := {|| .T.}
    Default aEstorno    := {}
    Default aNDFDados   := {}
    Default nSaldoComp  := 0
    Default dBaixaCMP   := dDatabase
    Default nTaxaCM     := 0
    Default nHdl        := 0
    Default aRecSE5		:= {}
    Default lHelp       := .F.

    If Val(SuperGetMV("MV_FINFIX", .F., '0')) > 16
        lRet    := FinCmpAFK(aSE2, aNDF_PA, aParam, bBlock, aEstorno, nSaldoComp, dBaixaCMP, nTaxaCM, Nil, nHdl, Nil, aRecSE5,aNDFDados, lHelp)
    Else
        lRet    := FinCmpAut(aSE2, aNDF_PA, aParam, bBlock, aEstorno, nSaldoComp, dBaixaCMP, nTaxaCM, Nil, nHdl, Nil, aRecSE5,aNDFDados, lHelp)
    EndIf

Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaVlAtuCP ³ Autor ³ Eduardo Riera         ³ Data ³04.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Calcula os valores financeiros do Contas a Pagar             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Contas a Pagar                          (OPC)³±±
±±³          ³       DEFAULT = "SE2"                                       ³±±
±±³          ³ExpD2: Data da Baixa                                    (OPC)³±±
±±³          ³       DEFAULT = dDataBase                                   ³±±
±±³          ³ExpC3: Motivo da Baixa                                  (OPC)³±±
±±³          ³ExpL4: Indica se somente o saldo e o valor original serao    ³±±
±±³          ³       demonstrados.                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpA1: Array com a seguinte estrutura                        ³±±
±±³          ³       [1] Valor Original do Titulo                          ³±±
±±³          ³       [2] Abatimentos                                       ³±±
±±³          ³       [3] Pagto Parcial                                     ³±±
±±³          ³       [4] Decrescimo                                        ³±±
±±³          ³       [5] Acrescimo                                         ³±±
±±³          ³       [6] Saldo do Titulo na Moeda do Titulo                ³±±
±±³          ³       [7] Saldo do Titulo na Moeda Corrente                 ³±±
±±³          ³       [8] Juros                                             ³±±
±±³          ³       [9] Desconto                                          ³±±
±±³          ³       [A] Correcao Monetaria                                ³±±
±±³          ³       [B] Valor a ser Recebido na moeda do titulo           ³±±
±±³          ³       [C] Valor a ser Recebido na moeda corrente            ³±±
±±³          ³       [D] Saldo Decrescimo                                  ³±±
±±³          ³       [E] Saldo Acrescimo                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo calcular os valores finaceiros ³±±
±±³          ³do titulo atual conforme os parametros solicitados.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaVlAtuCP(	cAliasSE2,	dBaixa,	cMotBx,	lTitulo, nTxMoeda, nTaxad, nTaxaCM, nVlrPagto)
Local aRetorno  := {}
Local nSldMdCP  := 0
Local nRecMdCP  := 0
Local nPagar    := 0
Local nSaldo    := 0
Local nParciais := 0
Local nVlrAbat  := 0
Local nJuros    := 0
Local nDesconto := 0
Local nTaxa		:= nTaxaCM
Local nDescresc	:= 0
Local nAcresc	:= 0
Local nSldDecre	:= 0
Local nSldAcres	:= 0

Default cAliasSE2 := "SE2"
Default dBaixa    := dDataBase
Default cMotBx    := "NOR"
Default lTitulo   := .F.
Default nTxMoeda  := 0
Default nVlrPagto := 0

//Valor Original do Titulo
Aadd(aRetorno,(cAliasSE2)->E2_VALOR)

//Abatimentos
If !lTitulo
    nVlrAbat := FaAbatCP((cAliasSE2)->E2_PREFIXO,(cAliasSE2)->E2_NUM,(cAliasSE2)->E2_PARCELA,(cAliasSE2)->E2_FORNECE,(cAliasSE2)->E2_LOJA,(cAliasSE2)->E2_MOEDA,"S",dBaixa)
    Aadd(aRetorno,nVlrAbat)
Else
    Aadd(aRetorno,0)
EndIf

//Pagamentos Parciais
nParciais := (cAliasSE2)->E2_VALOR - (cAliasSE2)->E2_SALDO
Aadd(aRetorno,nParciais)

//Decrescimo
nDescresc := (cAliasSE2)->E2_DECRESC
Aadd(aRetorno,nDescresc)

//Acrescimo
nAcresc	:= (cAliasSE2)->E2_ACRESC
Aadd(aRetorno,nAcresc)

//Saldo do Titulo
nSldMdCP := Max((cAliasSE2)->E2_SALDO - nVlrAbat,0)
Aadd(aRetorno,nSldMdCP)

//Saldo do Titulo na Moeda Corrente
If AllTrim(SE2->E2_ORIGEM) == "SIGAEIC" .Or. FwIsInCallStack("GREEMBOLSO")
    nSaldo := xMoeda(nSldMdCP, (cAliasSE2)->E2_MOEDA, SE2->E2_MOEDA, dBaixa, 10, nTxMoeda)
Else
    nSaldo := xMoeda(nSldMdCP,( cAliasSE2)->E2_MOEDA, 1, dBaixa, 10, nTxMoeda)
EndIf

Aadd(aRetorno,nSaldo)

//Juros
If !lTitulo
    nJuros := FaJuros((cAliasSE2)->E2_VALOR,nSldMdCP,(cAliasSE2)->E2_VENCTO,(cAliasSE2)->E2_VALJUR,(cAliasSE2)->E2_PORCJUR,(cAliasSE2)->E2_MOEDA,(cAliasSE2)->E2_EMISSAO,dBaixa,,,(cAliasSE2)->E2_VENCREA)
    Aadd(aRetorno,nJuros)
Else
    Aadd(aRetorno,0)
EndIf

//Descontos
nDesconto := 0
Aadd(aRetorno,nDesconto)

//Calcula o valor a receber
nRecMdCP := nSldMdCP+xMoeda(nJuros-nDesconto,1,(cAliasSE2)->E2_MOEDA,dBaixa,10)
nPagar := nSaldo+nJuros-nDesconto

//Correcao Monetaria
If !lTitulo
    Aadd(aRetorno, FaCMCP(cAliasSE2, aRetorno[1], cMotBx, dBaixa, nSldMdCP, nTxMoeda, nTaxad, nTaxa, nVlrPagto))
Else
    Aadd(aRetorno,0)
EndIf

//Valor a Receber
aadd(aRetorno,nRecMdCP)
Aadd(aRetorno,nPagar)

//Saldo Decrescimo
nSldDecre := (cAliasSE2)->E2_SDDECRE
Aadd(aRetorno,nSldDecre)

//Saldo Acrescimo
nSldAcres	:= (cAliasSE2)->E2_SDACRES
Aadd(aRetorno,nSldAcres)

Return(aRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FaCMCP    ³ Autor ³ Eduardo Riera         ³ Data ³01.09.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Calculo da Correcao Monetaria                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Contas a Receber                             ³±±
±±³          ³ExpN2: Valor Recebido na Moeda do Contas a Pagar             ³±±
±±³          ³ExpC3: Codigo do motivo da baixa                        (OPC)³±±
±±³          ³ExpD4: Data da Baixa                                    (OPC)³±±
±±³          ³ExpN5: Valor Original na Moeda do Contas a Pagar        (OPC)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1: Valor da Correcao Monetaria                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo calcular o valor da variacao   ³±±
±±³          ³monetaria entre a data da ultima variacao ou a data de emis- ³±±
±±³          ³sao (caso nao tenha sofrido nenhuma variacao), e a data de   ³±±
±±³          ³baixa, tomando-se como base o valor original ou o valor rece-³±±
±±³          ³bido conforme o parametro MV_TIPOCM.                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FaCMCP(cSE2, nVlRecMdCP, cMotBx, dBaixa, nVlOrMdCP, nTaxaMoed, nTaxad, nTaxaCM, nVlrPagto)
    Local nVlrOrigCP := 0
    Local nVlrAtuCP  := 0
    Local nBaseCM    := 0
    Local nVlrCM     := 0
    Local dDataCM    := Nil
    Local nTaxa      := 0
    Local lGerCm     := .T.
    Local lCalcCM    := .T.
    Local lCmTxCon   := .F.
    Local nCasDec    := 0
    Local lF0870CM   := ExistBlock("F0870CM")

    Default cSE2       := "SE2"
    Default nVlOrMdCP  := (cSE2)->E2_VALOR
    Default nVlRecMdCP := nVlOrMdCP
    Default cMotBx     := "NOR"
    Default dBaixa     := dDataBase
    Default nTaxaMoed  := 0
    Default nTaxad     := 0
    Default nTaxaCM    := 0
    Default nVlrPagto  := 0

    If cPaisLoc == "BRA"
        lCalcCM := SuperGetMv("MV_CALCCM", .F., "N") == "S"

        If lCalcCM
            lCmTxCon   := SuperGetMv("MV_CMTXCON", .F., .F.)

            If lCmTxCon .And. (cSE2)->E2_TIPO $ MVPAGANT
                lGerCm := .F.
            ElseIf !lCmTxCon
                lGerCm := Empty((cSE2)->E2_TXMOEDA)
            EndIf
        EndIf
    EndIf

    If lCalcCM .And. lGerCm .And. (cSE2)->E2_MOEDA > 1
        //Inicializa variáveis.
        nCasDec := (MsDecimais(1) + 1)
        nBaseCM := If(SuperGetMv("MV_TIPOCM", .F., "T") == "O", nVlOrMdCP, nVlRecMdCP)
        dDataCM := If(Empty((cSE2)->E2_DTVARIA), (cSE2)->E2_EMISSAO, (cSE2)->E2_DTVARIA)
        nTaxa   := nTaxaCM

        If lF0870CM
            nVlrCm := Execblock("F080CM",.F.,.F.)
        ElseIf lCmTxCon .And. nVlrPagto > 0//A variação da NF ocorre em relação ao pagamento
            nVlrAtuCP := Round(NoRound(xMoeda(nBaseCM, (cSE2)->E2_MOEDA, 1, dBaixa, nCasDec, (cSE2)->E2_TXMOEDA), 3), 2)
            nVlrCm    := (nVlrAtuCP - nVlrPagto)
        Else
            nVlrOrigCP := Round(NoRound(xMoeda(nBaseCM, (cSE2)->E2_MOEDA, 1, dDataCM, nCasDec, nTaxaMoed), 3), 2)

            If cMotBx == "DEV"
                nVlrAtuCP := Round(NoRound(xMoeda(nBaseCM, (cSE2)->E2_MOEDA, 1, (cSE2)->E2_EMISSAO, nCasDec, nTaxa), 3), 2)
            Else
                nVlrAtuCP := Round(NoRound(xMoeda(nBaseCM, (cSE2)->E2_MOEDA, 1, dBaixa, nCasDec, nTaxaCM), 3), 2)
            EndIf

            nVlrCm := nVlrAtuCP - nVlrOrigCP
        EndIf
    EndIf
Return(nVlrCm)

//-------------------------------------------------------------------
/*/{Protheus.doc} FaCmpCP 
Rotina de Compensasao do Contas a Pagar 

Esta função foi movida para o FINXOLD por não ter chamado em nenhum
fonte da MASTER no TFS

@param aTitulo		Array com os dados do titulo principal
       					[1] Abatimento (-)
	   					[2] Descrescimo (-)
						[3] Acrescimo   (+)
						[4] Variacao Monetaria (=)
@param aCompensar	Array com os dados do titulos a compensar
						{}[1] RecNo do Titulo a compensar	
						  [2] Valor do Titulo a compensar na moeda do Titulos principal
						  [3] Valor do Abatimento da NDF
						  [4] Data da Baixa  (OPC)		
						  [5] Numero de Lote para contabilizacao (OPC)
						  [6] Data a ser considerar para converte o valor do titulo principal para a moeda corrente  (OPC)
						  [7] Taxa da moeda a ser considerada para converte o valor do titulo principal para a moeda corrente (OPC)
						  [8] Numero de decimais utilizado nas conversoes. (OPC)
						  [9] Numero de decimais utilizado nas conversoes. (OPC)
						  [10] Valor da Variacao Monetaria	(OPC)
@param lLctPad		Indica se a compensacao sera contabilizada (OPC)
@param cOrigem		Indica o programa de origem da compensacao (OPC)
@param bContabil	Bloco de codigo para contabilizacao (OPC)
@param bBlock		Bloco de codigo apos cada compensacao. Recebe o E5_DOCUMEN como parametro (OPC)
@param aEstorno		Codigo da amarracao entre o titulo compensado e o adiantamento ( E5_DOCUMEN ). Quando informado indica uma operacao de estorno. (OPC)
@param lHeadProva	Informa se o HeadProva já foi criado na rotina chamadora

@author Eduardo Riera 
@since 11/08/2003
/*/
//-------------------------------------------------------------------
Function FaCmpCP(aTitulo, aCompensar, lLctPad, cOrigem, bContabil, bBlock, aEstorno, lHeadProva)

Local lRet := .T.

DEFAULT lLctPad     := .F.
DEFAULT lHeadProva  := .F.
DEFAULT cOrigem     := "FINA340"
DEFAULT bContabil   := {|| .T.}
DEFAULT bBlock      := {|| .T.}

If FindFunction ("FCmpCPOLD")
	lRet := FCmpCPOLD(aTitulo, aCompensar, lLctPad, cOrigem, bContabil, bBlock, aEstorno, lHeadProva)
Else
	Alert(STR0050)  //'Por favor, solicite ao administrador do sistema que seja atualizado o fonte FINXOLD.PRX'
Endif	

Return(lRet)


/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FImpExcTit³ Autor ³ Eduardo Riera         ³ Data ³11.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Funcao que traz os registros do titulo aglutinador           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do registro  do titulo principal                ³±±
±±³          ³       SE1                                                   ³±±
±±³          ³       SE2                                                   ³±±
±±³Parametros³ExpC2: Prefixo                                               ³±±
±±³Parametros³ExpC3: Numero                                                ³±±
±±³Parametros³ExpC4: Parcela                                               ³±±
±±³Parametros³ExpC5: Tipo                                                  ³±±
±±³Parametros³ExpC6: Cliente                                               ³±±
±±³Parametros³ExpC7: Loja                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo trazer os registros relacionau-³±±
±±³          ³dos ao titulo aglutinador                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FImpExcTit(	cAlias,		cPrefixo,		cNumero,		cParcela,;
                        cTipo,		cCliFor,		cLoja, 			aTpImp, cSeq)
Local aRecnos := {}
Local aArea   := GetArea()
Local aAreaSE1:= SE1->(GetArea())
Local aAreaSE2:= SE2->(GetArea())
Local lMultFil:= .F.
Local aAreaSFQ:= SFQ->(GetArea())
Local lQuery  := .F.
Local cQuery  := ""
Local lAddRec := .T.

Default aTpImp := {}
Default cSeq   := ""

If (cAlias $ "SE1#SE2")

    lMultFil:= .T.

    cAliasSFQ := "SFQQUERY"

    If cAlias == "SE1"

        lQuery := .T.

        cQuery := "SELECT SE1.R_E_C_N_O_ RECTIT,E1_FILIAL"

        If lMultFil
            cQuery += ",FQ_FILDES"
        Endif

        cQuery += ",FQ_TPIMP

        cQuery += " FROM "
        cQuery += RetSqlName("SE1") + " SE1, "
        cQuery += RetSqlName("SFQ") + " SFQ "
        cQuery += " WHERE "

        If !lMultFil
            cQuery += "E1_FILIAL  = '"+xFilial("SE1")+"' AND "
        Endif

        cQuery += "E1_PREFIXO = FQ_PREFDES AND "
        cQuery += "E1_NUM     = FQ_NUMDES  AND "
        cQuery += "E1_PARCELA = FQ_PARCDES AND "
        cQuery += "E1_TIPO    = FQ_TIPODES AND "
        cQuery += "E1_CLIENTE = FQ_CFDES   AND "
        cQuery += "E1_LOJA    = FQ_LOJADES AND "
        cQuery += "SE1.D_E_L_E_T_ = ' '    AND "

        cQuery += "FQ_FILIAL  = '"+xFilial("SFQ")+"' AND "
        If FunName() == "FINA070"
            cQuery += "FQ_ENTORI  = '"+ cAlias+   "' AND "
        EndIf
        cQuery += "FQ_PREFORI = '"+ cPrefixo+ "'     AND "
        cQuery += "FQ_NUMORI  = '"+ cNumero+ "'      AND "
        cQuery += "FQ_PARCORI = '"+ cParcela+ "'     AND "
        cQuery += "FQ_TIPOORI = '"+ cTipo+ "'        AND "
        cQuery += "FQ_CFORI   = '"+ cCliFor+ "'      AND "
        cQuery += "FQ_LOJAORI = '"+ cLoja+ "'        AND "
        cQuery += "SFQ.D_E_L_E_T_ = ' ' "

        cQuery := ChangeQuery(cQuery)

        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSFQ,.T.,.T.)

    Else

        lQuery := .T.

        cQuery := "SELECT SE2.R_E_C_N_O_ RECTIT,E2_FILIAL"

        cQuery += ",FQ_TPIMP

        If lMultFil
            cQuery += ",FQ_FILDES"
        Endif

        cQuery += " FROM "
        cQuery += RetSqlName("SE2") + " SE2, "
        cQuery += RetSqlName("SFQ") + " SFQ "
        cQuery += " WHERE "

        If !lMultFil
            cQuery += "E2_FILIAL  = '"+xFilial("SE2")+"' AND "
        Endif
        cQuery += "E2_PREFIXO = FQ_PREFDES AND "
        cQuery += "E2_NUM     = FQ_NUMDES  AND "
        cQuery += "E2_PARCELA = FQ_PARCDES AND "
        cQuery += "E2_TIPO    = FQ_TIPODES AND "
        cQuery += "E2_FORNECE = FQ_CFDES   AND "
        cQuery += "E2_LOJA    = FQ_LOJADES AND "
        cQuery += "SE2.D_E_L_E_T_ = ' '    AND "

        cQuery += "FQ_FILIAL  = '"+xFilial("SFQ")+"' AND "
        cQuery += "FQ_ENTORI  = '"+ cAlias+   "' AND "
        cQuery += "FQ_PREFORI = '"+ cPrefixo+ "' AND "
        cQuery += "FQ_NUMORI  = '"+ cNumero+  "' AND "
        cQuery += "FQ_PARCORI = '"+ cParcela+ "' AND "
        cQuery += "FQ_TIPOORI = '"+ cTipo+ "'    AND "
        cQuery += "FQ_CFORI   = '"+ cCliFor+ "'  AND "
        cQuery += "FQ_LOJAORI = '"+ cLoja+ "'    AND "
        If !Empty(cSeq)
            cQuery += "FQ_SEQORI  = '"+ cSeq+ "'    AND "
        EndIf
        cQuery += "SFQ.D_E_L_E_T_ = ' ' "

        cQuery := ChangeQuery(cQuery)

        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSFQ,.T.,.T.)

    Endif

    While (cAliasSFQ)->(!Eof())
        lAddRec := .T.

        If cAlias == "SE2"
            If lMultFil
                If !Empty(xFilial("SE2"))
                    If Empty((cAliasSFQ)->FQ_FILDES)
                        lAddRec := (xFilial("SE2") == (cAliasSFQ)->E2_FILIAL)
                    Else
                        lAddRec := ((cAliasSFQ)->E2_FILIAL == (cAliasSFQ)->FQ_FILDES)
                    Endif
                Else
                    lAddRec := (xFilial("SE2") == (cAliasSFQ)->E2_FILIAL)
                Endif
            Endif
        Endif

        If cAlias == "SE1"
            If lMultFil
                If !Empty(xFilial("SE1"))
                    If Empty((cAliasSFQ)->FQ_FILDES)
                        lAddRec := (xFilial("SE1") == (cAliasSFQ)->E1_FILIAL)
                    Else
                        lAddRec := ((cAliasSFQ)->E1_FILIAL == (cAliasSFQ)->FQ_FILDES)
                    Endif
                Else
                    lAddRec := (xFilial("SE1") == (cAliasSFQ)->E1_FILIAL)
                Endif
            Endif
        Endif

        If lAddRec
            Aadd(aRecnos,(cAliasSFQ)->RECTIT)
            Aadd(aTpImp,(cAliasSFQ)->FQ_TPIMP)
        Endif
        (cAliasSFQ)->(dbSkip())
    EndDo

    If lQuery
        dbSelectArea(cAliasSFQ)
        dbCloseArea()
        dbSelectArea("SFQ")
    EndIf

Endif

SFQ->(RestArea(aAreaSFQ))
SE1->(RestArea(aAreaSE1))
SE2->(RestArea(aAreaSE2))
RestArea(aArea)

Return(aRecnos)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FImpExcSFQ³ Autor ³ Eduardo Riera         ³ Data ³11.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Funcao que exclui os registro s de relacionamento de titulos ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do registro  do titulo principal                ³±±
±±³          ³       SE1                                                   ³±±
±±³          ³       SE2                                                   ³±±
±±³Parametros³ExpC2: Prefixo                                               ³±±
±±³Parametros³ExpC3: Numero                                                ³±±
±±³Parametros³ExpC4: Parcela                                               ³±±
±±³Parametros³ExpC5: Tipo                                                  ³±±
±±³Parametros³ExpC6: Cliente                                               ³±±
±±³Parametros³ExpC7: Loja                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo trazer os registros relacionau-³±±
±±³          ³dos ao titulo aglutinador                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FImpExcSFQ(cAlias,		cPrefixo,	cNumero,	cParcela,;
                    cTipo,		cCliFor,	cLoja)

Local aAreaSfq := SFQ->(GetArea())
Local aArea := GetArea()
Local lPCCBaixa := SuperGetMv("MV_BX10925",.T.,"2") == "1"

Local lInssBx 	:=	SuperGetMv("MV_INSBXCP",.F.,"2") == "1"

Local lAplMinP := SA2->A2_MINPUB == "2"
Local lIRPFBaixa:= .F.
Local lEmpPub:= .F.

If cPaisLoc == "BRA"
    lIRPFBaixa	:= Posicione("SA2",1,xfilial("SA2") + SE2->E2_FORNECE + SE2->E2_LOJA,"A2_CALCIRF") == "2"
EndIf

lEmpPub :=  IsEmpPub() .And. lIRPFBaixa .And. lAplMinP


SFQ->(dbSetOrder(1))
If SFQ->(DbSeek(xFilial("SFQ")+cAlias+cPrefixo+cNumero+cParcela+cTipo+cClifor+cLoja))
    While SFQ->(!Eof()) .And. SFQ->FQ_FILIAL == xFilial("SFQ") .And.;
                               SFQ->FQ_ENTORI == cAlias    .And. ;
                                SFQ->FQ_PREFORI == cPrefixo .And.;
                                SFQ->FQ_NUMORI  == cNumero  .And.;
                                SFQ->FQ_PARCORI == cParcela .And. ;
                                SFQ->FQ_TIPOORI == cTipo    .And. ;
                                SFQ->FQ_CFORI   == cCliFor  .And.;
                                SFQ->FQ_LOJAORI == cloja

        If lPCCBaixa .And. ;
            ((SE2->E2_TIPO $ MVPAGANT .And. cAlias == "SE5") .OR. ;	//Se for PA (geracao de tx's pela emissao), corrige os E5_PRET.
            cAlias == "E1B") 										//Se for retido pelo FINA061 (Bordero CR com impostos)
            SE5->(DbSetOrder(7))
            If SE5->(MsSeek(xFilial("SE5")+SFQ->(FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES)))
                RecLock("SE5",.F.)
                SE5->E5_PRETPIS := "1"
                SE5->E5_PRETCOF := "1"
                SE5->E5_PRETCSL := "1"
                If lEmpPub
                        SE5->E5_PRETIRF := "1"
                    EndIf
                MsUnlock()
            EndIf
        EndIf

        If lIRPFBaixa .And. Alltrim(SFQ->FQ_ENTORI) == cAlias .And. SFQ->FQ_TPIMP == "IRF" .And. cAlias == "SE2"//IR Baixa
            SE2->(DbSetOrder(1))
            If SE2->(DbSeek(SFQ->(FQ_FILDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES)))
                RecLock("SE2",.F.)
                SE2->E2_PRETIRF := "1"
                MsUnlock()
            EndIf
        EndIf

        If SFQ->FQ_TPIMP == "INS"
            SE2->(DbSetOrder(1))
            If SE2->(DbSeek(SFQ->(FQ_FILDES+FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES)))
                RecLock("SE2",.F.)
                SE2->E2_PRETINS := "1"
                MsUnlock()
            EndIf
        EndIf

        If lInssBx .And. Alltrim(SFQ->FQ_ENTORI) == "SE5" .And. SFQ->FQ_TPIMP == "INS"//Inss Baixa
            SE5->(DbSetOrder(7))
            If SE5->(DbSeek(xFilial("SE5")+SFQ->(FQ_PREFDES+FQ_NUMDES+FQ_PARCDES+FQ_TIPODES+FQ_CFDES+FQ_LOJADES)))
                RecLock("SE5",.F.)
                SE5->E5_PRETINS := "1"
                MsUnlock()
            EndIf
            RecLock("SFQ",.F.)
            SFQ->(dbDelete())
            MsUnlock()
        ElseIf	SE5->E5_SEQ == SFQ->FQ_SEQORI
            RecLock("SFQ",.F.)
            SFQ->(dbDelete())
            MsUnlock()
        Endif
        SFQ->(dbSkip())
    EndDo
Endif

SFQ->(RestArea(aAreaSfq))
RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ADupCredRt³Autor  ³ Henry Fila            ³ Data ³27.09.04  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Gera titulo de Credito para fornecedor no caso de retencao  ³±±
±±³			 ³seja menor do que zero         							        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ADupCredRt()                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Valor do Titulo                                    ³±±
±±³			 ³ ExpC2 = Codigo do TES                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function ADupCredRt(nValtot,cTes,nMoeda,lSFQ)
Local aArea      := GetArea()
Local cParcela   := ""
Local nTamParc   := 0
Local cPrefOri   := ""
Local cNumOri    := ""
Local cParcOri   := ""
Local cTipoOri   := ""
Local cCfOri     := ""
Local cLojaOri   := ""
Local cNatOri    := ""

//1-Cria NCC/NDF referente a diferenca de impostos entre emitidos (SE2) e retidos (SE5)
//2-Nao Cria NCC/NDF, ou seja, controla a diferenca num proximo titulo
//3-Nao Controla
Local cNccRet  := SuperGetMv("MV_NCCRET",.F.,"1")

DEFAULT nMoeda   := 1
DEFAULT lSFQ     := .T.

If cNccRet == "1"

    If cTes > "500"
        cArqSA := "SA2"
        cArqSE := "SE2"

        cPrefOri   := SE2->E2_PREFIXO
        cNumOri    := SE2->E2_NUM
        cParcOri   := SE2->E2_PARCELA
        cTipoOri   := SE2->E2_TIPO
        cCfOri     := SE2->E2_FORNECE
        cLojaOri   := SE2->E2_LOJA
        cNatOri    := SE2->E2_NATUREZ
    Else
        cArqSA := "SA1"
        cArqSE := "SE1"
        cPrefOri   := SE1->E1_PREFIXO
        cNumOri    := SE1->E1_NUM
        cParcOri   := SE1->E1_PARCELA
        cTipoOri   := SE1->E1_TIPO
        cCfOri     := SE1->E1_CLIENTE
        cLojaOri   := SE1->E1_LOJA
        cNatOri    := SE1->E1_NATUREZ
    EndIf

    DbSelectArea(cArqSA) 	 // Posiciona o arquivo de cliente/fornecedor
    dbSetOrder(1)
    DbSeek(cFilial+cCfOri+cLojaOri)

    If cArqSE == "SE2"

        dbSelectArea("SE2")
        dbSetOrder(1)

        cParcela := SE2->E2_PARCELA
        nTamParc := Len(SE2->E2_PARCELA)

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Busca a parcela de acordo com o titulo                                      ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        While DbSeek(xFilial("SE2")+cPrefOri+cNumOri+cParcela+left(MV_CPNEG,3)+cCfOri+cLojaOri)
            cParcela := Soma1(cParcela,nTamParc)
        EndDo

        RecLock(cArqSE,.T.)
        SE2->E2_NOMFOR  := SA2->A2_NREDUZ
        SE2->E2_EMIS1   := dDataBase
        SE2->E2_BAIXA   := CtoD("  /  /  ")
        SE2->E2_SALDO   := nValTot
        SE2->E2_FILIAL  := cFilial
        SE2->E2_PREFIXO := cPrefOri
        SE2->E2_NUM     := cNumOri
        SE2->E2_PARCELA := cParcela
        SE2->E2_NATUREZ := cNatOri
        SE2->E2_TIPO    := left(MV_CPNEG,3)
        SE2->E2_VALOR   := nValTot
        SE2->E2_EMISSAO := dDataBase
        SE2->E2_VALOR   := nValTot
        SE2->E2_VENCTO  := dDataBase
        SE2->E2_VENCREA := dDatabase
        SE2->E2_VENCORI := dDatabase
        SE2->E2_FORNECE := cCfOri
        SE2->E2_LOJA    := cLojaOri
        SE2->E2_NOMFOR  := SA2->A2_NREDUZ
        SE2->E2_MOEDA   := nMoeda
        SE2->E2_VLCRUZ  := Round(NoRound(xMoeda(SE2->E2_VALOR,nMoeda,1,SE2->E2_EMISSAO,3),3),2)
        SE2->E2_ORIGEM  := "MATA460"

        If ExistBlock("FPCCSE2")
            ExecBlock("FPCCSE2",.F.,.F.)
        Endif

        DbSelectArea( "SA2" )
        RecLock("SA2")
        SA2->A2_SALDUP  := A2_SALDUP - Round(NoRound(xMoeda(SE2->E2_VALOR,SE2->E2_MOEDA,1,SE2->E2_EMISSAO,3),3),2)
        SA2->A2_SALDUPM := A2_SALDUPM - Round(NoRound(xMoeda(SE2->E2_VALOR,SE2->E2_MOEDA,Val(GetMv("MV_MCUSTO")),SE2->E2_EMISSAO,3),3),2)

        If SA2->A2_SALDUPM > SA2->A2_MSALDO
            SA2->A2_MSALDO := SA2->A2_SALDUPM
        EndIf

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Grava no arquivo de amarracao o titulo x NCC ou NDF                         ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If lSFQ
            dbSelectArea("SFQ")
            RecLock("SFQ",.T.)
            SFQ->FQ_FILIAL  := xFilial("SFQ")
            SFQ->FQ_ENTORI  := cArqSE
            SFQ->FQ_PREFORI := cPrefOri
            SFQ->FQ_NUMORI  := cNumOri
            SFQ->FQ_PARCORI := cParcOri
            SFQ->FQ_TIPOORI := cTipoOri
            SFQ->FQ_CFORI   := cCfOri
            SFQ->FQ_LOJAORI := cLojaOri
            SFQ->FQ_ENTDES  := cArqSE
            SFQ->FQ_PREFDES := SE2->E2_PREFIXO
            SFQ->FQ_NUMDES  := SE2->E2_NUM
            SFQ->FQ_PARCDES := SE2->E2_PARCELA
            SFQ->FQ_TIPODES := SE2->E2_TIPO
            SFQ->FQ_CFDES   := SE2->E2_FORNECE
            SFQ->FQ_LOJADES := SE2->E2_LOJA
            MsUnlock()
        Endif
    ElseIf cArqSe == "SE1"

        dbSelectArea("SE1")
        dbSetOrder(1)

        cParcela := SE1->E1_PARCELA
        nTamParc := Len(SE1->E1_PARCELA)

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Busca a parcela de acordo com o titulo                                      ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        While DbSeek(xFilial("SE1")+cPrefOri+cNumOri+cParcela+left(MV_CRNEG,3))
            cParcela := Soma1(cParcela,nTamParc)
        EndDo

        RecLock(cArqSE,.T.)
        SE1->E1_FILIAL  := xFilial("SE1")
        SE1->E1_PREFIXO := cPrefOri
        SE1->E1_SERIE   := Iif(nModulo <> 06, SF2->F2_SERIE, "")
        SE1->E1_NUM     := cNumOri
        SE1->E1_PARCELA := cParcela
        SE1->E1_NATUREZ := cNatOri
        SE1->E1_TIPO    := left(MV_CRNEG,3)
        SE1->E1_EMISSAO := dDataBase
        SE1->E1_VALOR   := nValTot
        SE1->E1_VENCREA := dDataBase
        SE1->E1_SALDO   := nValTot
        SE1->E1_VENCTO  := dDataBase
        SE1->E1_VENCORI := dDataBase
        SE1->E1_EMIS1   := dDataBase
        SE1->E1_CLIENTE := cCfOri
        SE1->E1_LOJA    := cLojaOri
        SE1->E1_NOMCLI  := SA1->A1_NREDUZ
        SE1->E1_MOEDA   := nMoeda
        SE1->E1_VLCRUZ  := Round(NoRound(xMoeda(SE1->E1_VALOR,nMoeda,1,SE1->E1_EMISSAO,3),3),2)
        SE1->E1_STATUS  := Iif(SE1->E1_SALDO>0.01,"A","B")
        SE1->E1_SITUACA := "0"
        SE1->E1_ORIGEM  := "MATA100"

        If ExistBlock("FPCCSE1")
            ExecBlock("FPCCSE1",.F.,.F.)
        Endif
        DbSelectArea( "SA1" )
        AtuSalDup("-",SE1->E1_VALOR,SE1->E1_MOEDA,SE1->E1_TIPO,,SE1->E1_EMISSAO)
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Grava no arquivo de amarracao o titulo x NCC ou NDF                         ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If lSFQ
            dbSelectArea("SFQ")
            RecLock("SFQ",.T.)
            SFQ->FQ_FILIAL  := xFilial("SFQ")
            SFQ->FQ_ENTORI  := cArqSE
            SFQ->FQ_PREFORI := cPrefOri
            SFQ->FQ_NUMORI  := cNumOri
            SFQ->FQ_PARCORI := cParcOri
            SFQ->FQ_TIPOORI := cTipoOri
            SFQ->FQ_CFORI   := cCfOri
            SFQ->FQ_LOJAORI := cLojaOri
            SFQ->FQ_ENTDES  := cArqSE
            SFQ->FQ_PREFDES := SE1->E1_PREFIXO
            SFQ->FQ_NUMDES  := SE1->E1_NUM
            SFQ->FQ_PARCDES := SE1->E1_PARCELA
            SFQ->FQ_TIPODES := SE1->E1_TIPO
            SFQ->FQ_CFDES   := SE1->E1_CLIENTE
            SFQ->FQ_LOJADES := SE1->E1_LOJA
            MsUnlock()
        Endif
    EndIf
Endif
RestArea(aArea)

Return

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} SomaTitISS

Soma Titulos e base de ISS

@param cAlias		Alias a se utilizado (SE1/SE2)
@param cFornece		Codigo do Fornecedor
@param cLoja		Loja do Fornecedor
@param dDataRef		Data de referência
@param nTotISS		Valor Total do ISS Retido
@param nVRetISS		Valor do ISS
@param nTotBasISS	Valor Total da base do ISS
@param nBasISS		Valor da base do ISS
@param lRetISSEmi	Define se será considerada a data de emissão do titulo para o intervalo de datas

@Author	Kleber Dias Gomes
@since	08/05/2005
/*/
//-----------------------------------------------------------------------------------------------------

Function SomaTitISS(cAlias,		cFornece,		cLoja,		dDataRef,;
                    nTotISS,	nVRetISS,		nTotBasISS,	nBasISS,;
                    lRetISSEmi, lBtrISS)
Local aArea   := GetArea()
Local nRecno  := (cAlias)->(Recno())
Local dDataIni:= FirstDay(dDataRef)
Local dDataFim:= LastDay(dDataRef)
Local cAliasSE1	:= "SE1"
Local cAliasSE2	:= "SE2"
Local lRetorno  := .F.
Local nValISS   := 0
Local lQuery    := .F.
Local lZerar	:= .F.
Local lResiduo	:= .F.
Local nRecRes	:= 0
Local cCmpData	:= ""
Local lRetBISS 	:= SuperGetMV("MV_RETBISS")	//Retencao Minima de ISS pela Base de Calculo - Municipio de SBC - Sao Paulo
Local cQuery    := ""
Local cSepNeg   := If("|"$MV_CPNEG,"|",",")
Local cSepProv  := If("|"$MVPROVIS,"|",",")
Local cSepRec   := If("|"$MVPAGANT,"|",",")
Local cCpoISS	:= "E2_ISS"
Local cCpoISSRet:= "E2_VRETISS"

Default nTotISS   	:= 0
Default nVRetISS  	:= 0
Default nTotBasISS	:= 0
Default nBasISS   	:= 0
Default lRetISSEmi  := .F.
Default lBtrISS		:= .F.

If GetNewPar("MV_MODRISS","1") $ "23"		//2-Mensal    3-Por Base
    lRetorno := .T.
    nTotISS  := 0
    nVRetISS := 0
    nValISS  := 0
    nTotBasISS:= 0
    If cAlias == "SE1"
        lQuery    := .T.
        SE1->(dbCommit())
        cAliasSE1 := GetNextAlias()

        cQuery := "SELECT E1_ISS, E1_VRETISS, E1_VENCREA, E1_CLIENTE, E1_LOJA, E1_TIPO, SE1.R_E_C_N_O_ SE1RECNO FROM "
        cQuery += RetSqlName( "SE1" ) + " SE1 "
        cQuery += "WHERE "
        cQuery += "E1_FILIAL='"    + xFilial("SE1")		+ "' AND "
        cQuery += "E1_CLIENTE='"   + cFornece			+ "' AND "
        cQuery += "E1_LOJA='"      + cLoja				+ "' AND "
        cQuery += "E1_VENCREA>= '" + DToS( dDataIni )	+ "' AND "
        cQuery += "E1_VENCREA<= '" + DToS( dDataFim )	+ "' AND "
        cQuery += "E1_TIPO NOT IN " + FormatIn(MVABATIM,"|") + " AND "
        cQuery += "E1_TIPO NOT IN " + FormatIn(MV_CPNEG,cSepNeg)  + " AND "
        cQuery += "E1_TIPO NOT IN " + FormatIn(MVPROVIS,cSepProv) + " AND "
        cQuery += "E1_TIPO NOT IN " + FormatIn(MVPAGANT,cSepRec)  + " AND "
        cQuery += "D_E_L_E_T_=' '"

        cQuery := ChangeQuery( cQuery )
        dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSE1, .F., .T. )
        TcSetField(cAliasSE1,"E1_ISS","N",TamSX3("E1_ISS")[1],TamSX3("E1_ISS")[2])
        TcSetField(cAliasSE1,"E1_VRETISS","N",TamSX3("E1_VRETISS")[1],TamSX3("E1_VRETISS")[2])
        TcSetField(cAliasSE1,"E1_VENCREA","D",TamSX3("E1_VENCREA")[1],TamSX3("E1_VENCREA")[2])

        (cAliasSE1)->(DbGoTop ())

        While !(cAliasSE1)->(Eof()) .And. DToS ((cAliasSE1)->E1_VENCREA)<=DToS (dDataFim)
            If (cAliasSE1)->E1_CLIENTE==cFornece .And. (cAliasSE1)->E1_LOJA==cLoja .And.;
                !((cAliasSE1)->E1_TIPO$MVABATIM+"/"+MV_CPNEG+"/"+MVPROVIS+"/"+MVPAGANT)
                //
                nValISS  += (cAliasSE1)->E1_ISS
                nVRetISS += (cAliasSE1)->E1_VRETISS
                nTotISS  := (nValISS+nVRetISS)
                If (cAliasSE1)->E1_ISS > 0 .And. (nRecno <> If(lQuery,SE1RECNO,(cAliasSE1)->(Recno())))
                    nTotISS  := (cAliasSE1)->E1_VRETISS + nValISS
                    nVRetISS := (cAliasSE1)->E1_VRETISS
                EndIf
            EndIf
            //
            (cAliasSE1)->(dbSkip())
        EndDo
    ElseIf cAlias == "SE2"
        lQuery    := .T.
        SE2->(dbCommit())
        cAliasSE2 := GetNextAlias()

        If lBtrISS
            cCpoISS	   := "E2_BTRISS"
            cCpoISSRet := "E2_VRETBIS"
        EndIf

        cQuery := "SELECT " + cCpoISS +", "+ cCpoISSRet + ", E2_VBASISS, E2_MDRTISS, E2_VENCREA, E2_FORNECE, E2_LOJA, E2_TIPO, E2_EMISSAO, SE2.R_E_C_N_O_ SE2RECNO FROM "
        cQuery += RetSqlName( "SE2" ) + " SE2 "
        cQuery += "WHERE "
        cQuery += "E2_FILIAL='"    + xFilial("SE2")		+ "' AND "
        cQuery += "E2_FORNECE='"   + cFornece			+ "' AND "
        cQuery += "E2_LOJA='"      + cLoja				+ "' AND "
        If !lRetISSEmi
            // Calcula o total de servicos pelo vencimento do titulo
            cQuery += "E2_VENCREA>= '" + DToS( dDataIni )	+ "' AND "
            cQuery += "E2_VENCREA<= '" + DToS( dDataFim )	+ "' AND "
        Else
            // Calcula o total de servicos pela emissao
            cQuery += "E2_EMISSAO>= '" + DToS( dDataIni )	+ "' AND "
            cQuery += "E2_EMISSAO<= '" + DToS( dDataFim )	+ "' AND "
        Endif
        cQuery += "E2_TIPO NOT IN " + FormatIn(MVABATIM,"|") + " AND "
        cQuery += "E2_TIPO NOT IN " + FormatIn(MV_CPNEG,cSepNeg)  + " AND "
        cQuery += "E2_TIPO NOT IN " + FormatIn(MVPROVIS,cSepProv) + " AND "
        cQuery += "E2_TIPO NOT IN " + FormatIn(MVPAGANT,cSepRec)  + " AND "
        cQuery += "D_E_L_E_T_=' '"

        cQuery := ChangeQuery( cQuery )
        dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSE2, .F., .T. )
        TcSetField(cAliasSE2,cCpoISS,"N",TamSX3(cCpoISS)[1],TamSX3(cCpoISS)[2])
        TcSetField(cAliasSE2,cCpoISSRet,"N",TamSX3(cCpoISSRet)[1],TamSX3(cCpoISSRet)[2])
        TcSetField(cAliasSE2,"E2_VBASISS","N",TamSX3("E2_VBASISS")[1],TamSX3("E2_VBASISS")[2])
        TcSetField(cAliasSE2,"E2_VENCREA","D",TamSX3("E2_VENCREA")[1],TamSX3("E2_VENCREA")[2])
        TcSetField(cAliasSE2,"E2_EMISSAO","D",TamSX3("E2_EMISSAO")[1],TamSX3("E2_EMISSAO")[2])
        (cAliasSE2)->(DbGoTop ())

        // Verica se o processamento sera efetuado pelo vencimento ou pela emissao do titulo
        If !lRetISSEmi
            cCmpData := "E2_VENCREA"
        Else
            cCmpData := "E2_EMISSAO"
        Endif

        While !(cAliasSE2)->(Eof()) .And. DToS ((cAliasSE2)->&(cCmpData))<=DToS (dDataFim)
            If (cAliasSE2)->E2_FORNECE==cFornece .And. (cAliasSE2)->E2_LOJA==cLoja .And.;
                !((cAliasSE2)->E2_TIPO$MVABATIM+"/"+MV_CPNEG+"/"+MVPROVIS+"/"+MVPAGANT)

                //Desconsidera o título que está sendo incluido
                If (cAliasSE2)->SE2RECNO == nRecno
                    (cAliasSE2)->(DbSkip())
                    Loop
                EndIf

                If lRetBISS .And. !lRetISSEmi
                    nTotBasISS	+= (cAliasSE2)->E2_VBASISS
                    If (cAliasSE2)->&(cCpoISSRet) > 0 .And. (cAliasSE2)->&(cCpoISS) > 0
                        lResiduo := .T.
                        If lQuery
                            If nRecRes < SE2RECNO
                                nRecRes	:= SE2RECNO
                                nVRetISS:= (cAliasSE2)->&(cCpoISSRet)
                            Endif
                        Else
                            If nRecRes < (cAliasSE2)->(Recno())
                                nRecRes := (cAliasSE2)->(Recno())
                                nVRetISS:= (cAliasSE2)->&(cCpoISSRet)
                            Endif
                        Endif
                    Else
                        If !lResiduo
                            nVRetISS += (cAliasSE2)->&(cCpoISSRet)
                        Endif
                    Endif
                    If (cAliasSE2)->&(cCpoISS) > 0 .And. (nRecno <> If(lQuery,SE2RECNO,(cAliasSE2)->(Recno())))
                        If (cAliasSE2)->E2_MDRTISS == "2" .And. ;
                            nTotBasISS > GetNewPar("MV_VBASISS",0) .And. (cAliasSE2)->&(cCpoISSRet) == 0
                            lZerar := .T.
                        Endif
                    Endif
                Else
                    nValISS  += (cAliasSE2)->&(cCpoISS)
                    nVRetISS += (cAliasSE2)->&(cCpoISSRet)
                    nTotISS  := (nValISS+nVRetISS)
                    If (cAliasSE2)->&(cCpoISS) > 0 .And. (nRecno <> If(lQuery,SE2RECNO,(cAliasSE2)->(Recno())))
                        nTotISS  := (cAliasSE2)->&(cCpoISSRet) + nValISS
                        nVRetISS := (cAliasSE2)->&(cCpoISSRet)
                    Endif
                Endif
            EndIf
            //
            (cAliasSE2)->(dbSkip())
        EndDo
        If lRetBISS
            nVRetISS 	:= IIf(lZerar,0,nVRetISS)
            nTotBasISS	+= nBasISS
        Endif
    EndIf
    If lQuery
        If cAlias == "SE1"
            dbSelectArea(cAliasSE1)
            dbCloseArea()
            dbSelectArea("SE1")
        ElseIf cAlias == "SE2"
            dbSelectArea(cAliasSE2)
            dbCloseArea()
            dbSelectArea("SE2")
        EndIf
    EndIf
EndIf

RestArea(aArea)

Return lRetorno

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FImpCriaSFQ³ Autor ³Claudio Donizete      ³ Data ³11.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Funcao que cria os registros de relacionamento de titulos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1 : Alias do registro  do titulo origem                  ³±±
±±³          ³ExpC2 : Prefixo Origem                                       ³±±
±±³          ³ExpC3 : Numero Origem                                        ³±±
±±³          ³ExpC4 : Parcela Origem                                       ³±±
±±³          ³ExpC5 : Tipo Origem                                          ³±±
±±³          ³ExpC6 : Cliente Origem                                       ³±±
±±³          ³ExpC7 : Loja Origem                                          ³±±
±±³          ³ExpC8 : Alias do registro  do titulo destino                 ³±±
±±³          ³ExpC9 : Prefixo Destino                                      ³±±
±±³          ³ExpC10: Numero Destino                                       ³±±
±±³          ³ExpC11: Parcela Destino                                      ³±±
±±³          ³ExpC12: Tipo Destino                                         ³±±
±±³          ³ExpC13: Cliente Destino                                      ³±±
±±³          ³ExpC14: Loja Destino                                         ³±±
±±³          ³ExpC15: Loja Destino                                         ³±±
±±³          ³ExpN1 : Valor do saldo de abatimento do PIS                  ³±±
±±³          ³ExpN2 : Valor do saldo de abatimento do COFINS               ³±±
±±³          ³ExpN3 : Valor do saldo de abatimento do CSLL                 ³±±
±±³          ³ExpN4 : Valor do saldo de abatimento do IRF                  ³±±
±±³          ³ExpC16: Filial destino                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo criar o registro relacionado ao³±±
±±³          ³titulo aglutinador                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Geral                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function FImpCriaSFQ(cEntOri, cPrefOri, cNumOri, cParcOri, cTipoOri, cCfOri, cLojaOri,;
                            cEntDes, cPrefDes, cNumDes, cParcDes, cTipoDes, cCfDes, cLojaDes,;
                            nSabtPis, nSabtCof, nSabtCsl, nSabtIrf, cFilDes )

Local cModRetIRF 	:= GetNewPar("MV_IRMP232", "0" )
Local lAbatIRF  	:= .T.
Local aArea			:= GetArea()
Local lGravaReg	:= .T.

    If ((nSabtPis+nSabtCof+nSabtCsl > 0) .Or. Alltrim(FunName()) $ "FINA061_FINA590")
        If Alltrim(FunName()) $ "FINA061_FINA590"

            SFQ->(Dbseek(xFilial("SFQ")+cEntOri+cPrefOri+cNumOri+cParcOri+cTipoOri+cCfOri+cLojaOri))
            While !SFQ->(EOF())  .And. SFQ->FQ_FILIAL+SFQ->FQ_ENTORI+SFQ->FQ_PREFORI+SFQ->FQ_NUMORI+SFQ->FQ_PARCORI+SFQ->FQ_TIPOORI+SFQ->FQ_CFORI+SFQ->FQ_LOJAORI =;
                                                            (xFilial("SFQ")+cEntOri+cPrefOri+cNumOri+cParcOri+cTipoOri+cCfOri+cLojaOri)
                If	SFQ->FQ_ENTDES  = cEntDes	.And. 	SFQ->FQ_PREFDES = cPrefDes	.And. 	SFQ->FQ_NUMDES = cNumDes	.And. 	SFQ->FQ_PARCDES = cParcDes .And.;
                    SFQ->FQ_TIPODES = cTipoDes	.And. 	SFQ->FQ_CFDES  = cCfDes	.And. 	SFQ->FQ_LOJADES = cLojaDes
                        lGravaReg	:=	.F.
                        Exit
                Endif
                SFQ->(Dbskip())
            Enddo
        Endif

        If lGravaReg
            RecLock("SFQ",.T.)
            SFQ->FQ_FILIAL  := xFilial("SFQ")
            SFQ->FQ_ENTORI  := cEntOri
            SFQ->FQ_PREFORI := cPrefOri
            SFQ->FQ_NUMORI  := cNumOri
            SFQ->FQ_PARCORI := cParcOri
            SFQ->FQ_TIPOORI := cTipoOri
            SFQ->FQ_CFORI   := cCfOri
            SFQ->FQ_LOJAORI := cLojaOri

            SFQ->FQ_ENTDES  := cEntDes
            SFQ->FQ_PREFDES := cPrefDes
            SFQ->FQ_NUMDES  := cNumDes
            SFQ->FQ_PARCDES := cParcDes
            SFQ->FQ_TIPODES := cTipoDes
            SFQ->FQ_CFDES   := cCfDes
            SFQ->FQ_LOJADES := cLojaDes
            SFQ->FQ_SABTPIS  := nSabtPis
            SFQ->FQ_SABTCOF  := nSabtCof
            SFQ->FQ_SABTCSL  := nSabtCsl
            If lAbatIRF .And. cModretIRF =="1"
                SFQ->FQ_SABTIRF  := nSabtIrf
            Endif
            //Grava a filial de destino caso o campo exista

            SFQ->FQ_FILDES := cFilDes

            MsUnlock()
        Endif
    Endif

    RestArea(aArea)

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³FPEDADT	³Autor  ³ Mauricio Pequim Jr    ³ Data ³24/08/09  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina para chamada do relacionamento NF x Adiantamentos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³FPEDADT(ExpC1,ExpC2,ExpN3,ExpA4,ExpC5,ExpC6)                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Carteira		                                      ³±±
±±³			 ³ 	R = Saida (receber)                                     ³±±
±±³			 ³ 	P = Entrada (pagar)                                     ³±±
±±³          ³ ExpC2 = Numero do Pedido	                                ³±±
±±³          ³ ExpN3 = Valor Limite do Adiantamento	                    ³±±
±±³          ³ ExpA4 = Array Pedidos componentes da NFE/NFS               ³±±
±±³          ³ ExpC5 = Codigo Cliente/Fornecedor + Loja                   ³±±
±±³          ³ ExpC6 = Loja									                  ³±±
±±³          ³ ExpC7 = Tes 									                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FPEDADT(cCarteira,cPedido,nValLimite,aPedidos,cCliFor,cLoja,cTes,nItem,nMoedPed)

Local oDlg
Local oRadio
Local nOpca:= 0
Local lBlqAdiant := .F.

PRIVATE nRadio

DEFAULT cCarteira := "R"
DEFAULT cPedido	:= "" //Pedido vazio
DEFAULT nValLimite	:= 0
DEFAULT aPedidos	:= {}
DEFAULT cCliFor	:= ""
DEFAULT cLoja		:= ""
DEFAULT nMoedPed	:= 0

If cPaisLoc $ "ANG|BRA|MEX|PER"	.and. !Empty(cCarteira) .and. !Empty(cCliFor) .and. !Empty(cLoja)

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Ponto de entrada para bloquear a inclusão de adiantamento. ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If ExistBlock("PVADTINC")
        lBlqAdiant := ExecBlock("PVADTINC",.F.,.F.,{cPedido,nValLimite,cCliFor,cLoja,cTes})
    EndIf

    If !(cPaisLoc $ "MEX|PER")
        nOpca := 0
        DEFINE MSDIALOG oDlg FROM  094,1 TO 200,293 TITLE STR0001 PIXEL //"Relacionar Adiantamento"
        @ 05,07 TO 32, 140 OF oDlg  PIXEL
        @ 10,10 Radio oRadio VAR nRadio;
                            ITEMS STR0002,; //"Incluir Adiantamento"
                                   STR0003; //"Relacionar Adiantamentos"
                                3D SIZE 100,10 OF oDlg PIXEL

        If lBlqAdiant
            oRadio:nOption := 2
            oRadio:Disable()
        EndIf

        DEFINE SBUTTON FROM 35,085 TYPE 1 ENABLE OF oDlg ACTION (nOpca := 1, oDlg:End())
        DEFINE SBUTTON FROM 35,115 TYPE 2 ENABLE OF oDlg ACTION (nOpca := 0, oDlg:End())

        ACTIVATE MSDIALOG oDlg CENTERED
    Else
        //Mexico Não permite Incluir.
        nOpca	:= 1
        nRadio	:= 2
    EndIf
    If nOpca == 1
        If nRadio == 1
            aPedidos := FPDxADTINC(cCarteira,cPedido,nValLimite,aPedidos,cCliFor,cLoja,nMoedPed)
        ElseIf nRadio == 2
            aPedidos := FPDxADTREL(cCarteira,cPedido,nValLimite,aPedidos,cCliFor,cLoja,.F.,cTes,nItem,nMoedPed)
      Endif
    EndIf
Endif

Return aPedidos

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³FPDxADTINC³Autor  ³ Mauricio Pequim Jr    ³ Data ³24/08/09  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina para chamada do relacionamento NF x Adiantamentos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³FPDxADTINC(ExpC1,ExpC2,ExpN3,ExpA4,ExpC5,ExpC6)             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Carteira		                                      ³±±
±±³			 ³ 	R = Saida (receber)                                     ³±±
±±³			 ³ 	P = Entrada (pagar)                                     ³±±
±±³          ³ ExpC2 = Numero do Pedido	                                ³±±
±±³          ³ ExpN3 = Valor Limite do Adiantamento	                    ³±±
±±³          ³ ExpA4 = Array Pedidos componentes da NFE/NFS               ³±±
±±³          ³ ExpC5 = Codigo Cliente/Fornecedor			                 ³±±
±±³          ³ ExpC6 = Loja 									                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FPDxADTINC(cCarteira,cPedido,nValLimte,aPedidos,cCliFor,cLoja,nMoedPed)

Local aRecAdt		:= {}
Local nOpcFIN		:= SuperGetMv("MV_GERADIP", .F. , 1)

Private aRecnoAdt   := Array(0) // Nao alterar esta variavel para Local, pois eh usada nas rotinas FINA040/FINA050
Private nFlagMOD	:= 0 // Variavel necessária para nao dar error.log ao executar a rotina A085APgAdi
Private nCtrlMOD 	:= 0

DEFAULT cCarteira   := ""
DEFAULT cPedido	    := ""
DEFAULT nValLimte	:= 0
DEFAULT aPedidos	:= {}
DEFAULT cCliFor	    := ""
DEFAULT cLoja		:= ""
DEFAULT nMoedPed    := 0

If cCarteira == "R"
    //Inclusão de RA
    SA1->(dbSetOrder(1))
    SA1->(MsSeek(xFilial("SA1")+cCliFor+cLoja))
    If cPaisLoc $ "ANG|MEX|PER"
        Fina087a(,SA1->(A1_COD+A1_LOJA),aRecAdt)

        aPedidos := FPDxADTREL(cCarteira,cPedido,nValLimte,aPedidos,cCliFor,cLoja)
    Endif
    If cPaisLoc == "BRA"
        FinA040(,3) //chama rotina de inclusao do contas a receber

        // retorna o pergunte da rotina principal
        If FunName() = "MATA410"
            Pergunte("MTA410",.F.)
        Elseif FunName() = "MATA460A" .or. FunName() = "MATA460B"
            Pergunte("MT460A",.F.)
        Endif

        aPedidos := FPDxADTREL(cCarteira,cPedido,nValLimte,aPedidos,cCliFor,cLoja,,,,nMoedPed)
    Endif
Else
    //Inclusão PA
    SA2->(dbSetOrder(1))
    SA2->(MsSeek(xFilial("SA2")+cCliFor+cLoja))

    If cPaisLoc == "ANG"
        A085APgAdi(.T.,cClifor,cLoja,aRecAdt)

        aPedidos := FPDxADTREL(cCarteira,cPedido,nValLimte,aPedidos,cCliFor,cLoja)
    Endif
    If cPaisLoc == "BRA"

        FinA050(,,3) //chama rotina de inclusao do contas a pagar

        // retorna o pergunte da rotina principal
        If FunName() = "MATA121"
            Pergunte("MTA120",.F.)
        Elseif FunName() = "MATA103"
            Pergunte("MTA103",.F.)
        Endif

        aPedidos := FPDxADTREL(cCarteira,cPedido,nValLimte,aPedidos,cCliFor,cLoja)
    Endif
    If cPaisLoc == "MEX"

        IF nOpcFIN == 1 // FINA050

            FinA050(,,3) //chama rotina de inclusao do contas a pagar

            // retorna o pergunte da rotina principal
            If FunName() = "MATA121"
                Pergunte("MTA120",.F.)
            Elseif FunName() = "MATA103"
                Pergunte("MTA103",.F.)
            Endif

            aPedidos := FPDxADTREL(cCarteira,cPedido,nValLimte,aPedidos,cCliFor,cLoja)

        Else // FINA085A

            A085APgAdi(.T.,cClifor,cLoja,aRecAdt)

            aPedidos := FPDxADTREL(cCarteira,cPedido,nValLimte,aPedidos,cCliFor,cLoja)

        Endif
    Endif

Endif

Return (aPedidos)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³FPDxADTREL³Autor  ³ Rafael Orizio			  ³ Data ³24/08/09  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina para chamada do relacionamento NF x Adiantamentos    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³FPDxADTREL(ExpC1,ExpC2,ExpN3,ExpA4,ExpC5,ExpC6,ExpL7)       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Carteira		                                      ³±±
±±³			 ³ 	R = Saida (receber)                                     ³±±
±±³			 ³ 	P = Entrada (pagar)                                     ³±±
±±³          ³ ExpC2 = Numero do Pedido	                                ³±±
±±³          ³ ExpN3 = Valor Limite do Adiantamento	                    ³±±
±±³          ³ ExpA4 = Array Pedidos componentes da NFE/NFS               ³±±
±±³          ³ ExpC5 = Codigo Cliente/Fornecedor + Loja                   ³±±
±±³          ³ ExpC6 = Loja 									                    ³±±
±±³          ³ ExpL7 = Rotina chamada apenas para consultar relacionamento³±±
±±³          ³ ExpN8 = Numero do item da nota fiscal                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FPDxADTREL(cCarteira,cPedido,nValLimite,aPedidos,cCliFor,cLoja,lConsulta,cTes,nItem,nMoedPed)

Local oDlg1			:= NIL
Local oSelec		:= NIL
Local oMark			:= NIL
Local nOpca			:= 0
Local TRBADT		:= ""
Local oFnt			:= NIL
Local aBut999		:= {}
Local aChaveLbn		:= {}
Local aSize			:= {}
Local aCampos 		:= {}
Local aCpoBro		:= {}
Local oOK 			:= LoadBitmap(GetResources(),'lbok.png')
Local oNO 			:= LoadBitmap(GetResources(),'lbno.png')
Local aInfAdto 		:= {}
Local cFilSD2		:= ""
Local aAuxPedido	:= {}
Local nX			:= 0
Local nTamTitulo	:= 0
Local nTamChavE2	:= 0
Local nTamCod		:= 0
Local nTamLoj		:= 0
Local nTamParcela	:= 0
Local aArea 		:= GetArea()

if FunName()== "MATA101N" .AND. cPaisLoc == "MEX"
     nTamTitulo	:= TamSx3("E2_PREFIXO")[1]+TamSx3("E2_NUM")[1]+TamSx3("E2_PARCELA")[1]+TamSx3("E2_TIPO")[1]
     nTamChavE2	:= TamSx3("E2_FILIAL")[1]+TamSx3("E2_FORNECE")[1]+TamSx3("E2_LOJA")[1]+nTamtitulo
     nTamCod	:= TamSx3("E2_FORNECE")[1]+TamSx3("E2_LOJA")[1]+1 //Tamanho do codigo do Cliente para browse
     nTamLoj	:= TamSx3("E2_LOJA")[1] //Tamanho do codigo do Cliente para browse
     nTamParcela:= TamSx3("E2_PARCELA")[1]
else
     nTamTitulo	:= TamSx3("E2_PREFIXO")[1]+TamSx3("E2_NUM")[1]+TamSx3("E2_PARCELA")[1]+TamSx3("E2_TIPO")[1]
     nTamChavE2	:= TamSx3("E2_FILIAL")[1]+TamSx3("E2_FORNECE")[1]+TamSx3("E2_LOJA")[1]+nTamtitulo
     nTamCod	:= TamSx3("E1_CLIENTE")[1]+TamSx3("E1_LOJA")[1]+1 //Tamanho do codigo do Cliente para browse
     nTamLoj	:= TamSx3("E1_LOJA")[1] //Tamanho do codigo do Cliente para browse
     nTamParcela:= TamSx3("E2_PARCELA")[1]
EndIF

If Type("cMarca") == "U"
    Private cMarca		:= GetMark() // Quando chamada pelo mata468n ja utilizara o conteudo do marca do browse anterior na TRB que sera criada.
EndIf

Private lInverte
Private nSelec		:= 0

Default aPedidos	:= {}
Default cPedido		:= ""
Default cCarteira	:= ""
Default nValLimite	:= 0
Default lConsulta	:= .F.
Default cCliFor		:= ""
Default cLoja		:= ""
Default cTes		:= ""
Default nItem		:= 0
Default nMoedPed	:= 0

If !Empty(cTes) .AND. cPaisLoc $ "MEX|PER"
    cFilSD2   := LxD2Imp(cTes)
EndIf

// Deve ser informada a carteira
If Empty( cCarteira ) .or. !(cCarteira $ "R#P")
    Help( "", 1, "NOCART",, STR0013, 1, 0 ) //"Nao foi informada a carteira!"
    Return
Else
    If cCarteira == "R"
        SA1->(dbSetOrder(1))
        SA1->(MsSeek(xFilial("SA1")+cCliFor+cLoja))
    Else
        SA2->(dbSetOrder(1))
        SA2->(MsSeek(xFilial("SA2")+cCliFor+cLoja))
    Endif
EndIf

DEFINE FONT oFnt NAME "Arial" SIZE 12,14 BOLD

AADD(aBut999,{"PESQUISA",{||FPedAdtPsq(oMark, cCarteira )}, STR0024+"..(CTRL-P)",STR0024})  //"Pesquisar"

//Abertura dos arquivos para utilizacao nas funcoes SumAbatPag e SumAbatRec
//Se faz necessario devido ao controle de transacao nao permitir abertura de arquivos
If Select("__SE1") == 0
    ChkFile("SE1",.F.,"__SE1")
EndIf
If Select("__SE2") == 0
    ChkFile("SE2",.F.,"__SE2")
EndIf

While .T.
    nSelec := 0

    //-----------------------------------------------
    // Cria e Carrega Arquivo Temporario
    //-----------------------------------------------
    If _oFxAPITRB <> Nil
        _oFxAPITRB:Delete()
        _oFxAPITRB := Nil
    Endif

    If lConsulta
        aCampos 		:= {{ "PEDIDO"		,"C",06,0},;
                            { "PREFIXO"		,"C",03,0},;
                            { "TITULO"		,"C",nTamTitulo+3,0},;
                            { "PARCELA"		,"C",nTamParcela,0},;
                            { "TIPO"		,"C", 3,0},;
                            { "CLIFOR"		,"C",nTamCod,0},;
                            { "LOJA"		,"C",nTamLoj,0},;
                            { "MARCA"		,"C", Len(cMarca),0},;
                            { "VALOR"		,"N",15,2},;
                            { "SALDO"		,"N",15,2}}

        aCpoBro		:= {{ "MARCA"		,, " ",Space(Len(cMarca))},;
                            { "PREFIXO"		,, STR0004,"@!"},; //"Prefixo"
                            { "TITULO"		,, STR0005,"@X"},; //"Numero Titulo"
                            { "PARCELA"		,, STR0006,"@!"},; //"Parcela"
                            { "TIPO"		,, STR0007,"@X"},; //"Tipo"
                            { "CLIFOR"		,, STR0008,"@X"},; //"Cli/For"
                            { "LOJA"		,, STR0025,"@!"},; //"Loja"
                            { "VALOR"		,, STR0012,"@E 9,999,999,999.99"},; //	"Valor Relacionado"
                            { "SALDO"		,, STR0010,"@E 9,999,999,999.99"} } //"Saldo a Relacionar"


        // Criação da Tabela Temporaria
        _oFxAPITRB := FWTemporaryTable():New( "TRBADT" )
        _oFxAPITRB:SetFields(aCampos)
        _oFxAPITRB:AddIndex("1", {"PREFIXO","TITULO","PARCELA","TIPO"})

        _oFxAPITRB:Create()

        FPedAdtCon( TRBADT, cCliFor, cLoja, cCarteira, cPedido )
    Else
        aCampos 	:= {	{ "P_R"			,"C", 1,0},;
                            { "PREFIXO"		,"C", 3,0},;
                            { "TITULO"		,"C",nTamTitulo+3,0},;
                            { "PARCELA"		,"C",nTamParcela,0},;
                            { "TIPO"		,"C", 3,0},;
                            { "MOEDA"		,"N", 2,0},;
                            { "CLIFOR"		,"C",nTamCod,0},;
                            { "NOME"		,"C",20,0},;
                            { "MARCA"		,"C", Len(cMarca),0},;
                            { "CHAVE"		,"C",nTamChavE2,0},;
                            { "PRINCIP"		,"N",15,2},;
                            { "VALRELA"		,"N",15,2},;
                            { "VALAREL"		,"N",15,2},;
                            { "NRECORD"		,"N",30,0}	}

        aCpoBro		:=	{	{ "MARCA"		,, " ",Space(Len(cMarca))},;
                            { "PREFIXO"		,, STR0004,"@!"},; //"Prefixo"
                            { "TITULO"		,, STR0005,"@X"},; //"Numero Titulo"
                            { "PARCELA"		,, STR0006,"@!"},; //"Parcela"
                            { "TIPO"		,, STR0007,"@X"},; //"Tipo"
                            { "MOEDA"		,, AllTrim(RetTitle("E1_MOEDA")),"@X"},; //"Moeda"
                            { "CLIFOR"		,, STR0008,"@X"},; //"Cli/For"
                            { "NOME"		,, STR0009,"@X"},; //"Nome"
                            { "PRINCIP"		,, STR0010,"@E 9,999,999,999.99"},; //"Saldo a Relacionar"
                            { "VALRELA"		,, STR0011,"@E 9,999,999,999.99"},; //"Valor Usado Anterior"
                            { "VALAREL"		,, STR0012,"@E 9,999,999,999.99"} } //"Valor Relacionado"


        _oFxAPITRB := FWTemporaryTable():New( "TRBADT" )
        _oFxAPITRB:SetFields(aCampos)
        _oFxAPITRB:AddIndex("1", {"P_R","CHAVE","PARCELA","TIPO"})

        _oFxAPITRB:Create()

        If cCarteira == "R"
            FPedAdtTiR( TRBADT, cCliFor, cLoja, cCarteira, cPedido, aPedidos, @nSelec,cFilSD2,nItem)
        ElseIf cCarteira == "P"
            FPedAdtTiP( TRBADT, cCliFor, cLoja, cCarteira, cPedido, aPedidos, @nSelec,cFilSD2,nItem)
        EndIf
    EndIf


    dbSelectArea( "TRBADT" )
    DbGoTop()

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Faz o calculo automatico de dimensoes de objetos     ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    aSize := MSADVSIZE()

    DEFINE MSDIALOG oDlg1 TITLE STR0015 From aSize[7],0 To aSize[6],aSize[5] OF oMainWnd PIXEL //"Selecao de Adiantamento"
    oDlg1:lMaximized := .T.

    oPanel := TPanel():New(0,0,'',oDlg1,, .T., .T.,, ,20,20,.T.,.T. )
    oPanel:Align := CONTROL_ALIGN_TOP

    @003, 005 Say IIf(cPaisLoc $ "MEX|PER",IIf(FunName()== "MATA101N",RetTitle("D1_DOC"),RetTitle("D2_DOC")),STR0016)	FONT oDlg1:oFont PIXEL OF oPanel  //"Pedido:" //"Pedido:"
    @003, 035 Say cPedido Picture "@!"	FONT oFnt COLOR CLR_HBLUE PIXEL OF oPanel

    @003, 190 Say STR0017	FONT oDlg1:oFont PIXEL OF oPanel  //"Valor Limite:" //"Valor Limite:"
    @003, 230 Say nValLimite Picture "@E 9,999,999,999.99"	FONT oFnt COLOR CLR_HBLUE PIXEL OF oPanel

    @003, 335 Say STR0022	FONT oDlg1:oFont PIXEL OF oPanel  //"Valor Selecionado:"
    @003, 377 Say oSelec VAR nSelec 	Picture "@E 999,999,999.99" FONT oFnt COLOR CLR_HBLUE PIXEL OF oPanel

    // Panel
    Aadd( aInfAdto, { cPedido, nValLimite } ) // Em função do ponto de entrada FinxVlAd

    // MarkBrowse
    oMark := MsSelect():New("TRBADT","MARCA","",aCpoBro,@lInverte,@cMarca,{50,oDlg1:nLeft,oDlg1:nBottom,oDlg1:nRight})
    oMark:oBrowse:lhasMark 		:= .T.
    oMark:oBrowse:lCanAllmark	:= .T.
    oMark:bAval					:= { || FPedAdtInv(cMarca,oSelec, .F., aChaveLbn,,aInfAdto,nMoedPed),	oMark:oBrowse:Refresh(.t.)}
    oMark:oBrowse:bAllMark 		:= { || FPedAdtInv(cMarca, oSelec, .T., aChaveLbn,,aInfAdto,nMoedPed)}
    oMark:oBrowse:Align			:= CONTROL_ALIGN_ALLCLIENT
    oMark:oBrowse:lReadOnly 	:= lConsulta
    //Alteracao necessaria pois o browse da mata468n interferia neste browse
    oMark:oBrowse:bLDblClick := {|| FPedAdtInv(cMarca,oSelec, .F., aChaveLbn,,aInfAdto,nMoedPed),(TRBADT->MARCA == cMarca),oMark:oBrowse:DrawSelect()}
    oMark:oBrowse:ACOLUMNS[1]:BDATA := {|| If (TRBADT->MARCA == cMarca,oOK,oNO) }

    ACTIVATE MSDIALOG oDlg1 ON INIT EnchoiceBar(oDlg1,	{|| If(FPedAdtTOk(cPedido, nSelec, nValLimite), (nOpca := 1, oDlg1:End()), .F.)},;
                                                        {|| nOpca := 2,oDlg1:End()},, aBut999 )
    If IIf(cPaisLoc $ "BRA|MEX|PER",nOpca == 0,nOpca == 0 .Or. nSelec == 0) //senao nao grava array aPedidos zerado e nao limpa registro do FIE
        Exit
    EndIf

    If nOpcA == 1 .AND. !lConsulta
        DbSelectArea( "TRBADT" )
        TRBADT->( DbGoTop() )
        aAuxPedido := AClone(aPedidos)
        aPedidos := {}
        While TRBADT->( !Eof() )
            If TRBADT->MARCA == cMarca
                If nItem > 0
                    aAdd( aPedidos, { cPedido, TRBADT->NRECORD, TRBADT->VALAREL , nItem, Iif(MafisFound("NF"),MafisRet(,'NF_MOEDA'),0)} )
                Else
                    aAdd( aPedidos, { cPedido, TRBADT->NRECORD, TRBADT->VALAREL } )
                EndIf
            EndIf

            TRBADT->( DbSkip() )
        Enddo
        If cPaisLoc $ "MEX|PER" .AND. nItem > 0
            //Mantem os adiantamentos dos outros itens
            For nX := 1 to Len(aAuxPedido)
                If aAuxPedido[nX][4] <> nItem
                    AAdd(aPedidos, aAuxPedido[nX])
                EndIf
            Next nX
        EndIf
    EndIf

    Exit
Enddo

If !Empty(aChaveLbn)
    aEval(aChaveLbn, {|e| UnLockByName(e,.T.,.F.) } ) // Libera Lock
EndIf

FreeUsedCode()  //libera codigos reservados pela MayIUseCode()

DbSelectArea( "TRBADT" )
dbCloseArea()

RestArea(aArea)

Return aPedidos

//-------------------------------------------------------------------
/*/
{Protheus.doc} FPedAdtTOk
Validação de Tudo Ok Na tela de Adiantamentos
@param cPedido   , String, Numero do pedido que esta sendo avaliado
@param nSelec    , Numeric, Valor total selecionado pelo usuario
@param nValLimite, Numeric, Valor limite que pode ser selecionado pelo usuario
@return lValidado, Boolean, Indica se as selecoes da grid estao validas.
@author Squad CRM/Faturamento
@since 30/11/2020
@version 1.0
/*/
//-------------------------------------------------------------------

Static Function FPedAdtTOk(cPedido, nSelec, nValLimite)
    Local lValidado := .T.
    // Validar o valor 
    If !(FPedAdtVLm(nSelec, nValLimite))
        lValidado := .F.
    EndIf
    // Validar a desvinculacao de algum RA
    If lValidado .And. !(FPAdtDelVl(cPedido))
        lValidado := .F.
    EndIf
Return lValidado

//-------------------------------------------------------------------
/*/
{Protheus.doc} FPedAdtVLm
Validação do total selecionado x limite
@param nSelec    , Numeric, Valor total selecionado de Adiantamentos
@param nValLimite, Numeric, Valor limite para ser selecionados de Adi-
                            antamentos
@return lLimiteVld, Boolean, Indica se o valor selecionado pelo usuario
                             eh valido ou nao.
@author Squad CRM/Faturamento
@since 30/11/2020
@version 1.0
/*/
//-------------------------------------------------------------------

Static Function FPedAdtVLm(nSelec, nValLimite)
    Local lLimiteVld := .T.
    If (nSelec > nValLimite)
        lLimiteVld := .F.
        Alert(STR0026)  //"Não é permitido selecionar valores maiores que o valor limite"
    Endif
Return lLimiteVld

//-------------------------------------------------------------------
/*/
{Protheus.doc} FPAdtDelVl
Validação da exclusao de itens ja selecionados anteriormente
@param cPedido, String, Numero do pedido que esta sendo avaliado
@return lDeleteVld, Logical, Indica as linhas desmarcadas podem ser
                             excluidas ou nao.
@author Squad CRM/Faturamento

@since 30/11/2020
@version 1.0
/*/
//-------------------------------------------------------------------

Static Function FPAdtDelVl(cPedido)
    Local lDeleteVld := .T.
    Local aAreaTRB   := TRBADT->(GetArea())
    DbSelectArea("TRBADT")
    TRBADT->(DbGoTop())
    While TRBADT->(!Eof())
        If TRBADT->MARCA == cMarca
            TRBADT->(DbSkip())
            Loop
        Endif
        If !VldPedFR3(cPedido, TRBADT->PREFIXO, TRBADT->TITULO, TRBADT->PARCELA, TRBADT->TIPO, .T.)
            lDeleteVld := .F.
            Help(,, "MTA410ADT",, STR0016 + " " + cPedido + "." + STR0046,1,0,,,,,,{STR0047})// "Pedido:" "Já foi realizado uma baixa do adiantamento para esse pedido. A amarração com o adiantamento não pode ser desfeita"##Exclua as Notas Fiscais que utilizaram este adiantamento.
            Exit
        EndIf
        TRBADT->(DbSkip())
    EndDo
    RestArea(aAreaTRB)
Return lDeleteVld

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtInv³ Autor ³ Rafael Orizio         ³ Data ³ 28/02/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Inverte markbrowse no windows					 					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Marca utilizada pelo usuario (Getmark())           ³±±
±±³          ³ ExpO2 = Objeto que contem o valor selecionado              ³±±
±±³          ³ ExpL3 = Selecao de um registro(.F.) ou inverte marcas(.T.) ³±±
±±³          ³ ExpA4 = Chave de controle de uso do registro (LockByName)  ³±±
±±³          ³ ExpN5 = Valor limite para selecao		                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Amarracao Pedido x Adiantamento									  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function FPedAdtInv(cMarca,oSelec,lTodos,aChaveLbn,nValLimite,aInfAdto,nMoedPed)
Local nReg		:= TRBADT->(Recno())
Local nRelac	:= 0
Local nOldRelac:= 0
Local lOk		 := .T.
Local lViewHlp	 := .F.

Default lTodos 	 := .T.
Default nMoedPed := 0

If lTodos
    dbSelectArea("TRBADT")
    dbGoTop()
EndIf

While !lTodos .Or. !Eof()
    //-- Parametros da Funcao LockByName() :
    //   1o - Nome da Trava
    //   2o - usa informacoes da Empresa na chave
    //   3o - usa informacoes da Filial na chave
    cChaveLbn := "PXA" + TRBADT->(P_R+CHAVE)
    lOk := .T.

    //Não permite o relacionamento de adiatamento e pedidos em moedas diferentes da moeda corrente.
    If cPaisLoc == "BRA" .And. TRBADT->(P_R) == "R" .And. nMoedPed > 1 .Or. (nMoedPed == 1 .And. TRBADT->(MOEDA) > 1)
        lOk := .F.
        If lTodos
            lViewHlp := .F.
        Else
            lViewHlp := .T.
        EndIf
    EndIf

    If lOk
        If TRBADT->MARCA == cMarca
            If VldPedFR3(aInfAdto[1][1], TRBADT->PREFIXO, TRBADT->TITULO, TRBADT->PARCELA, TRBADT->TIPO, .F.)
                nRelac := TRBADT->VALAREL
                RecLock("TRBADT")
                TRBADT->MARCA := "  "
                TRBADT->VALAREL := 0
                TRBADT->PRINCIP += nRelac
                nSelec -= nRelac
                nAscan := Ascan(aChaveLbn, cChaveLbn )
                If nAscan > 0
                    UnLockByName(aChaveLbn[nAscan],.T.,.F.) // Libera Lock
                EndIf
            Else
                Help(,, "MTA410ADT",,STR0046,1,0,,,,,,{STR0047})//"Já foi realizado uma baixa do adiantamento para esse pedido. A amarração com o adiantamento não pode ser desfeita"##Exclua as Notas Fiscais que utilizaram este adiantamento.
            EndIf
        Else
            nOldRelac := TRBADT->VALAREL
            nRelac := FPedAdtTrc(nValLimite,nSelec,aInfAdto)
            If nRelac > 0
                If LockByName(cChaveLbn,.T.,.F.)
                    RecLock("TRBADT")
                    TRBADT->MARCA := cMarca
                    nSelec += (nRelac - nOldRelac)
                    Aadd(aChaveLbn, cChaveLbn )
                Else
                    If !lTodos
                        MsgAlert(STR0018, STR0019) // "Existe outro usuário utilizando o titulo. Não é permitida a compensação do titulo quando ele está sendo utilizado por outro usuário" ## "Atenção" //"Existe outro usuário utilizando o titulo. Não é permitida a compensação do titulo quando ele está sendo utilizado por outro usuário"###"Atenção"
                    EndIf
                EndIf
            Endif
        EndIf
    EndIf
    MsUnlock()

    If lTodos
        dbSkip()
    Else
        Exit
    EndIf
Enddo

If lViewHlp
    Help("",1,"A410ADTMOED",,STR0037,1,,,,,,,{STR0038} )	//##"O relacionamento entre adiantamentos e pedidos é permitido apenas na moeda corrente." ## "Para efetuar a compensação em outras moedas, utilize a rotina de Compensação de Títulos a Receber do módulo Financeiro."
EndIf

oSelec:Refresh()

TRBADT->( MsGoto( nReg ) )

Return Nil

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtPsq³ Autor ³ Rafael Orizio			  ³ Data ³12.03.97  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ tela de pesquisa - WINDOWS 										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = oMarK			                                      ³±±
±±³          ³ ExpC2 = Carteira		                                      ³±±
±±³			 ³ 	R = Saida (receber)                                     ³±±
±±³			 ³ 	P = Entrada (pagar)                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Amarracao Pedido x Adiantamento									  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Static Function FPedAdtPsq(oMark, cCarteira )

Local cAliasAnt := Alias()
Local nRecno    := 0
Local cAlias    := ""
Local nRecTRBADT:= 0
Local cChave    := ""
Local cCampo	:= ""

cAlias	:= If( cCarteira == "R", "SE1", "SE2" )

DbSelectArea( cAlias )
nRecno  := Recno()
nRecTRBADT := TRBADT->( RecNo() )
cCampo  := Right( cAlias, 2 )

// Obtem os campos de pesquisa de cAlias, para pesquisar no TRBADT, pois
// os indice do TRBADT eh unico (FILIAL+PREFIXO+NUMERO+PARCELA+TIPO) e em
// AxPesqui, o usuario pode escolher a chave desejada.

If Eof() .Or. Bof()
    dbGotop()
EndIf

cChave := cAlias + "->("+cCampo+"_FILIAL+"+cCampo+"_PREFIXO+"+cCampo+"_NUM+"+cCampo+"_PARCELA+"+cCampo+"_TIPO)"
AxPesqui()

// Posiciona no TRBADT o conteudo do registro de cAlias
If !TRBADT->( MSSeek( cCarteira + &cChave ) )
    dbGoto( nRecNo )
    TRBADT->( DbGoto( nRecTRBADT ) )
EndIf

oMark:oBrowse:Refresh( .T. )
DbSelectArea( cAliasAnt )

Return Nil


//----------------------------------------------------------------
/*/{Protheus.doc} FPedAdtTiP
   Gera Tabela com os titulos - Pagar

    @param TRBADT       Alias do TRB
    @param cCliFor      Codigo Cliente/Fornecedor
    @param cLoja        Loja
    @param cCarteira    Carteira
    @param cPedido      Codigo do Pedido
    @param aPedidos     Array de Pedidos
    @param nSelec       Valor relacionado
    @param cFilSD2      Filtro complementar do usuário ("MEX|PER")
    @param nItem        Item da nota ("MEX|PER")

    @author Rafael Orizio
    @since 18/03/2009

    @type static function
/*/
//----------------------------------------------------------------
Static Function FPedAdtTiP( TRBADT, cCliFor, cLoja, cCarteira, cPedido, aPedidos, nSelec , cFilSD2, nItem )

Local bWhile	:= {|| .T.}
Local cAliasSE2	:= "SE2"
Local cOrdemSE2	:= ""
Local cQuery	:= ""
Local cSep		:= IIf("|"$MV_CPNEG,"|",",")
Local nX		:= 0
Local nRecFIE	:= 0
Local cKeyFIE	:= ""
Local aTam      := {}

DEFAULT cCliFor	    := ""
DEFAULT cLoja		:= ""
DEFAULT cCarteira	:= ""
DEFAULT cPedido	    := ""
DEFAULT aPedidos	:= {}
DEFAULT nSelec		:= 0
DEFAULT cFilSD2		:= ""

cOrdemSE2 := SE2->(IndexKey())

If __aStruSE2Q == NIL
    __aStruSE2Q := {}

    aTam := TAMSX3("E2_SALDO")
    aadd(__aStruSE2Q,{"E2_SALDO",aTam[3],aTam[1],aTam[2]})

    aTam := TAMSX3("E2_EMIS1")
    aadd(__aStruSE2Q,{"E2_EMIS1",aTam[3],aTam[1],aTam[2]})

    aTam := TAMSX3("E2_MOEDA")
    aadd(__aStruSE2Q,{"E2_MOEDA",aTam[3],aTam[1],aTam[2]})
Endif

dbSelectArea("SE2")
dbSetOrder(6)

cAliasSE2 := "QRYSE2"

cQuery := "SELECT E2_FILIAL,E2_PREFIXO, E2_NUM, E2_PARCELA, E2_MOEDA,E2_TIPO,E2_SALDO,"
cQuery += "E2_EMIS1,E2_FORNECE,E2_LOJA,E2_NOMFOR,E2_SDACRES,E2_SDDECRE, E2_HIST ,SE2.R_E_C_N_O_ RECSE2 FROM "
cQuery += RetSqlName("SE2") + " SE2 "
If !Empty(cFilSD2)
    //Toda nota tem item 01. Filtra para garantir que soh selecione os adiantamentos com os mesmos impostos e aliquotas da nota de origem
    cQuery += "JOIN "+RetSqlName("SD1")+" SD1 ON (D1_DOC=E2_NUM AND D1_SERIE=E2_PREFIXO AND D1_ITEM='"+STRZERO(1, 4)+"' "+cFilSD2+")"
EndIf
If cPaisLoc == "MEX"
    //Para o Mexico apenas natureza de adiantamento
    cQuery += "JOIN "+RetSqlName("SED")+" SED ON (ED_CODIGO=E2_NATUREZ AND ED_FILIAL='"+XFilial("SED")+"')"
EndIf
cQuery += " WHERE "
cQuery += "SE2.E2_FILIAL = '"+ xFilial("SE2")+"' AND "
cQuery += "SE2.E2_FORNECE = '"+cCliFor+"' AND "
cQuery += "SE2.E2_LOJA = '"+cLoja+"' AND "
cQuery += "SE2.E2_TIPO IN " + FormatIn(MVPAGANT,cSep) + " AND "
cQuery += "SE2.E2_SALDO > 0 AND "
cQuery += "SE2.E2_EMIS1 <= '"+DtoS(dDatabase)+ "' AND "
If cPaisLoc == "MEX" .AND. MaFisFound("NF") //Para o Mexico retorna apenas adiantamentos da mesma moeda.
    cQuery += "SE2.E2_MOEDA = '"+cValTochar(MafisRet(,'NF_MOEDA'))+"' AND "
EndIf
cQuery += "SE2.D_E_L_E_T_ = ' '  "
cQuery += "ORDER BY "+SqlOrder(cOrdemSE2)
cQuery := ChangeQuery(cQuery)

DBUseArea( .T., "TOPCONN", TCGENQRY( ,, cQuery ), cAliasSE2, .F., .T. )

For nX := 1 To Len( __aStruSE2Q )
    If ( __aStruSE2Q[nX][2] <> "C" )
        TcSetField(cAliasSE2,__aStruSE2Q[nX][1],__aStruSE2Q[nX][2],__aStruSE2Q[nX][3],__aStruSE2Q[nX][4])
    EndIf
Next nX

bWhile := {|| (cAliasSE2)->(!Eof()) }

ProcRegua((cAliasSE2)->(Reccount()), STR0020 ) //"Aguarde..."

dbSelectArea(cAliasSE2)

While Eval(bWhile)
    IncProc()

    nVlJaRelac	:= 0
    nVlJaSRelac	:= 0

    //Verifico se o adiantamento possui relacionamento com pedido
    DbSelectArea( "FIE" )
    FIE->( DbSetOrder( 3 ) )
    If FIE->( MsSeek( xFilial( "FIE" )+cCarteira+(cAliasSE2)->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)))
        //Guardo o recno do relacionamento do adiantamento com o pedido atual
        nRecFIE := FIE->(RECNO())
        cKeyFIE := FIE->(FIE_FILIAL+FIE_CART+ FIE_FORNEC+ FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO)

        //Procuro outros relacionamento do adiantamento para diminuir do valor a relacionar
        While !Eof() .and. FIE_FILIAL+FIE_CART+FIE_FORNEC+FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO == cKeyFIE
            //Verifica se o adiantamento já esta relacionado ao pedido
            lMarca := If (FIE->FIE_PEDIDO == cPedido, .T., .F.)
            // Valor relacionado em outros pedidos
            nVlJaRelac += If (FIE->FIE_PEDIDO != cPedido, FIE->FIE_VALOR,0)
            nVlJaSRelac +=  If (FIE->FIE_PEDIDO != cPedido, FIE->FIE_SALDO,0)
            DbSkip()
        Enddo
        FIE->(dbGoto(nRecFIE))
    Endif

    RecLock( "TRBADT", .T. )
    Replace P_R			With "P"
    Replace PREFIXO     With (cAliasSE2)->E2_PREFIXO
    Replace TITULO		With (cAliasSE2)->E2_NUM
    Replace PARCELA	    With (cAliasSE2)->E2_PARCELA
    Replace MARCA		With  " "
    Replace TIPO		With (cAliasSE2)->E2_TIPO
    Replace MOEDA		With (cAliasSE2)->E2_MOEDA
    If cPaisLoc $ "BRA|MEX|PER"
        Replace PRINCIP	With (cAliasSE2)->E2_SALDO - nVlJaSRelac  //SALDO TITULO - RELACIONADO COM OUTROS PEDIDOS
    Else
        Replace PRINCIP	With (cAliasSE2)->E2_SALDO - nVlJaRelac  //SALDO TITULO - RELACIONADO COM OUTROS PEDIDOS
    Endif
    Replace VALRELA	    With	nVlJaRelac
    Replace VALAREL	    With 0
    Replace CLIFOR		With (cAliasSE2)->E2_FORNECE+"-" + (cAliasSE2)->E2_LOJA
    Replace NOME		With (cAliasSE2)->E2_NOMFOR
    Replace CHAVE		With (cAliasSE2)->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)
    Replace NRECORD	    With (cAliasSE2)->RECSE2
    TRBADT->( MsUnLock() )

    nSelec	+= TRBADT->VALAREL

    (cAliasSE2)->( DbSkip() )
Enddo

If Select( "TRBADT" ) > 0
    //Marcacao dos titulos que estao no arrau aPedidos
    If Len(aPedidos) > 0
        For nX := 1 to Len(aPedidos)
            //Posiciona SE2
            SE2->(dbGoto(aPedidos[nX][2]))
            //Procuro o adiantamento no TRB

            If TRBADT->(MsSeek("P"+SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)))
                RecLock( "TRBADT", .F. )
                PRINCIP	-= aPedidos[nX][3]		//Saldo a relacionar

                //Para o Mexico como o relacionamento eh por item. deve
                If !(cPaisLoc $ "MEX|PER") .OR. (Len(aPedidos[nX]) > 3 .AND. aPedidos[nX][4] == nItem)
                    VALAREL += aPedidos[nX][3]		//Valor relacionado com o pedido
                    MARCA   := cMarca
                    nSelec  += aPedidos[nX][3]
                EndIf

                MsUnlock()
            Endif
        Next
    Endif
    TRBADT->( DbGoTop() )
EndIf

FwFreeArray(aTam)

dbSelectArea(cAliasSE2)
dbCloseArea()
dbSelectArea("SE2")

Return

//-------------------------------------------------------------------
/*/
{Protheus.doc} FPedAdtTiR
Gera Tabela com os titulos - Receber

@param 	ExpC1 = Alias do TRB
        ExpC2 = Codigo Cliente/Fornecedor
        ExpC3 = Loja
        ExpC4 = Carteira
        ExpC5 = Codigo do Pedido
        ExpA6 = Array de Pedidos
        ExpN7 = Valor relacionado
        ExpN8 = Filtro Impostos SD2 - Mexico
        ExpN8 = Item da nota        - Mexico

@return cLista	 - Lista conendo os códigos dd cobrança da opção solicitada (separados por '|')

@author Rafael Orizio

@since 18/03/2009
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function FPedAdtTiR( TRBADT, cCliFor, cLoja, cCarteira, cPedido, aPedidos, nSelec ,cFilSD2, nItem)

Local bWhile		:= {|| .T.}
Local cAliasSE1		:= "SE1"
Local cOrdemSE1		:= ""
Local cQuery		:= ""
Local cSep			:= IIf("|"$MV_CRNEG,"|",",")
Local nX			:= 0
Local nRecFIE		:= 0
Local cKeyFIE		:= ""
Local cLstCart		:= FN022LSTCB(1)	//Lista das situacoes de cobranca (Carteira)
Local aTam          := {}

DEFAULT cCliFor	    := ""
DEFAULT cLoja		:= ""
DEFAULT cCarteira	:= ""
DEFAULT cPedido	    := ""
DEFAULT aPedidos	:= {}
DEFAULT nSelec		:= 0
DEFAULT cFilSD2		:= ""

If aAdianta == NIL
    aAdianta := CfgAdianta()
    bFilFIE := Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.})
    lAdComPart := aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
Endif

cOrdemSE1 := SE1->(IndexKey())

If __aStruSE1Q == NIL
    __aStruSE1Q := {}

    aTam := TAMSX3("E1_SALDO")
    aadd(__aStruSE1Q,{"E1_SALDO",aTam[3],aTam[1],aTam[2]})

    aTam := TAMSX3("E1_EMISSAO")
    aadd(__aStruSE1Q,{"E1_EMISSAO",aTam[3],aTam[1],aTam[2]})

    aTam := TAMSX3("E1_MOEDA")
    aadd(__aStruSE1Q,{"E1_MOEDA",aTam[3],aTam[1],aTam[2]})
Endif

dbSelectArea("SE1")
dbSetOrder(2)

cAliasSE1 := "QRYSE1"

cQuery := "SELECT E1_FILIAL,E1_PREFIXO, E1_NUM, E1_PARCELA, E1_MOEDA,E1_TIPO,E1_SALDO,"
cQuery += "E1_EMISSAO,E1_CLIENTE,E1_LOJA,E1_NOMCLI,E1_SDACRES,E1_SDDECRE, E1_HIST ,SE1.R_E_C_N_O_ RECSE1 FROM "
cQuery += RetSqlName("SE1") + " SE1 "
If !Empty(cFilSD2)
    //Toda nota tem item 01. Filtra para garantir que soh selecione os adiantamentos com os mesmos impostos e aliquotas da nota de origem
    cQuery += "JOIN "+RetSqlName("SD2")+" SD2 ON (D2_DOC=E1_NUM AND D2_SERIE=E1_PREFIXO AND D2_ITEM='01' "+cFilSD2+")"
EndIf
If cPaisLoc $ "MEX|PER"
    //Para o Mexico-Perú apenas natureza de adiantamento
    cQuery += "JOIN "+RetSqlName("SED")+" SED ON (ED_CODIGO=E1_NATUREZ AND ED_FILIAL='"+XFilial("SED")+"')"
EndIf
cQuery += " WHERE "
cQuery += "SE1.E1_FILIAL = '"+ xFilial("SE1")+"' AND "
cQuery += "SE1.E1_CLIENTE = '"+cCliFor+"' AND "
cQuery += "SE1.E1_LOJA = '"+cLoja+"' AND "
cQuery += "SE1.E1_SITUACA IN "+ FormatIn(cLstCart,'|')+" AND "
cQuery += "SE1.E1_TIPO IN " + FormatIn(MVRECANT,cSep) + " AND "
cQuery += "SE1.E1_SALDO > 0 AND "
cQuery += "SE1.E1_EMISSAO <= '"+DtoS(dDatabase)+ "' AND "
If cPaisLoc == "MEX" .AND. MaFisFound("NF") //Para o Mexico retorna apenas adiantamentos da mesma moeda.
    cQuery += "SE1.E1_MOEDA = '"+cValTochar(MafisRet(,'NF_MOEDA'))+"' AND "
EndIf
If cPaisLoc == "PER"
    If funname() == "MATA467N" .AND. MaFisFound("NF") //Para o Peru retorna apenas adiantamentos da mesma moeda.
        cQuery += "SE1.E1_MOEDA = '"+cValTochar(MafisRet(,'NF_MOEDA'))+"' AND "
    ElseIf funname() == "MATA468N"
        cQuery += "SE1.E1_MOEDA = '"+ alltrim(str(SC5->C5_MOEDA))+"' AND "
    EndIf
EndIf
cQuery += "SE1.D_E_L_E_T_ = ' '  "

If lAdComPart //não traz os que já existem em outras filiais
    cQuery+="AND NOT EXISTS(SELECT 1 FROM "+RetSqlName('FIE')+" FI WHERE FIE_FILIAL= '"+xFilial('FIE')+"' AND FIE_FILORI<>'"+cFilAnt+"' AND FIE_CLIENT= SE1.E1_CLIENTE AND FIE_LOJA=E1_LOJA AND FIE_NUM=E1_NUM AND FIE_PREFIX = E1_PREFIXO AND FIE_PARCEL = E1_PARCELA AND FI.D_E_L_E_T_ = ' ' ) "
EndIf

cQuery += "ORDER BY "+SqlOrder(cOrdemSE1)
cQuery := ChangeQuery(cQuery)

DBUseArea( .T., "TOPCONN", TCGENQRY( ,, cQuery ), cAliasSE1, .F., .T. )

For nX := 1 To Len( __aStruSE1Q )
    If ( __aStruSE1Q[nX][2] <> "C" )
        TcSetField(cAliasSE1,__aStruSE1Q[nX][1],__aStruSE1Q[nX][2],__aStruSE1Q[nX][3],__aStruSE1Q[nX][4])
    EndIf
Next nX

bWhile := {|| (cAliasSE1)->(!Eof()) }

ProcRegua((cAliasSE1)->(Reccount()), STR0020 ) //"Aguarde..."

dbSelectArea(cAliasSE1)

While Eval(bWhile)
    IncProc()

    nVlJaRelac	:= 0
    nVlJaSRelac	:= 0

    //Verifico se o adiantamento possui relacionamento com pedido
    DbSelectArea( "FIE" )
    FIE->( DbSetOrder( 2 ) )
    If FIE->( MsSeek( xFilial( "FIE" )+cCarteira+(cAliasSE1)->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)))
        //Guardo o recno do relacionamento do adiantamento com o pedido atual
        nRecFIE := FIE->(RECNO())
        cKeyFIE := FIE->(FIE_FILIAL+FIE_CART+ FIE_CLIENT+ FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO)

        //Procuro outros relacionamento do adiantamento para diminuir do valor a relacionar
        While !Eof() .and. FIE_FILIAL+FIE_CART+FIE_CLIENT+FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO == cKeyFIE
            If Eval(bFilFIE)
                //Verifica se o adiantamento já esta relacionado ao pedido
                lMarca := If (FIE->FIE_PEDIDO == cPedido, .T., .F.)
                // Valor relacionado em outros pedidos
                nVlJaRelac += If (FIE->FIE_PEDIDO != cPedido, FIE->FIE_VALOR,0)
                nVlJaSRelac += If (FIE->FIE_PEDIDO != cPedido, FIE->FIE_SALDO,0)
            EndIf
            FIE->(DbSkip())
        Enddo
        FIE->(dbGoto(nRecFIE))
    Endif

    RecLock( "TRBADT", .T. )
    Replace P_R			With "R"
    Replace PREFIXO		With (cAliasSE1)->E1_PREFIXO
    Replace TITULO		With (cAliasSE1)->E1_NUM
    Replace PARCELA		With (cAliasSE1)->E1_PARCELA
    Replace MARCA		With  " "
    Replace TIPO		With (cAliasSE1)->E1_TIPO
    Replace MOEDA		With (cAliasSE1)->E1_MOEDA
    If cPaisLoc $ "BRA|MEX|PER"
        Replace PRINCIP	With (cAliasSE1)->E1_SALDO - nVlJaSRelac  //SALDO TITULO - RELACIONADO COM OUTROS PEDIDOS
    Else
        Replace PRINCIP	With (cAliasSE1)->E1_SALDO - nVlJaRelac  //SALDO TITULO - RELACIONADO COM OUTROS PEDIDOS
    Endif
    Replace VALRELA		With nVlJaRelac
    Replace VALAREL		With 0
    Replace CLIFOR		With (cAliasSE1)->E1_CLIENTE+"-" + (cAliasSE1)->E1_LOJA
    Replace NOME		With (cAliasSE1)->E1_NOMCLI
    Replace CHAVE		With (cAliasSE1)->E1_FILIAL + (cAliasSE1)->E1_PREFIXO + (cAliasSE1)->E1_NUM + (cAliasSE1)->E1_PARCELA + (cAliasSE1)->E1_TIPO
    Replace NRECORD		With (cAliasSE1)->RECSE1
    TRBADT->( MsUnLock() )

    nSelec	+= TRBADT->VALAREL

    (cAliasSE1)->( DbSkip() )
Enddo

If Select( "TRBADT" ) > 0
    //Marcacao dos titulos que estao no arrau aPedidos
    If Len(aPedidos) > 0
        For nX := 1 to Len(aPedidos)
            //Posiciona SE1
            SE1->(dbGoto(aPedidos[nX][2]))
            //Procuro o adiantamento no TRB

            If TRBADT->(MsSeek("R"+SE1->(E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)))
                RecLock( "TRBADT", .F. )
                PRINCIP	-= aPedidos[nX][3]		//Saldo a relacionar
                //Para o Mexico como o relacionamento eh por item. deve
                If !(cPaisLoc $ "MEX|PER") .OR. (Len(aPedidos[nX]) > 3 .AND. aPedidos[nX][4] == nItem)
                    VALAREL	+= aPedidos[nX][3]		//Valor relacionado com o pedido
                    MARCA	:= cMarca
                    nSelec	+= aPedidos[nX][3]
                EndIf
                MsUnlock()
            Endif
        Next
    Endif
    TRBADT->( DbGoTop() )
EndIf

FwFreeArray(aTam)

dbSelectArea(cAliasSE1)
dbCloseArea()
dbSelectArea("SE1")

Return

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtTrc³ Autor ³ Rafael Orizio         ³ Data ³ 18/03/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Tela para edicao do valor relacionado 							  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpN1 = Valor limite para relacionamento                   ³±±
±±³          ³ ExpN2 = Valor total relacionado                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Amarracao Pedido x Adiantamento									  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Static Function FPedAdtTrc(nValLimite,nSelec,aInfAdto)
Local oDlg
Local nOpca		:= 0
Local nValor	:= TRBADT->PRINCIP
Local nSaldo	:= TRBADT->PRINCIP
Local nOldVlr	:= TRBADT->VALAREL
Local lFinxVlAd := ExistBlock("FinxVlAd")

DEFINE MSDIALOG oDlg FROM  69,70 TO 160,331 TITLE STR0021 PIXEL //"Adiantamento"

@ -3, 2 TO 22, 128 OF oDlg	PIXEL
@ 7, 68 MSGET nValor Picture "@E 9999,999,999.99" VALID nValor <= nSaldo .and. nValor > 0 SIZE 54, 10 OF oDlg PIXEL hasbutton
@ 8, 9 SAY STR0023  SIZE 54, 7 OF oDlg PIXEL  //"Valor"

DEFINE SBUTTON FROM 29, 71 TYPE 1 ENABLE ACTION (nOpca:=1,If((nValor <= nSaldo .AND. nValor > 0),oDLg:End(),nOpca:=0)) OF oDlg
DEFINE SBUTTON FROM 29, 99 TYPE 2 ENABLE ACTION (oDlg:End()) OF oDlg

ACTIVATE MSDIALOG oDlg CENTERED

If nOpca == 1
    If lFinxVlAd
        nValor := ExecBlock("FinxVlAd", .f., .f., {nValor, nSelec, aInfAdto })
    EndIf
    RecLock( "TRBADT" )
    TRBADT->VALAREL := nValor
    TRBADT->PRINCIP := TRBADT->( PRINCIP + nOldVlr - nValor )
    MsUnLock()
Else
    nValor := 0
Endif

Return nValor

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtGrv ³ Autor ³ Totvs                ³ Data ³ 27/08/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Realiza a gravacao do relacionamento do pedido com adiant. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = identificador da certeira, P=Pagar, R=Receber      ³±±
±±³          ³ ExpN1 = operacao											  ³±±
±±³          ³ (1=inclusao;2=cancelamento;3=ajuste valor;4=Ajuste Saldo)  ³±±
±±³          ³ ExpC1 = Codigo do pedido para gravacao do relacionamento   ³±±
±±³          ³ ExpA1 = Array com os pedidos, recno e valor do adiantamento³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Function FPedAdtGrv( cCarteira, nOpc, cPedido, aPedidos, lCmp, cDoc, cSerie,aAdtPC,nAutoAdt)
    Local nInc		:= 0
    Local lRet		:= .F.
    Local cAlias	:= If (cCarteira == "R", "SE1","SE2")
    Local nOrdem	:= If (cCarteira == "R", 2,6)
    Local cKey		:= ""
    Local aArea 	:= GetArea()
    Local nX        := 0
    Local lIncClass := (Type('Inclui') != 'U' .and. Type('l103Class') != 'U')
    Local cFilFIE   := ""
    Local bEvalFil  := {|| .T. }
    Local bFilFR3   := {|| .T. }

    Default lCmp := .F.
    Default cDoc := ""
    Default cSerie := ""
    Default nAutoAdt :=0
    Default aAdtPC := {}

    If aAdianta == NIL
        aAdianta := CfgAdianta()
        bFilFIE := Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.})
        lAdComPart := aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
    Endif

    cFilFIE := Iif(lAdComPart,cFilAnt,xFilial("FIE"))

    If (nAutoAdt==3 .OR. nAutoAdt==4 .OR. nAutoAdt==5) .and. Len(aAdtPC)>0
       aPedidos:={}
       If cCarteira == "R"
          DbSelectArea("SE1")
          DbSetOrder(1)
          For nX := 1 to Len(aAdtPC)
              If DbSeek(aAdtPC[nX][1][2]+aAdtPC[nX][4][2]+aAdtPC[nX][5][2]+aAdtPC[nX][6][2]+aAdtPC[nX][7][2])
                 Aadd(aPedidos ,{cPedido,SE1->(Recno()),aAdtPC[nX][10][2]})
              Endif
          Next
        Else
          DbSelectArea("SE2")
          DbSetOrder(1)
          For nX := 1 to Len(aAdtPC)
              If DbSeek(aAdtPC[nX][1][2]+aAdtPC[nX][4][2]+aAdtPC[nX][5][2]+aAdtPC[nX][6][2]+aAdtPC[nX][7][2]+aAdtPC[nX][8][2]+aAdtPC[nX][9][2])
                 Aadd(aPedidos ,{cPedido,SE2->(Recno()),aAdtPC[nX][10][2]})
              Endif
          Next
       Endif
    Endif
    If lAdComPart //Avalia se o indice esta criado
        bEvalFil := {|| FIE->FIE_FILORI == cFilAnt }
        bFilFR3 := {|| FR3->FR3_FILORI == cFilAnt }
    EndIf
    If nOpc == 1 		// Inclusao
        If lAdComPart //existe indice
            FIE->(dbSetOrder(Iif(cCarteira=='R',4,5)))//Receber: indice 4. Pagar: Indice 5
        Else
            FIE->(dbSetOrder(Iif(cCarteira=='R',2,3))) //Receber: indice 2. Pagar: Indice 3
        Endif
        Begin Transaction
            For nInc := 1 To Len( aPedidos )
                If cCarteira == "R"			// Contas a Receber
                    DbSelectArea( "SE1" )
                    SE1->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE1->( Eof() )
                        If FIE->(MsSeek(cFilFIE+"R"+SE1->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)+aPedidos[nInc][1]))
                            RecLock( "FIE", .F. )
                        Else
                            RecLock( "FIE", .T. )
                        Endif
                        FIE->FIE_FILIAL	:= xFilial( "FIE" )
                        FIE->FIE_CART		:= cCarteira
                        FIE->FIE_PEDIDO	:= aPedidos[nInc][1]
                        FIE->FIE_PREFIX	:= SE1->E1_PREFIXO
                        FIE->FIE_NUM		:= SE1->E1_NUM
                        FIE->FIE_PARCEL	:= SE1->E1_PARCELA
                        FIE->FIE_TIPO		:= SE1->E1_TIPO
                        FIE->FIE_CLIENT	:= SE1->E1_CLIENTE
                        FIE->FIE_LOJA		:= SE1->E1_LOJA
                        FIE->FIE_VALOR		:= FIE->FIE_VALOR - FIE->FIE_SALDO + aPedidos[nInc][3]
                        FIE->FIE_SALDO		:= aPedidos[nInc][3]
                        If aAdianta[1,4]//Exste o indice pelo campo FIE_FILORI
                            FIE->FIE_FILORI := cFilAnt
                        EndIf
                        FIE->( MsUnLock() )
                    EndIf
                ElseIf cCarteira == "P"		// Contas a Pagar
                    DbSelectArea( "SE2" )
                    SE2->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE2->( Eof() )
                        If FIE->(MsSeek(cFilFIE+"P"+SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)+aPedidos[nInc][1]))
                            RecLock( "FIE", .F. )
                        Else
                            RecLock( "FIE", .T. )
                        Endif
                        FIE->FIE_FILIAL	:= xFilial( "FIE" )
                        FIE->FIE_CART		:= cCarteira
                        FIE->FIE_PEDIDO	:= aPedidos[nInc][1]
                        FIE->FIE_PREFIX	:= SE2->E2_PREFIXO
                        FIE->FIE_NUM		:= SE2->E2_NUM
                        FIE->FIE_PARCEL	:= SE2->E2_PARCELA
                        FIE->FIE_TIPO		:= SE2->E2_TIPO
                        FIE->FIE_FORNEC	:= SE2->E2_FORNECE
                        FIE->FIE_LOJA		:= SE2->E2_LOJA
                        If cPaisLoc == "PER" .And. ValType(lPedidos) <> "U"
                            FIE->FIE_VALOR		:= aPedidos[nInc][3]
                        Else
                            FIE->FIE_VALOR		:= FIE->FIE_VALOR - FIE->FIE_SALDO + aPedidos[nInc][3]
                        EndIf
                        FIE->FIE_SALDO		:= aPedidos[nInc][3]
                        If aAdianta[1,5]//Exste o indice pelo campo FIE_FILORI
                            FIE->FIE_FILORI := cFilAnt
                        EndIf
                        FIE->( MsUnLock() )
                    EndIf
                EndIf
            Next

            //Processo de exclusao de registros que tiveram o relacionamento cancelado
            //na tela de relacionamento Pedido x Adiantamento
            FIE->(dbSetOrder(1))
            If FIE->(MsSeek(xFilial("FIE")+cCarteira+cPedido)) .and. (nAutoAdt==0 .and. Len(aAdtPC)=0)
                cKey := xFilial("FIE")+cCarteira+cPedido
                While FIE->(!EOF()) .and. xFilial("FIE")+FIE->(FIE_CART+FIE_PEDIDO) == cKey
                    If !Eval(bEvalFil)
                        FIE->(dbSkip())
                        Loop
                    Endif
                    //Se o pedido tem relacionamento
                    //Verifico os relacionamentos existentes na tabela FIE mas nao contidos no array aPedidos
                    If Len(aPedidos) > 0
                        (cAlias)->(dbSetOrder(nOrdem))
                        If cCarteira == "R"
                            (cAlias)->(MsSeek(xFilial(cAlias)+FIE->(FIE_CLIENT+FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO)))
                            nTit := Ascan(aPedidos,{|x| x[2] == (cAlias)->(RECNO())})
                            If nTit == 0 .and. Str(FIE->FIE_SALDO,17,2) == Str(FIE->FIE_VALOR,17,2)
                                RecLock( "FIE" )
                                FIE->( DbDelete() )
                                FIE->( MsUnLock() )
                            Endif
                        Else
                            (cAlias)->(MsSeek(xFilial(cAlias)+FIE->(FIE_FORNEC+FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO)))
                            nTit := Ascan(aPedidos,{|x| x[2] == (cAlias)->(RECNO())})
                            If nTit == 0 .and. Str(FIE->FIE_SALDO,17,2) == Str(FIE->FIE_VALOR,17,2)
                                RecLock( "FIE" )
                                FIE->( DbDelete() )
                                FIE->( MsUnLock() )
                            Endif
                        EndIf
                    Else
                        //Se os relacionamentos foram cancelados na tela de relacionamento pedido x adiantamento
                        //Excluo os registros da tabela de relacionamento
                        If Str(FIE->FIE_SALDO,17,2) == Str(FIE->FIE_VALOR,17,2)
                            RecLock( "FIE" )
                            FIE->( DbDelete() )
                            FIE->( MsUnLock() )
                        Endif
                    Endif
                    FIE->(DbSkip())
                Enddo
            Endif

            // Se a transacao sera efetivada e carteiras R ou P, atualiza a flag.
            lRet := cCarteira $ "R*P"
        End Transaction

    ElseIf nOpc == 2	// Cancelamento
        Begin Transaction
        If (nAutoAdt==3 .OR. nAutoAdt==4 .OR. nAutoAdt==5) .and. Len(aAdtPC)>0
            If cCarteira == "P"			// Contas a Pagar
               FIE->(dbSetOrder(1))
               If FIE->(MsSeek(xFilial("FIE")+cCarteira+cPedido))
                   cKey := 	xFilial("FIE")+cCarteira+cPedido
                   While FIE->(!EOF()) .and. xFilial("FIE")+FIE->(FIE_CART+FIE_PEDIDO) == cKey
                          //Se o pedido tem relacionamento
                        //Verifico os relacionamentos existentes na tabela FIE
                        //Excluo os registros da tabela de relacionamento
                        If Eval(bEvalFil) .and. Str(FIE->FIE_SALDO,17,2) == Str(FIE->FIE_VALOR,17,2)
                            RecLock( "FIE" )
                            FIE->( DbDelete() )
                            FIE->( MsUnLock() )
                        EndIf
                       FIE->(DbSkip())
                   Enddo
               Endif
            Endif
            If cCarteira == "R"
               FIE->(dbSetOrder(1))
               If FIE->(MsSeek(xFilial("FIE")+cCarteira+cPedido))
                   cKey := 	xFilial("FIE")+cCarteira+cPedido
                   While FIE->(!EOF()) .and. xFilial("FIE")+FIE->(FIE_CART+FIE_PEDIDO) == cKey
                          //Se o pedido tem relacionamento
                        //Verifico os relacionamentos existentes na tabela FIE
                        //Excluo os registros da tabela de relacionamento
                        If Eval(bEvalFil) .and. Str(FIE->FIE_SALDO,17,2) == Str(FIE->FIE_VALOR,17,2)
                            RecLock( "FIE" )
                            FIE->( DbDelete() )
                            FIE->( MsUnLock() )
                        EndIf
                       FIE->(DbSkip())
                   Enddo
               Endif
            Endif
         Else
            For nInc := 1 To Len( aPedidos )
                If cCarteira == "R"			// Contas a Receber
                    DbSelectArea( "SE1" )
                    SE1->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE1->( Eof() )
                        cChave := cCarteira + SE1->( E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO + aPedidos[nInc][1] )

                        DbSelectArea( "FIE" )
                        FIE->( DbSetOrder( 2 ) )
                        If FIE->( DbSeek( xFilial( "FIE" ) + cChave ) )
                            RecLock( "FIE" )
                            FIE->( DbDelete() )
                            FIE->( MsUnLock() )
                        EndIf
                    EndIf

                ElseIf cCarteira == "P"		// Contas a Pagar
                    DbSelectArea( "SE2" )
                    SE2->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE2->( Eof() )
                        cChave := cCarteira + SE2->( E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO + aPedidos[nInc][1] )

                        DbSelectArea( "FIE" )
                        FIE->( DbSetOrder( 3 ) )
                        If FIE->( DbSeek( xFilial( "FIE" ) + cChave ) )
                            RecLock( "FIE" )
                            FIE->( DbDelete() )
                            FIE->( MsUnLock() )
                        EndIf
                    EndIf
                EndIf
            Next

            // Se a transacao sera efetivada e carteiras R ou P, atualiza a flag.
            lRet := cCarteira $ "R*P"
        Endif
        End Transaction

    ElseIf nOpc == 3	// Ajuste do Valor Relacionado do Adiantamento (FIE_VALOR)
        Begin Transaction
            For nInc := 1 To Len( aPedidos )
                If cCarteira == "R"			// Contas a Receber
                    DbSelectArea( "SE1" )
                    SE1->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE1->( Eof() )
                        cChave := cCarteira + SE1->( E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO + aPedidos[nInc][1] )
                        FIE->( DbSetOrder( Iif(lAdComPart,4,2) ) )
                        If FIE->( DbSeek( cFilFIE + cChave ) )
                            RecLock( "FIE" )
                            FIE->FIE_VALOR	:= FIE->FIE_SALDO
                            FIE->FIE_SALDO	:= 0
                            FIE->( MsUnLock() )
                        EndIf
                    EndIf

                ElseIf cCarteira == "P"		// Contas a Pagar
                    DbSelectArea( "SE2" )
                    SE2->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE2->( Eof() )
                        cChave := cCarteira + SE2->( E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO + aPedidos[nInc][1] )

                        FIE->( DbSetOrder( Iif(lAdComPart,5,2)  ) )
                        If FIE->( DbSeek( cFilFIE + cChave ) )
                            RecLock( "FIE" )
                            FIE->FIE_VALOR	:= FIE->FIE_SALDO
                            FIE->FIE_SALDO	:= 0
                            FIE->( MsUnLock() )
                        EndIf
                    EndIf
                EndIf
            Next

            // Se a transacao sera efetivada e carteiras R ou P, atualiza a flag.
            lRet := cCarteira $ "R*P"
        End Transaction
    ElseIf nOpc == 4	// Ajuste do Saldo do Relacionado do Adiantamento (FIE_SALDO)
        Begin Transaction
            For nInc := 1 To Len( aPedidos )
                If cCarteira == "R"			// Contas a Receber
                    DbSelectArea( "SE1" )
                    SE1->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE1->( Eof() )
                        cChave := cCarteira + SE1->( E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM + E1_PARCELA + E1_TIPO + aPedidos[nInc][1] )

                        FIE->( DbSetOrder( Iif(lAdComPart,4,2) ) )
                        If FIE->( DbSeek( cFilFIE + cChave ) )
                            RecLock( "FIE" )
                            FIE->FIE_SALDO	-= aPedidos[nInc][3]
                            FIE->( MsUnLock() )
                        EndIf

                        //atualiza tabela de Adiantamento X Compensacao, usada para poder ser feito o estorno da nota fiscal
                        If lCmp .and. !Empty(cDoc)
                            // exclui os registros que possam existir referente aos adiantamentos para esta nota fiscal e pedido de venda
                            If FunName() = "MATA521A"
                                dbSelectArea("FR3")
                                dbSetOrder(Iif(lAdComPart,8,2))
                                If dbSeek(cFilFIE+cCarteira+SE1->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)+cDoc+cSerie)
                                    While !Eof() .and. cFilFIE+cCarteira+SE1->(E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO)+cDoc+cSerie = ;
                                            FR3->(Iif(lAdComPart,FR3_FILORI,FR3_FILIAL)+FR3_CART+FR3_CLIENT+FR3_LOJA+FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO+FR3_DOC+FR3_SERIE)
                                        If Eval(bFilFR3) .and. FR3_PEDIDO = aPedidos[nInc][1]
                                            RecLock("FR3",.F.)
                                            dbDelete()
                                            MsUnlock()
                                        Endif
                                        dbSkip()
                                    Enddo
                                Endif
                            Endif

                            If (FunName() $ "MATA460A|MATA460B|MATA461") .and. !Empty(aPedidos[nInc][3]) // soh grava se tiver valor informado
                                FaGrvFR3(cCarteira,aPedidos[nInc][1],SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_TIPO,SE1->E1_CLIENTE,SE1->E1_LOJA,aPedidos[nInc][3],cDoc,cSerie)
                            Endif
                        Endif
                    EndIf

                ElseIf cCarteira == "P"		// Contas a Pagar
                    DbSelectArea( "SE2" )
                    SE2->( DbGoTo( aPedidos[nInc][2] ) )
                    If !SE2->( Eof() )
                        cChave := cCarteira + SE2->( E2_FORNECE + E2_LOJA + E2_PREFIXO + E2_NUM + E2_PARCELA + E2_TIPO + aPedidos[nInc][1] )

                        FIE->( DbSetOrder( Iif(lAdComPart,5,3) ) )
                        If FIE->( DbSeek( cFilFIE + cChave ) )
                            RecLock( "FIE" )
                            FIE->FIE_SALDO	-= aPedidos[nInc][3]
                            FIE->( MsUnLock() )
                        EndIf

                        //atualiza tabela de Adiantamento X Compensacao, usada para poder ser feito o estorno da nota fiscal
                        If lCmp .and. !Empty(cDoc)
                            // exclui os registros que possam existir referente aos adiantamentos para esta nota fiscal e pedido de compra
                            dbSelectArea("FR3")
                            dbSetOrder(Iif(lAdComPart,9,3))
                            If dbSeek(cFilFIE+cCarteira+SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)+cDoc+cSerie)
                                While !Eof() .and. cFilFIE+cCarteira+SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)+cDoc+cSerie = ;
                                        FR3->(Iif(lAdComPart,FR3_FILORI,FR3_FILIAL)+FR3_CART+FR3_FORNEC+FR3_LOJA+FR3_PREFIX+FR3_NUM+FR3_PARCEL+FR3_TIPO+FR3_DOC+FR3_SERIE)
                                    If Eval(bFilFR3) .and. FR3_PEDIDO = aPedidos[nInc][1]
                                        RecLock("FR3",.F.)
                                        dbDelete()
                                        MsUnlock()
                                    Endif
                                    dbSkip()
                                Enddo
                            Endif

                            If FunName() = "MATA103" .and. !Empty(aPedidos[nInc][3]) // soh grava se tiver valor informado
                                If lIncClass .and. (Inclui .or. l103Class) // Necessario forcar o Inclui ou l103Class, pois a rotina MATA103 inclui e exclui o documento de entrada
                                    FaGrvFR3(cCarteira,aPedidos[nInc][1],SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,aPedidos[nInc][3],cDoc,cSerie)
                                Endif
                            Endif
                        Endif
                    EndIf
                EndIf
            Next

            // Se a transacao sera efetivada e carteiras R ou P, atualiza a flag.
            lRet := cCarteira $ "R*P"
        End Transaction
    EndIf

    RestArea(aArea)

Return lRet

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtSld ³ Autor ³ Totvs                ³ Data ³ 27/08/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Retorna o saldo dos pedidos relacionados no array.         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = identificador da certeira, P=Pagar, R=Receber      ³±±
±±³          ³ ExpA1 = Array com os pedidos, recno e valor do adiantamento³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Function FPedAdtSld( cCarteira, aPedidos )
    Local nInc		:= 0
    Local nSaldo	:= 0
    Local cFilFIE	:= xFilial("FIE")

    DbSelectArea( "FIE" )
    For nInc := 1 To Len( aPedidos )
        FIE->( DbSetOrder( 1 ) ) //FIE_FILIAL+FIE_CART+FIE_PEDIDO
        If FIE->( DbSeek(cFilFIE + cCarteira + aPedidos[nInc][1] ) )
            nSaldo += FIE->FIE_SALDO
        EndIf
    Next
Return nSaldo

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtPed  ³ Autor ³ Totvs               ³ Data ³ 27/08/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Retorna array com o relacionamento dos pedidos.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = identificador da certeira, P=Pagar, R=Receber      ³±±
±±³          ³ ExpA2 = Array com o codigo dos pedidos                     ³±±
±±³          ³ ExpL3 = Define o valor a ser retornado        			  ³±±
±±³          ³				.T. = Valor do relacionamento ADT x Pedido    ³±±
±±³          ³				.F. = Saldo do relacionamento ADT x Pedido    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Function FPedAdtPed( cCarteira, aCodPedidos, lRetVlr,nAutoAdt)
Local aSvArea   := GetArea()
Local aRet	    := {}
Local nInc	    := 0

DEFAULT cCarteira := ""
DEFAULT aCodPedidos := {}
DEFAULT lRetVlr	:= .f. //Retorna valor (.T.) ou Saldo (.F.) do relacionamento
DEFAULT nAutoAdt :=0

If aAdianta == NIL
    aAdianta := CfgAdianta()
    bFilFIE := Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.})
    lAdComPart := aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
Endif

If (nAutoAdt==3 .OR. nAutoAdt==4 .OR. nAutoAdt==5) .and. Len(aAdtPC)>0
    Return aRet
Else
    SE2->(dbSetOrder(6))
    SE1->(dbSetOrder(2))
    FIE->( DbSetOrder( 1 ) ) //FIE_FILIAL+FIE_CART+FIE_PEDIDO
    DbSelectArea( "FIE" )
    For nInc := 1 To Len( aCodPedidos )
        FIE->( DbSeek( xFilial( "FIE" ) + cCarteira + aCodPedidos[nInc] ) )
        While FIE->( !Eof() ) .AND. FIE->( FIE_FILIAL + FIE_CART + FIE_PEDIDO ) == xFilial( "FIE" ) + cCarteira + aCodPedidos[nInc]
            iF FIE->(Eval(bFilFIE))
                If cCarteira == "R"
                    SE1->(MsSeek(xFilial("SE1")+FIE->(FIE_CLIENT+FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO)))
                    aAdd( aRet, { 	FIE->FIE_PEDIDO,;		// 1- Codigo do Pedido
                                SE1->( RecNo() ),;		// 2- Recno do registro do adiantamento (SE1)
                                If(lRetVlr,FIE->FIE_VALOR,FIE->FIE_SALDO) } )		// 3- Valor/Saldo do Relacionamento
                Else
                    SE2->(MsSeek(xFilial("SE2")+FIE->(FIE_FORNEC+FIE_LOJA+FIE_PREFIX+FIE_NUM+FIE_PARCEL+FIE_TIPO)))
                    aAdd( aRet, { 	FIE->FIE_PEDIDO,;		// 1- Codigo do Pedido
                                SE2->( RecNo() ),;		// 2- Recno do registro do Adiantamento (SE2)
                                If(lRetVlr,FIE->FIE_VALOR,FIE->FIE_SALDO) } )		// 3- Valor/Saldo do Relacionamento
                Endif
            Endif
            FIE->( DbSkip() )
        Enddo
    Next
EndIf
RestArea(aSvArea)
Return aRet

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtCon³ Autor ³ Rafael Orizio         ³ Data ³ 18/03/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Consulta de relacionamento Pedido x Adiantamentos		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do TRB	                                      ³±±
±±³          ³ ExpC2 = Codigo Cliente/Fornecedor                          ³±±
±±³          ³ ExpC3 = Loja									              ³±±
±±³          ³ ExpC4 = Carteira        							          ³±±
±±³          ³ ExpC5 = Codigo do Pedido							          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Amarracao Pedido x Adiantamento							  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Static Function FPedAdtCon( TRBADT, cCliFor, cLoja, cCarteira, cPedido )
Local cCondicao	:= ""
Local cOrder		:= "" //Considerara a ordem do browse de entrada da rotina.
Local aStru			:= FIE->( DbStruct() )
Local nX				:= 0
Local nSaldo		:= 0
Local aArea	   := GetArea()
Local aAreaSE1 := SE1->(GetArea())
Local aAreaSE2 := SE1->(GetArea())

If aAdianta == NIL
    aAdianta := CfgAdianta()
    bFilFIE := Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.})
    lAdComPart := aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
Endif

FIE->(DbSetOrder(If(cCarteira == "R",2,3)))

cOrder	 := FIE->( IndexKey() )
cOrder	 := SqlOrder(cOrder)
cCondicao += "SELECT * "
cCondicao += "FROM " + RetSqlName( "FIE" )
cCondicao += " WHERE FIE_FILIAL = '" + xFilial( "FIE" ) + "' "
cCondicao += " AND FIE_PEDIDO = '" + cPedido + "' "

If cCarteira == "R"
    cCondicao += " AND FIE_CART = 'R' "
    cCondicao += " AND FIE_CLIENT = '" + cCliFor + "' "
    cCondicao += " AND FIE_LOJA = '" + cLoja + "' "
ElseIf  cCarteira == "P"
    cCondicao += " AND FIE_CART = 'P' "
    cCondicao += " AND FIE_FORNEC = '" + cCliFor + "' "
    cCondicao += " AND FIE_LOJA = '" + cLoja + "' "
EndIf

If aAdianta[1,4]
    cCondicao += " AND ((FIE_FILORI = '" + cFilAnt + "') OR (FIE_FILORI = ' ')) "
EndIf

cCondicao += " AND D_E_L_E_T_ <> '*' "
cCondicao += " ORDER BY " + SqlOrder( cOrder )
cCondicao := ChangeQuery( cCondicao )

dbUseArea(.T., "TOPCONN", TCGenQry(,,cCondicao), 'FIEAUX', .F., .T.)

For nX := 1 to Len(aStru)
    If aStru[nX,2] != 'C'
        TCSetField('FIE', aStru[nX,1], aStru[nX,2],aStru[nX,3],aStru[nX,4])
    Endif
Next

FIEAUX->( DBGoTop() )

If cCarteira == "R"
    SE1->(dbSetOrder(2))//E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO
Else
    SE2->(dbSetOrder(1))//E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
EndIf

While FIEAUX->( !Eof() )
    nSaldo := 0
    If cCarteira == "R"
        If SE1->(MsSeek(xFilial("SE1") + FIEAUX->FIE_CLIENT + FIEAUX->FIE_LOJA + FIEAUX->FIE_PREFIX + FIEAUX->FIE_NUM + FIEAUX->FIE_PARCEL + FIEAUX->FIE_TIPO ))
            nSaldo := SE1->E1_SALDO
        EndIf
    Else
        If SE2->(MsSeek(xFilial("SE2") + FIEAUX->FIE_PREFIX + FIEAUX->FIE_NUM + FIEAUX->FIE_PARCEL + FIEAUX->FIE_TIPO + FIEAUX->FIE_FORNEC + FIEAUX->FIE_LOJA  ))
            nSaldo := SE2->E2_SALDO
        EndIf
    EndIf
    RecLock( "TRBADT", .T. )
    Replace PEDIDO		With FIEAUX->FIE_PEDIDO
    Replace PREFIXO	With FIEAUX->FIE_PREFIX
    Replace TITULO		With FIEAUX->FIE_NUM
    Replace PARCELA	With FIEAUX->FIE_PARCEL
    Replace TIPO		With FIEAUX->FIE_TIPO

    If cCarteira == "R"
        Replace CLIFOR	With FIEAUX->FIE_CLIENT
    ElseIf cCarteira == "P"
        Replace CLIFOR	With FIEAUX->FIE_FORNEC
    EndIf

    Replace LOJA	With FIEAUX->FIE_LOJA
    Replace MARCA	With cMarca
    Replace VALOR	With FIEAUX->FIE_VALOR
    Replace SALDO	With nSaldo
    TRBADT->( MsUnLock() )

    FIEAUX->( DBSkip() )
EndDo

//Fecho arquivo gerado pela query
dbSelectArea("FIEAUX")
dbCloseArea()

If Select( "TRBADT" ) <> 0
    TRBADT->( DbGoTop() )
EndIf

RestArea(aAreaSE2)
RestArea(aAreaSE1)
RestArea(aArea)

Return


/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³FPedAdtRsd ³ Autor ³ Totvs                ³ Data ³ 27/08/09 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Elimina residuo de pedidos fechados mas que possuem saldo  ³±±
±±³          ³ no relacionamento de Adiantamentos.						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = identificador da certeira, P=Pagar, R=Receber      ³±±
±±³          ³ ExpA1 = Array com os pedidos encerrados                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FPedAdtRsd( cCarteira, aPedidos )

Local nX := 0
Local aArea := GetArea()
Local cQuery := ""

DEFAULT cCarteira := ""
DEFAULT aPedidos	:= {}

If aAdianta == NIL
    aAdianta := CfgAdianta()
    bFilFIE := Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.})
    lAdComPart := aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
Endif

If !Empty(cCarteira) .and. !Empty(aPedidos)
    For nX := 1 to Len(aPedidos)
        dbSelectArea("FIE")
        cQuery 	:= "SELECT SUM(FIE_SALDO) FIE_SALDO "
        cQuery   += "FROM "+RetSqlName("FIE")+" "
        cQuery   += "WHERE FIE_FILIAL = '"+xFilial("FIE")+"' AND "
        cQuery   += "FIE_CART = '"+cCarteira+"' AND "
        cQuery   += "FIE_PEDIDO = '"+aPedidos[nX]+"' AND "
        If aAdianta[1,5]
            cQuery   += "FIE_FILORI = '"+cFilAnt+"' AND "
        EndIf
        cQuery   += "D_E_L_E_T_=' ' "

        cQuery   := ChangeQuery(cQuery)

        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),"TRBFIEX",.T.,.T.)
        TCSetField('TRBFIEX', "FIE_SALDO", "N",17,2)

        dbSelectArea("TRBFIEX")
        If TRBFIEX->FIE_SALDO > 0
            //Ajusta os relacionamentos zerando os saldos
            dbSelectArea("FIE")
            dbSetOrder(1) //Filial + Carteira + Pedido
            If MsSeek(xFilial("FIE")+cCarteira+aPedidos[nX])
                cKeyPedido := FIE->(FIE_FILIAL+FIE_CART+FIE_PEDIDO)
                While !Eof() .and. FIE->(FIE_FILIAL+FIE_CART+FIE_PEDIDO) == cKeyPedido
                    If Eval(bFilFIE) .And. FIE_SALDO > 0
                        RecLock("FIE")
                        FIE_VALOR -= FIE_SALDO
                        FIE_SALDO := 0
                    Endif
                    dbSkip()
                Enddo
            Endif
        Endif
        dbSelectArea("TRBFIEX")
        dbCloseArea()
        dbSelectArea("FIE")
    Next
Endif

RestArea(aArea)

Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FaGrvFR3    ³ Autor ³Totvs                ³ Data ³10.05.2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Efetua a gravacao da tabela FR3.                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Carteira da baixa "R"/"P"                            ³±±
±±³          ³ExpC2: Numero do Pedido                                     ³±±
±±³          ³ExpC3: Prefixo do titulo                                    ³±±
±±³          ³ExpC4: Numero do titulo                                     ³±±
±±³          ³ExpC5: Parcela do titulo                                    ³±±
±±³          ³ExpC6: Tipo do titulo                                       ³±±
±±³          ³ExpC7: Cliente/Fornecedor do titulo                         ³±±
±±³          ³ExpC8: Loja do titulo                                       ³±±
±±³          ³ExpN9: Valor do relacionamento                              ³±±
±±³          ³ExpC10: Numero do Documento                                 ³±±
±±³          ³ExpC11: Serie do Documento                                  ³±±
±±³          ³ExpC12: Item do Documento                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³Esta rotina eh usada no contas a receber a pagar.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FaGrvFR3(cCarteira,cPedido,cPrefixo,cNum,cParcela,cTipo,cCliFor,cLoja,nValor,cDoc,cSerie,cItem)

Local aArea		:= GetArea()
Default cItem	:= ""

If aAdianta == NIL
    aAdianta := CfgAdianta()
    bFilFIE := Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.})
    lAdComPart := aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
Endif

dbSelectArea("FR3")
RecLock("FR3",.T.)
FR3_FILIAL := xFilial("FR3")
FR3_CART	:= cCarteira
FR3_PEDIDO := cPedido
FR3_PREFIX := cPrefixo
FR3_NUM := cNum
FR3_PARCEL := cParcela
FR3_TIPO := cTipo
If cCarteira = "R"
    FR3_CLIENT := cCliFor
Elseif cCarteira = "P"
    FR3_FORNEC := cCliFor
Endif
FR3_LOJA	:= cLoja
FR3_VALOR := nValor
FR3_DOC := cDoc
FR3_SERIE := cSerie
FR3_DATAE := dDataBase
If Trim(cItem) != ""
    FR3_ITEM := cItem
EndIf
iF aAdianta[2,5]
    FR3_FILORI := cFilAnt
EndIf
MsUnLock()

RestArea(aArea)

Return()
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³FinTemSFQ ºAutor  ³Clovis Magenta      º Data ³  04/04/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica se o título teve retenção em outro re- º±±
±±º          ³ gistro para que ao excluir a SFQ, os valores de pcc sejam  º±±
±±º          ³ restaurados.												  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FinTemSFQ(aRetencoes,lVldCpos)

Local lRet := .F.
Local aArea := getArea()
Local aAreaSFQ := SFQ->(getArea())
Local aAreaSE1 := SE1->(getArea())
Local lFinanc	:= "FIN" $ FUNNAME()

DEFAULT lVldCpos		:= .F.
DEFAULT aRetencoes	:= {}

IF !lVldCpos
    IF lFinanc
        DbSelectArea("SFQ")
        dbSetOrder(1) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
        If DbSeek(xFilial("SFQ")+"SE1"+M->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA))
            While SFQ->(!EOF()) .AND. SFQ->(FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI) ==;
                                                    xFilial("SFQ")+"SE1"+M->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)

                If SFQ->(FQ_FILIAL + FQ_ENTDES + FQ_PREFDES + FQ_NUMDES + FQ_PARCDES + FQ_TIPODES + FQ_CFDES + FQ_LOJADES) ==;
                            xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)

                    If SFQ->FQ_SABTPIS + SFQ->FQ_SABTCOF + SFQ->FQ_SABTCSL > 0
                        aAdd(aRetencoes, {SFQ->FQ_SABTPIS , SFQ->FQ_SABTCOF , SFQ->FQ_SABTCSL } )
                        lRet := .T.
                        Exit
                    Endif

                Endif
                SFQ->(dbSkip())
            EndDo
        Endif
    ELSE
        DbSelectArea("SFQ")
        dbSetOrder(1) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
        If DbSeek(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA))
            While SFQ->(!EOF()) .AND. SFQ->(FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI) ==;
                                                    xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)

                If SFQ->(FQ_FILIAL + FQ_ENTDES + FQ_PREFDES + FQ_NUMDES + FQ_PARCDES + FQ_TIPODES + FQ_CFDES + FQ_LOJADES) ==;
                            xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)

                    If SFQ->FQ_SABTPIS + SFQ->FQ_SABTCOF + SFQ->FQ_SABTCSL > 0
                        aAdd(aRetencoes, {SFQ->FQ_SABTPIS , SFQ->FQ_SABTCOF , SFQ->FQ_SABTCSL } )
                        lRet := .T.
                        Exit
                    Endif

                Endif
                SFQ->(dbSkip())
            EndDo
        Endif
    ENDIF
ELSE

    DbSelectArea("SFQ")
    dbSetOrder(2) // FQ_FILIAL + FQ_ENTORI + FQ_PREFORI + FQ_NUMORI + FQ_PARCORI + FQ_TIPOORI + FQ_CFORI + FQ_LOJAORI
    If DbSeek(xFilial("SFQ")+"SE1"+SE1->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA))
        If SFQ->FQ_SABTPIS + SFQ->FQ_SABTCOF + SFQ->FQ_SABTCSL > 0
            aAdd(aRetencoes, {SFQ->FQ_SABTPIS , SFQ->FQ_SABTCOF , SFQ->FQ_SABTCSL } )
            lRet := .T.
        Endif
    Endif

ENDIF

RestArea(aAreaSE1)
RestArea(aAreaSFQ)
RestArea(aArea)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FTemImpCR³ Autor ³Totvs  	                ³ Data ³25.04.2011³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencia de impostos para um titulo CR         ³±±
±±³          ³Obs: Impostos cujo tipo eh um abatimento gerados no SE1     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³.T. = Existem impostos ou imposto especifico para titulo CR ³±±
±±³          ³.F. = Nao existem impostos ou imposto especifico p/titulo CR³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Sigla do imposto a ser procurado                     ³±±
±±³          ³      ÚÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿    ÚÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿              ³±±
±±³          ³      |Sigla | Imposto |    |Sigla | Imposto |              ³±±
±±³          ³      ÃÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄ´    ÃÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄ´              ³±±
±±³          ³      | IRF  | IRRF    |    | ISS  | ISS     |              ³±±
±±³          ³      | PIS  | PIS     |    | FET  | FETHAB  |              ³±±
±±³          ³      | COF  | COFINS  |    | SES  | SEST    |              ³±±
±±³          ³      | CSL  | CSLL    |    | FAC  | FACS    |              ³±±
±±³          ³      | INS  | INSS    |    | FAB  | FABOV   |              ³±±
±±³          ³      | SES  | SEST    |    |      |         |              ³±±
±±³          ³      ÀÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÙ    ÀÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÙ              ³±±
±±³          ³ExpC2: Cliente                                              ³±±
±±³          ³ExpC3: Loja do Cliente                                      ³±±
±±³          ³ExpC4: Prefixo do titulo                                    ³±±
±±³          ³ExpC5: Numero do titulo                                     ³±±
±±³          ³ExpC6: Parcela do titulo                                    ³±±
±±³          ³ExpC7: Tipo do titulo                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FTemImpCR(cImposto,cCliPai,cLojPai,cPrfPai,cNumPai,cParpai,cTipPai)
Local aImpostos	:= {}
Local aArea			:= GetArea()
Local lRet			:= .F.
Local lTipo			:= .T.
Local cTitPai		:= PADR(cPrfPai+cNumPai+cParpai+cTipPai+cCliPai+cLojPai,TAMSX3('E1_TITPAI')[1])
Local	cAliasQry	:= ""
Local cTipPCCBx	:= "/PIS/COF/CSL"
Local cTiposImp	:= MVIRABT+"/"+MVINABT+"/"+MVCSABT+"/"+MVCFABT+"/"+MVPIABT+"/"+MVISABT+"/"+MVFUABT+"/FB-/FC-/"+cTipPCCBx

DEFAULT cImposto	:= "ALL"		//Verifica se existe imposto para o titulo (independe do tipo de imposto)

If !cTipPai $ cTiposImp

    //Se estiver procurando um imposto especifico,
    //monto array com as siglas X os tipos de impostos
    If cImposto != "ALL"

        //Array com os tipos de impostos
        AADD(aImpostos , {"IRF",MVIRABT} )
        AADD(aImpostos , {"INS",MVINABT} )
        AADD(aImpostos , {"ISS",MVISABT} )
        AADD(aImpostos , {"FUN",MVFUABT} )
        AADD(aImpostos , {"FET","FE-"  } )
        AADD(aImpostos , {"FAC","FC-"  } )
        AADD(aImpostos , {"FAB","FB-"  } )
        AADD(aImpostos , {"PIS","PIS/"+MVPIABT})
        AADD(aImpostos , {"COF","COF/"+MVCFABT})
        AADD(aImpostos , {"CSL","CSL/"+MVCSABT})
        AADD(aImpostos , {"SES","SE-"  } )

        nPosImp := aScan( aImpostos,{ |x| x[1] == cImposto } )
        If nPosImp > 0
            cTiposImp := aImpostos[nPosImp,2]
        Else
            cTiposImp := ""
            lTipo	:= .F. //Imposto nao tratado pela rotina
        EndIf

    Endif

    If lTipo

        cAliasQry := GetNextAlias()
        cQuery := "SELECT E1_TIPO, E1_TITPAI, E1_PARCELA "
        cQuery += "FROM " + RetSQLTab('SE1')
        cQuery += "WHERE "
        cQuery += 	"E1_FILIAL = '"+xFilial('SE1')+"' AND "
        cQuery += 	"E1_CLIENTE = '"+ cCliPai +"' AND "
        cQuery += 	"E1_LOJA    = '"+ cLojPai +"' AND "
        cQuery += 	"E1_PREFIXO = '"+ cPrfPai +"' AND "
        cQuery += 	"E1_NUM     = '"+ cNumPai +"' AND "
        cQuery +=	"E1_TIPO IN " + FormatIn(cTiposImp,"/") + " AND "

        cQuery += RetSqlCond("SE1")

        cQuery := ChangeQuery(cQuery)

        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry,.T.,.T.)

        dbSelectArea(cAliasQry)
        DbGotop()
        If !EOF() .AND. !BOF()

            While !( (cAliasQry)->(Eof()) )

                //Se for PCC-CR na baixa e o registro posicionado for do tipo PIS/COF/CSL
                //Verifico se este realmente pertence ao titulo em questao
                //Isto se da porque posso ter baixas parciais e neste caso a ligacao entre
                //titulo pai e imposto eh o E1_TITPAI
                If (cAliasQry)->E1_TIPO $ cTipPCCBx
                    //Se achou um titulo de imposto, sai da rotina
                    If (cAliasQry)->E1_TITPAI == cTitPai
                        lRet := .T.
                        Exit
                    Endif
                Else
                    //Se achou um titulo de imposto, sai da rotina
                    If (cAliasQry)->(E1_PARCELA) == cParPai
                        lRet := .T.
                        Exit
                    Endif

                Endif
                dbSelectArea(cAliasQry)
                (cAliasQry)->(dbSkip())
                Loop
            Enddo

        Endif
        dbSelectArea(cAliasQry)
        dbCloseArea()
        dbSelectArea("SE1")
        SE1->(dbSetOrder(1))

    Endif

    RestArea(aArea)
Endif


Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FValImpCR³ Autor ³Totvs  	                ³ Data ³25.04.2011³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencia de impostos para um titulo CR         ³±±
±±³          ³Obs: Impostos cujo tipo eh um abatimento gerados no SE1     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1 = Valor do imposto									  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Sigla do imposto a ser procurado                     ³±±
±±³          ³      ÚÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿    ÚÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿              ³±±
±±³          ³      |Sigla | Imposto |    |Sigla | Imposto |              ³±±
±±³          ³      ÃÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄ´    ÃÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄ´              ³±±
±±³          ³      | IRF  | IRRF    |    | ISS  | ISS     |              ³±±
±±³          ³      | PIS  | PIS     |    | FET  | FETHAB  |              ³±±
±±³          ³      | COF  | COFINS  |    | SES  | SEST    |              ³±±
±±³          ³      | CSL  | CSLL    |    | FAC  | FACS    |              ³±±
±±³          ³      | INS  | INSS    |    | FAB  | FABOV   |              ³±±
±±³          ³      | SES  | SEST    |    |      |         |              ³±±
±±³          ³      ÀÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÙ    ÀÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÙ              ³±±
±±³          ³ExpC2: Cliente                                              ³±±
±±³          ³ExpC3: Loja do Cliente                                      ³±±
±±³          ³ExpC4: Prefixo do titulo                                    ³±±
±±³          ³ExpC5: Numero do titulo                                     ³±±
±±³          ³ExpC6: Parcela do titulo                                    ³±±
±±³          ³ExpC7: Tipo do titulo                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FValImpCR(cImposto,cCliPai,cLojPai,cPrfPai,cNumPai,cParpai,cTipPai)
Local aImpostos	:= {}
Local aArea			:= GetArea()
Local lTipo			:= .T.
Local cTitPai		:= PADR(cPrfPai+cNumPai+cParpai+cTipPai+cCliPai+cLojPai,TAMSX3('E1_TITPAI')[1])
Local cAliasQry	:= ""
Local cTipPCCBx	:= "/PIS/COF/CSL"
Local cTiposImp	:= MVIRABT+"/"+MVINABT+"/"+MVCSABT+"/"+MVCFABT+"/"+MVPIABT+"/"+MVISABT+"/"+MVFUABT+"/FB-/FC-/"+cTipPCCBx
Local nValImp		:= 0

DEFAULT cImposto	:= "ALL"		//Verifica se existe imposto para o titulo (independe do tipo de imposto)

If !cTipPai $ cTiposImp

    //Se estiver procurando um imposto especifico,
    //monto array com as siglas X os tipos de impostos
    If cImposto != "ALL"

        //Array com os tipos de impostos
        AADD(aImpostos , {"IRF",MVIRABT} )
        AADD(aImpostos , {"INS",MVINABT} )
        AADD(aImpostos , {"ISS",MVISABT} )
        AADD(aImpostos , {"FUN",MVFUABT} )
        AADD(aImpostos , {"FET","FE-"  } )
        AADD(aImpostos , {"FAC","FC-"  } )
        AADD(aImpostos , {"FAB","FB-"  } )
        AADD(aImpostos , {"PIS","PIS/"+MVPIABT})
        AADD(aImpostos , {"COF","COF/"+MVCFABT})
        AADD(aImpostos , {"CSL","CSL/"+MVCSABT})
        AADD(aImpostos , {"SES","SE-"  } )

        nPosImp := aScan( aImpostos,{ |x| x[1] == cImposto } )
        If nPosImp > 0
            cTiposImp := aImpostos[nPosImp,2]
        Else
            cTiposImp := ""
            lTipo	:= .F. //Imposto nao tratado pela rotina
        EndIf

    Endif

    If lTipo
        cAliasQry := GetNextAlias()
        cQuery := "SELECT E1_VLCRUZ, E1_TIPO, E1_TITPAI, E1_PARCELA "
        cQuery += "FROM " + RetSQLTab('SE1')
        cQuery += "WHERE "
        cQuery += 	"E1_FILIAL = '"+xFilial('SE1')+"' AND "
        cQuery += 	"E1_CLIENTE = '"+ cCliPai +"' AND "
        cQuery += 	"E1_LOJA    = '"+ cLojPai +"' AND "
        cQuery += 	"E1_PREFIXO = '"+ cPrfPai +"' AND "
        cQuery += 	"E1_NUM     = '"+ cNumPai +"' AND "
        cQuery +=	"E1_TIPO IN " + FormatIn(cTiposImp,"/") + " AND "

        cQuery += RetSqlCond("SE1")

        cQuery := ChangeQuery(cQuery)

        dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry,.T.,.T.)

        dbSelectArea(cAliasQry)
        DbGotop()
        If !(cAliasQRY)->(EOF()) .AND. !(cAliasQRY)->(BOF())

            While !( (cAliasQry)->(Eof()) )

                //Se for PCC-CR na baixa e o registro posicionado for do tipo PIS/COF/CSL
                //Verifico se este realmente pertence ao titulo em questao
                //Isto se da porque posso ter baixas parciais e neste caso a ligacao entre
                //titulo pai e imposto eh o E1_TITPAI
                If (cAliasQry)->E1_TIPO $ cTipPCCBx
                    //Se achou um titulo de imposto, sai da rotina
                    If (cAliasQry)->E1_TITPAI == cTitPai
                        nValImp += (cAliasQry)->E1_VLCRUZ
                    Endif
                Else
                    //Se achou um titulo de imposto, sai da rotina
                    If (cAliasQry)->(E1_PARCELA) == cParPai
                        nValImp += (cAliasQry)->E1_VLCRUZ
                    Endif
                Endif

                dbSelectArea(cAliasQry)
                (cAliasQry)->(dbSkip())

            Enddo

        Endif
        dbSelectArea(cAliasQry)
        dbCloseArea()
        dbSelectArea("SE1")
        SE1->(dbSetOrder(1))

    Endif

    RestArea(aArea)
Endif

Return(nValImp)

//-------------------------------------------------------------------
/*/
{Protheus.doc} FinGerCM
Gera Correcao Monetaria para titulos

@param 	nOpc = Operacao Titulo/Adiantamento
        cCart = Carteira Pagar/Receber
        nValorCM = Valor da correcao monetaria
        oModelBx = Modelo de dados
        cIdMov = Identificador de origem

@return nil
@author TOTVS

@since 19/09/2017
@version 1.0
/*/
//-------------------------------------------------------------------
Function FinGerCM(nOpc, cCart, nValorCM, oModelBx, cIdMov)

Local aArea := SE5->(GetArea())
Local oSubFK6

Default nOpc := 1
Default cCart := 'P'

If nValorCM <> Nil
    oSubFK6	:= oModelBx:GetModel("FK6DETAIL")

    If !oSubFK6:IsEmpty()
        oSubFK6:AddLine()
    EndIf

    oSubFK6:SetValue( 'FK6_FILIAL'	, xFilial("SE5") )
    oSubFK6:SetValue( 'FK6_IDFK6'	, GetSxEnum('FK6','FK6_IDFK6') )
    oSubFK6:SetValue( 'FK6_TABORI'	, IIF( cCart == 'P' ,'FK2', 'FK1' ) )
    oSubFK6:SetValue( 'FK6_TPDOC'	, 'CM' )
    oSubFK6:SetValue( 'FK6_VALCAL'	, nValorCM )
    oSubFK6:SetValue( 'FK6_VALMOV'	, nValorCM )
    oSubFK6:SetValue( 'FK6_RECPAG'	, "R" )
    oSubFK6:SetValue( 'FK6_IDORIG'	, cIdMov )
    oSubFK6:SetValue( 'FK6_GRVSE5'	, .T.)
    oSubFK6:SetValue( 'FK6_HISTOR'	, IIF(nOpc == 1,OemToAnsi("Correcao Monet Comp. de Titulo"),OemToAnsi("Correcao Monet Comp. de Adiantamento")) )
EndIf

RestArea(aArea)

Return Nil

//-------------------------------------------------------------------
/*/
{Protheus.doc} GetTxMoeNew
Retorna a cotação da moeda 

@param 	aTxMoeda = Array contendo as moedas e suas cotações
                    [1] Número da moeda
                    [2] Taxa da moeda

@param 	nMoeda = Número da moeda a qual se deseja saber a taxa

@return nTxMoeda = Taxa da moeda
@author TOTVS

@since 19/09/2017
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GetTxMoeNew(aTxMoeda,nMoeda)
Local nTxMoeda
Local nAt

Default aTxMoeda := {}

If nMoeda <> 1
    nAt := Ascan(aTxMoeda, {|x| x[1] == nMoeda})
    If nAt > 0
        nTxMoeda := aTxMoeda[nAt][2]
    EndIf
EndIf

Return nTxMoeda


//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc}FinBcoPA
Verifica banco utilizado na inclusao do adiantamento.

@param cAlias Alias aberto para busca utilizando campos da SE2
@return aBancos - [1][1] - CODIGO BANCO
                  [1][2] - AGENCIA
                  [1][3] - CONTA
                  [2]    - MOEDA DO BANCO

@author Clovis Magenta
@since  11/09/2012
*/
//-----------------------------------------------------------------------------------------------------
Function FinBcoPA(cAlias)

Local aBanco := {}

If FindFunction ("FBcoPAOLD")
	aBanco := FBcoPAOLD(cAlias)
Else
	Alert(STR0050)  // 'Por favor, solicite ao administrador do sistema que seja atualizado o fonte FINXOLD.PRX'
Endif	

Return aBanco

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc}FinBcoRA
Verifica banco utilizado na inclusao do adiantamento.

@param cAlias Alias aberto para busca utilizando campos da SE2
@return aBancos - [1][1] - CODIGO BANCO
                  [1][2] - AGENCIA
                  [1][3] - CONTA
                  [2]    - MOEDA DO BANCO

@author Clovis Magenta
@since  11/09/2012
*/
//-----------------------------------------------------------------------------------------------------
Function FinBcoRA(cAlias)
Local aArea		:= GetArea()
Local aAreaFK5	:= FK5->(GetArea())
Local aAreaSA6	:= SA6->(GetArea())
Local cChaveRA	:= ""
Local cIdMov    := ""
Local lMoedaBco	:= .T.
Local aBanco	:= {}
Local aCpos     := { xFilial("FK5", FK5->FK5_FILORI), ;
                    (cAlias)->E1_PREFIXO, ;
                    (cAlias)->E1_NUM, ;
                    (cAlias)->E1_PARCELA, ;
                    (cAlias)->E1_TIPO, ;
                    (cAlias)->E1_CLIENTE, ;
                    (cAlias)->E1_LOJA, ;
                    ""}

cChaveRA := xFilial("SE5")+(cAlias)->(E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA)

cIdMov := FINFK5BUSCA(cChaveRA, "SE5", .F., aCpos)

dbSelectARea("FK5")
dbSetOrder( 1 )
If !Empty(cIdMov) .And. dbSeek( xFilial("FK5") + cIdMov )
    If FK5->FK5_TPDOC = "RA"
        Aadd(aBanco, { FK5->FK5_BANCO, FK5->FK5_AGENCIA, FK5->FK5_CONTA } )

        dbSelectARea("SA6")
        dbSetOrder(1)
        If DbSeek( xFilial("SA6")+FK5->(FK5_BANCO+FK5_AGENCIA+FK5_CONTA) )
            If lMoedaBco
                Aadd(aBanco, SA6->A6_MOEDA )
            Else
                Aadd(aBanco, 0 )
            EndIf
        EndIf
    Else
        Aadd(aBanco, {} )
        Aadd(aBanco, 0 )
    EndIf
Else
    Aadd(aBanco, {} )
    Aadd(aBanco, 0 )
EndIf

RestArea(aAreaSA6)
RestArea(aAreaFK5)
RestArea(aArea)

Return aBanco

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc}GetParcINP
Funcao utilizada para recuperar a parcela do INSS Patronal gerado	³±±

@return cParcINP - Numero da parcela do INSS Patronal

@author Rodrigo Oliveira
@since  10/08/2016
@obs Utilizado pelo módulo de Materiais e PLS
/*/
//-----------------------------------------------------------------------------------------------------
Function GetParcINP(cParcINP, nValINSSPatr)

Local cQry 		:= " "
Local cTitPai	:= SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)

cQry := " SELECT E2_PARCELA, E2_VALOR "
cQry += " FROM " + RetSqlName("SE2") + " SE2 "
cQry += " WHERE E2_FILIAL = '" + xFilial("SE2") + "' "
cQry += " AND E2_TIPO = 'INP' "
cQry += " AND E2_TITPAI = '"+cTitPai+"' "
cQry += " AND D_E_L_E_T_ = ' ' "

cQry := ChangeQuery(cQry)

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQry),"TMPINP",.T.,.T.)

If !("TMPINP")->(Eof())
    cParcINP 		:= TMPINP->E2_PARCELA
    nValINSSPatr	:= TMPINP->E2_VALOR
EndIf

TMPINP->(DbCloseArea())

Return .T.

//-----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} VERIDPROC

Identifica a sequencia de controle do fonte ADVPL com a stored procedure, qualquer alteracao que envolva
diretamente a stored procedure a variavel sera incrementada. Procedure FIN001.

@Author	yuri.porto
@since	14/11/2017
/*/
//-----------------------------------------------------------------------------------------------------
Static Function VerIDProc()
Return '011'

//-------------------------------------------------------------------
/*/{Protheus.doc} getDetrcP
Verifica que la Factura no contenga detracciones ya pagadas  PERU

@author 	Veronica Flores
@param		cLlave - contiene la llave del indice 1
@return		Boolean
@since 		24/10/2018
@version	12.1.17
/*/
//-------------------------------------------------------------------
Function getDetrcP( cLlave As Character) As Logical
    Local aArea	As Array
    Local lRet	As Logical

    Default cLlave 	:= ""

    aArea	:= GetArea()
    lRet	:= .T.

    If cLlave != ""
        dbSelectArea( "SE2" )
        SE2->( dbSetOrder( 1 ) ) //E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
        If SE2->(dbSeek( xFilial( "SE2" ) + cLlave) )
            If SE2->E2_VALOR != SE2->E2_SALDO
                Help( ,, STR0040 ,, STR0039 ,1, 0 )   // "Aviso" // "Factura de entrada con detracción pagada, no se permite eliminar"
                lRet := .F.
            EndIf
        EndIf
    EndIf

    RestArea( aArea )

Return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} FAvaExcRat
Exclui o Rateio contábil se houver

@author Karen Honda
@since 28/07/2016
@version P12
/*/
//-------------------------------------------------------------------
Static Function FAvaExcRat()
Local aAreaAnt	:= GetArea()
Local cPadrao 	:= "512"
Local lPadrao 	:= VerPadrao(cPadrao)
Local cArquivo 	:= ""
Local nHdlPrv 	:= 0
Local cPrograma := FunName()
Local aDiario	:= {}
Local lCusto	:= .F.
Local lItem	 	:= .F.
Local lCLVL	 	:= .F.
Local lMovEnt05 := .F.
Local lMovEnt06 := .F.
Local lMovEnt07 := .F.
Local lMovEnt08 := .F.
Local lMovEnt09 := .F.
Local nRecSE2	:= SE2->(Recno())
Local cChaveBusca	:= ""
Local nTotal	:= 0

Private cLote	  := ""

If SE2->E2_RATEIO == "S" .And. !Empty(SE2->E2_ARQRAT) .and. CtbInUse() .and. lPadrao
    lCusto	  := CtbMovSaldo("CTT")
    lItem	  := CtbMovSaldo("CTD")
    lCLVL	  := CtbMovSaldo("CTH")
    lMovEnt05 := CtbMovSaldo("CT0",,'05')
    lMovEnt06 := CtbMovSaldo("CT0",,'06')
    lMovEnt07 := CtbMovSaldo("CT0",,'07')
    lMovEnt08 := CtbMovSaldo("CT0",,'08')
    lMovEnt09 := CtbMovSaldo("CT0",,'09')

    //inicializa as variaveis de contabilização da LP 512
    VALOR	 := 0
    Valor2 	 := 0
    Valor3	 := 0
    Valor4	 := 0
    Valor5 	 := 0
    Valor6	 := 0
    Valor7	 := 0
    SEST	 := 0
    VlrInStr := 0
    STRLCTPAD 	:= 0
    HISTORICO:= ""

    //Inicializa o processo do lancamento no Pco quando E2_RATEIO == "S"
    PcoIniLan("000021")

    cChaveCV4 := RTrim(SE2->E2_ARQRAT)
    RecLock("SE2" ,.F.,.T.)
    SE2->E2_ARQRAT := "" // Limpa Relacionamento com CV4
    SE2->(MsUnlock())

    //³ Inicializa Lancamento Contabil                                   ³
    nHdlPrv := HeadProva( cLote,;
    cPrograma,;
    Substr(cUsuario,7,6),;
    @cArquivo )

    CV4->(dbSetOrder(1))
    If CV4->(MsSeek(cChaveCV4))   // Chave ja contem filial
        While CV4->(!Eof()) .And.;
        CV4->CV4_FILIAL+DTOS(CV4->CV4_DTSEQ)+CV4->CV4_SEQUEN == cChaveCV4
            //Exclui lancamento para o modulo PCO
            PcoDetLan("000021","01",cPrograma,.T.)

            Debito	:= CV4->CV4_DEBITO
            Credito	:= CV4->CV4_CREDIT

            If lCusto
                CustoD	:= CV4->CV4_CCD
                CustoC	:= CV4->CV4_CCC
                Custo		:= Iif(!Empty(CV4->CV4_CCD),CV4->CV4_CCD,CV4->CV4_CCC)
            EndIf
            If lItem
                ItemD		:= CV4->CV4_ITEMD
                ItemC		:= CV4->CV4_ITEMC
            EndIf
            If lCLVL
                ClvlD		:= CV4->CV4_CLVLDB
                ClVlC		:= CV4->CV4_CLVLCR
            EndIf
            //Entidades adicionais
            If lMovEnt05
                EC05DB := CV4->CV4_EC05DB
                EC05CR := CV4->CV4_EC05CR
            EndIf

            If lMovEnt06
                EC06DB := CV4->CV4_EC06DB
                EC06CR := CV4->CV4_EC06CR
            EndIf

            If lMovEnt07
                EC07DB := CV4->CV4_EC07DB
                EC07CR := CV4->CV4_EC07CR
            EndIf

            If lMovEnt08
                EC08DB := CV4->CV4_EC08DB
                EC08CR := CV4->CV4_EC08CR
            EndIf

            If lMovEnt09
                EC09DB := CV4->CV4_EC09DB
                EC09CR := CV4->CV4_EC09CR
            EndIf

            VALOR	:= Round(xMoeda(CV4->CV4_VALOR,SE2->E2_MOEDA,1,SE2->E2_EMISSAO,3,SE2->E2_TXMOEDA),2)

            VlrInStr 	:= VALOR
            STRLCTPAD 	:= nRecSE2
            cChaveBusca := CtRelation(cPadrao)
            HISTORICO	:= CV4->CV4_HIST

            //desposiciona a SE2 para ser contabilizado pelas variaveis
            SE2->(dbGoBottom())
            SE2->(dbSkip())
            //³ Prepara Lancamento Contabil                                      ³
            //Contabiliza pela variavel VALOR. Nao necessita de controle de flag.
            nTotal += DetProva( nHdlPrv,;
            cPadrao,;
            cPrograma,;
            cLote,;
            /*nLinha*/,;
            /*lExecuta*/,;
            /*cCriterio*/,;
            .T. /*lRateio*/,;
            cChaveBusca,;
            /*aCT5*/,;
            /*lPosiciona*/,;
            /*aFlagCTB*/,;
            /*aTabRecOri*/,;
            /*aDadosProva*/ )

            SE2->(DBGoto(nRecSE2) )

            RecLock("CV4",.F.,.T.)
            CV4->(dbDelete())
            CV4->(MsUnlock())
            CV4->(DbSkip())
        End
    Endif

    //Finaliza o processo do lancamento no Pco quando E2_RATEIO == "S"
    PcoFinLan("000021")

    Valor	 := 0
    VlrInStr := 0
    STRLCTPAD:= 0
    Historico:= ""

    nTotal += DetProva( nHdlPrv,;
    cPadrao,;
    cPrograma,;
    cLote,;
    /*nLinha*/,;
    /*lExecuta*/,;
    /*cCriterio*/,;
    /*lRateio*/,;
    /*cChaveBusca*/,;
    /*aCT5*/,;
    /*lPosiciona*/,;
    /*aFlagCTB*/,;
    /*aTabRecOri*/,;
    /*aDadosProva*/ )

    RodaProva( nHdlPrv,nTotal )

    If nTotal > 0

        //³ Envia para Lancamento Contabil							  ³
        If  UsaSeqCor()
            aDiario := {}
            aDiario := {{"SE2",SE2->(recno()),SE2->E2_DIACTB,"E2_NODIA","E2_DIACTB"}}
        Else
            aDiario := {}
        EndIf

        //³ Efetiva Lan‡amento Contabil                                      ³
        cA100Incl( cArquivo,;
        nHdlPrv,;
        3 /*nOpcx*/,;
        cLote,;
        !isBlind() /*lDigita*/,;
        .F./*lAglutina*/,;
        /*cOnLine*/,;
        /*dData*/,;
        /*dReproc*/,;
        /*aFlagCTB*/,;
        /*aDadosProva*/,;
        aDiario )

    EndIf
Endif

RestArea(aAreaAnt)

Return

//------------------------------
/*/{Protheus.doc}FinCmpAut
Compensação automática Contas a Pagar

@param aSE2, Vetor com os recnos das notas a serem compensadas
@param aNDF_PA, vetor com os recnos dos PA's a serem compensados
@param aParam, vetor de 5 posições
[1] - Contabiliza Online
[2] - Aglutina os movimentos contábeis
[3] - Mostra lnaçmento contábil
@param aEstorno, vetor com recnos a serem cancelados
@param nSldComp, numeric, valor total a ser compensado
@param dBaixa, date, Data da baixa/compensação
@param nTaxaPA, numeric, taxa de movimento a ser considerada no PA
@param nTaxaNF, numeric, taxa de movimento a ser considerada no NF
@param nHdl, numeric, Cabeçalho do arquivo contábil
@param nOperacao, numeric Operação 2=Gera movimento de estorno, 3=Exclui os movimentos
@param aRecSE5, matriz que contém os recnos da SE5 para posterior contabilização
@return lRet, Lógico indicado que a compensação foi efetuada sem erro

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//------------------------------
Function FinCmpAut(aSE2, aNDF_PA, aParam, bBlock, aEstorno, nSldComp, dBaixa, nTaxaPA ,nTaxaNF, nHdl, nOperacao, aRecSE5,aNDFDados, lHelp)
    Local aAreaAtu   := GetArea()
    Local aAreaSE2   := SE2->(GetArea())
    Local aAreaSE5   := SE5->(GetArea())
    Local lContabil  := .F.
    Local lAgluCtb   := .F.
    Local lDigita    := .F.
    Local lEstorno   := .F.
    Local lCmTxCon   := .F.
    Local cArqCtb    := ""
    Local cPadrao    := "597"
    Local nCasDec    := TamSx3("E2_TXMOEDA")[2]
    Local nX         := 0
    Local nY         := 0
    Local nMoedaNF   := 1
    Local nTxMovNF   := 0
    Local cDocNF     := ""
    Local nMoedaPA   := 1
    Local nTxMovPA   := 0
    Local nVlMovPA   := 0
    Local cDocPA     := ""
    Local nVlrMov    := 0
    Local nTotMov    := 0
    Local nVlrPgto   := 0
    Local nTotComp   := 0
    Local lTxConNF   := .F.
    Local lTxContr   := .F.
    Local nQtdNF     := 0
    Local nQtdEs     := 0
    Local nQtdPA     := 0
    Local lSWB       := AliasIndic("SWB")
    Local nRecNF     := 0
    Local nRecPA     := 0
    Local lRet       := .T.
    Local lPaMovBco  := .T.
    Local lVldTotal  := .T.
    Local nVlrAbt    := 0
    Local nDecres    := 0
    Local nAcresc    := 0
    Local lPadrao    := .F.
    Local nTotCtbil  := 0
    Local dDtMov     := dDataBase
    Local nVlrReal   := 0
    Local nVlrEstr   := 0
    Local aPagto     := {}
    Local cSeqNF     := ""
    Local cSeqBx     := ""
    Local cFornAdt   := ""
    Local cLojaAdt   := ""
    Local cDocumen   := ""
    Local cChavSE2   := ""
    Local nRecMovSE5 := 0
    Local cPret      := ""
    Local cE2FilOri  := ""
    Local cTblTmp    := ""
    Local aDICNDF    := {}
    Local cHelp      := ""
    Local lFA330SE2  := ExistBlock("FA330SE2")
    Local lPaBruto   := SuperGetMv("MV_PABRUTO", .F., "2") $ "1| "
    Local lBxVlLiq   := SuperGetMv("MV_BP10925", .F., "1") == "2"
    Local lPaPrime   := SuperGetMv("MV_PAPRIME", .F., "2") == "1"
    Local lUsaFlag   := SuperGetMV("MV_CTBFLAG", .T., .F.)
    Local lIrfBaix   := .F.
    Local lImpost    := .F.
    Local oModelEst  := Nil
    Local oSubFKA    := NIl
    Local cCamposE5  := ""
    Local lMaIntDel  := ExistBlock("MaIntDel")
    Local lRetMaDel  := .T.
    Local aSE5       := {}
    Local aTmp       := {}
    Local lGerCmPA   := .F.
    Local lModEIC    := Type("cModulo") == "C" .And. cModulo == "EIC"
    Local aPASemMov  := {}
    Local aSoluc     := {}
    Local nValVmP    := 0
	Local nValVmC    := 0
    Local cKeyFK7NF  := ""
    Local cKeyFK7PA  := ""
    Local cChaveTit  := ""
    Local nZ         := 0
    Local lContinua  := .F.

    Default aSE2        := {}
    Default aNDF_PA     := {}
    Default aParam      := {}
    Default bBlock      := {|| .T.}
    Default aEstorno    := {}
    Default nSldComp    := 0
    Default dBaixa      := dDatabase
    Default nTaxaPA     := 0
    Default nTaxaNF     := 0
    Default nHdl        := 0
    Default nOperacao   := 3
    Default aRecSE5		:= {}
    Default aNDFDados	:= {}
    Default lHelp       := .F.

    Private nHdlPrv    := 0
    Private cLoteCtb   := ""
    Private ABATIMENTO := 0
    Private aFlagCTB   := {}

    lEstorno := Len(aEstorno) > 0

    If Len(aParam) >= 3
        lContabil  := aParam[01]
        lAgluCtb   := aParam[02]
        lDigita    := aParam[03]

        If (lContabil .Or. (lEstorno .And. nOperacao == 3))
            nHdlPrv := nHdl
            dbSelectArea("SX5")
            dbSetOrder(1)

            If !SX5->(DbSeek(xFilial()+"09FIN"))
                SX5->(DbSeek(xFilial()+"09"))
            EndIf

            cLoteCtb := X5Descri()

            If nHdl <= 0
                nHdlPrv := HeadProva(cLoteCtb, "FINA340", Substr(cUsuario, 7, 6), @cArqCtb)
            EndIf
        EndIf
    EndIf

    If (lPaBruto .And. (lBxVlLiq .Or. lPaPrime)) .Or. (!lPaBruto .And. (!lBxVlLiq .Or. !lPaPrime))
        If !lEstorno
            cHelp := IIf(lPaBruto, "FINPABRU", "FINPALIQ")
            Help(" ", 1, cHelp, Nil, STR0044, 2, 0,,,,,, {STR0045})
            lRet := .F.
        EndIf
    EndIf

    If lRet
        DbSelectArea("SA2")
        SA2->(DbSetOrder(1))
        DbSelectArea("SE2")
        SE2->(DbSetOrder(1))
        lCmTxCon  := If(cPaisLoc == "BRA", SuperGetMv("MV_CMTXCON", .F., .F.), lCmTxCon)
        nQtdNF    := Len(aSE2)
        nQtdEs    := Len(aEstorno)
        nQtdPA    := Len(aNDF_PA)
        nTotComp  := nSldComp
        lVldTotal := nTotComp > 0
        VALOR     := 0
        VALOR2    := 0
        REGVALOR  := 0

        If lEstorno
            cPadrao  := "589"
        EndIf

        lPadrao := VerPadrao(cPadrao) 
        lContabil := lPadrao .and. lContabil
        
        Begin Transaction
            For nX := 1 To nQtdNF
                If lEstorno
                    If nX > 1 .And. aSE2[nX] == aSE2[nX-1]
                        Loop
                    EndIf

                    SE2->(MsGoto(aSE2[nX]))
                    cDocumen    := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                    cTblTmp     := FinTitCan(cDocumen)

                    If !Empty(cTblTmp)
                        (cTblTmp)->(DbSetOrder(1))
                        SE5->(DbSetOrder(7))

                        While lRet .And. (cTblTmp)->(!Eof()) .And. !Empty((cTblTmp)->SEQ)
                            SE5->(DbGoto((cTblTmp)->RECNO))

                            If !SE5->(MsSeek(SE5->E5_FILIAL + cDocumen + (cTblTmp)->SEQ))
                                (cTblTmp)->(DbSkip())
                                Loop
                            EndIf

                            nRecMovSE5 := SE5->(Recno())
                            SE5->(DbGoto((cTblTmp)->RECNO))
                            cChavSE2   := xFilial("SE2", SE5->E5_FILORIG) + SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_FORNECE+E5_LOJA)

                            If SE2->(MsSeek(cChavSE2))

                                For nZ := 1 To Len(aEstorno)
                                    IF VALTYPE(aEstorno[nZ][1]) == "N"
                                        If SE2->(RECNO()) == aEstorno[nZ][1]
                                            lContinua := .T.
                                        Endif
                                    ELSE
                                        lContinua := .T.
                                        Exit
                                    ENDIF
                                Next

                               If lContinua
                                    For nY := 1 To 2
                                        nVlrAbt := 0
                                        nAcresc := 0
                                        nDecres := 0

                                        If nY == 2
                                            SE5->(DbGoto(nRecMovSE5))
                                            SE2->(DbGoto(aSE2[nX]))
                                        EndIf

                                        RecLock("SE2")
                                        SE2->E2_SALDO += SE5->E5_VALOR

                                        If cPaisLoc == "BRA"
                                            lImpost := SE5->(E5_VRETPIS+E5_VRETCOF+E5_VRETCSL+E5_VRETIRF+E5_VRETISS) > 0

                                            If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                                                nVlrAbt := FinCanAba()
                                            EndIf

                                            If lImpost .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|"+MVTXA+"|"+MVTAXA+"|INA|DIC"
                                                If SE5->(E5_VRETPIS+E5_VRETCOF+E5_VRETCSL) > 0
                                                    SE2->E2_SALDO += SE5->(E5_VRETPIS+E5_VRETCOF+E5_VRETCSL)

                                                    If SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL) > 0
                                                        SE2->E2_VRETPIS -= SE5->E5_VRETPIS
                                                        SE2->E2_VRETCOF -= SE5->E5_VRETCOF
                                                        SE2->E2_VRETCSL -= SE5->E5_VRETCSL

                                                        cPret := If(SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL) == 0, "1", " ")

                                                        SE2->E2_PRETPIS := cPret
                                                        SE2->E2_PRETCOF := cPret
                                                        SE2->E2_PRETCSL := cPret
                                                    EndIf
                                                EndIf

                                                If SE5->E5_VRETIRF > 0
                                                    SE2->E2_SALDO += SE5->E5_VRETIRF

                                                    If SE2->E2_VRETIRF > 0
                                                        SE2->E2_VRETIRF -= SE5->E5_VRETIRF
                                                        cPret := If(SE2->E2_VRETIRF == 0, "1", " ")
                                                        SE2->E2_PRETIRF := cPret
                                                    EndIf
                                                EndIf

                                                If SE5->E5_VRETISS > 0
                                                    SE2->E2_SALDO += SE5->E5_VRETISS

                                                    If SE2->E2_VRETISS > 0
                                                        SE2->E2_VRETISS -= SE5->E5_VRETISS
                                                    EndIf
                                                EndIf

                                                FinDelTx(cE2FilOri)
                                            ElseIf SE2->E2_TIPO $ MVPAGANT
                                                Aadd(aDICNDF, {SE2->(Recno()), SE5->E5_SEQ})
                                            EndIf

                                            If nVlrAbt > 0
                                                SE2->E2_SALDO += nVlrAbt
                                            EndIf
                                        EndIf

                                        //Estorno dos valores acessórios fixos
                                        If SE5->(E5_VLJUROS+E5_VLDESCO) != 0 .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                                            nAcresc := SE5->E5_VLJUROS
                                            nDecres := SE5->E5_VLDESCO

                                            If SE2->E2_MOEDA > 1
                                                nAcresc := Round(xMoeda(nAcresc, 1, SE2->E2_MOEDA, SE5->E5_DATA, nCasDec, Nil, SE5->E5_TXMOEDA), 2)
                                                nDecres := Round(xMoeda(nDecres, 1, SE2->E2_MOEDA, SE5->E5_DATA, nCasDec, Nil, SE5->E5_TXMOEDA), 2)
                                            EndIf

                                            SE2->E2_SALDO   += nDecres - nAcresc
                                            SE2->E2_SDACRES += nAcresc
                                            SE2->E2_SDDECRE += nDecres
                                        EndIf

                                        If NoRound(SE2->E2_VALOR, 2) == NoRound(SE2->E2_SALDO, 2)
                                            SE2->E2_BAIXA   := CTOD("  /  /  ")
                                            SE2->E2_CORREC  := 0
                                            SE2->E2_MOVIMEN := SE2->E2_BAIXA
                                        EndIf

                                        SE2->(MsUnLock())

                                        If SE2->E2_MOEDA > 1 .And. !SE2->E2_TIPO $ MVABATIM+"|"+MVTXA+"|"+MVTAXA+"|INA|DIC"
                                            FinExclCM(SE5->E5_FILIAL, SE5->E5_SEQ)
                                        EndIf

                                        //Estorno FK2.
                                        If AllTrim(SE5->E5_TABORI) == "FK2"
                                            If lMaIntDel
                                                aTmp := GetArea()
                                                aSE5 := SE5->(GetArea())

                                                If (lRetMaDel := ExecBlock("MaIntDel",.F.,.F.))
                                                    nOperacao := 2
                                                EndIf

                                                RestArea(aSE5)
                                                RestArea(aTmp)
                                            EndIf

                                            If lRetMaDel
                                                FK2->(DbSetOrder(1))

                                                If FK2->(MsSeek(SE5->(E5_FILIAL+E5_IDORIG)))
                                                    oModelEst := FWLoadModel("FINM020")
                                                    oModelEst:SetOperation(4)
                                                    oModelEst:Activate()
                                                    oSubFKA := oModelEst:GetModel("FKADETAIL")
                                                    oSubFKA:SeekLine({{"FKA_IDORIG", SE5->E5_IDORIG}})
                                                    oModelEst:SetValue("MASTER", "E5_GRV", .T.)
                                                    oModelEst:SetValue("MASTER", "HISTMOV", "Cancelamento de Compensação")
                                                    oModelEst:SetValue("MASTER", "E5_CAMPOS", cCamposE5 )
                                                    oModelEst:SetValue("MASTER", "E5_OPERACAO", nOperacao)

                                                    cCamposE5 := "{"

                                                    If lMaIntDel
                                                        If lUsaFlag
                                                            aAdd(aFlagCTB, {"E5_LA", "S", "SE5", SE5->(Recno()), 0, 0, 0})
                                                        EndIf

                                                        If UsaSeqCor()
                                                            cCamposE5 += "{'E5_NODIA', ''}"
                                                        EndIf
                                                    EndIf

                                                    cCamposE5 += "}"

                                                    If oModelEst:VldData()
                                                        oModelEst:CommitData()
                                                        SE5->(dbGoto(oModelEst:GetValue("MASTER", "E5_RECNO")))
                                                    Else
                                                        lRet := .F.
                                                        cLog := cValToChar(oModelEst:GetErrorMessage()[4]) + ' - '
                                                        cLog += cValToChar(oModelEst:GetErrorMessage()[5]) + ' - '
                                                        cLog += cValToChar(oModelEst:GetErrorMessage()[6])
                                                        Help(Nil, Nil, "FINCMPAUTO", Nil, cLog, 1, 0 )
                                                    EndIf

                                                    If lRet .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                                                        If lPadrao .And. (lContabil .Or. (!lContabil .And. (nOperacao == 3 .And. AllTrim(SE5->E5_LA) == "S")))
                                                            STRLCTPAD := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                                                            VALOR     := If(SE2->E2_MOEDA != 1, SE5->E5_VLMOED2, SE5->E5_VALOR)
                                                            VALOR2    := SE5->E5_VLCORRE
                                                            nTotCtbil += VALOR
                                                            DetProva(nHdlPrv, cPadrao, "FINA340", cLoteCtb, Nil, Nil, Nil, Nil, Nil, Nil, Nil, @aFlagCTB, Nil, Nil)
                                                            VALOR     := 0
                                                            VALOR2    := 0
                                                        EndIf
                                                    EndIf

                                                    oModelEst:DeActivate()
                                                    oModelEst:Destroy()
                                                    oModelEst:= Nil
                                                    oSubFKA := Nil
                                                Else
                                                    lRet := .F.
                                                    Help(Nil, Nil, "FINCMPAUTO", Nil, STR0043, 1, 0 )
                                                EndIf
                                            EndIf
                                        EndIf
                                    Next nY
                                    lContinua:= .F.
                                Endif    
                            EndIf

                            If (lRet)
                                // Executa o bloco de codigo passado
                                Eval(bBlock, aSE2[nX], cDocumen)
                            EndIf

                            (cTblTmp)->(DbSkip())
                        EndDo
                    EndIf
                Else
                    If (nX == 1 .Or. SE2->E2_SALDO <= 0)
                        SE2->(MsGoto(aSE2[nX]))
                    EndIf

                    If SE2->E2_SALDO <= 0
                        Loop
                    ElseIf nSldComp <= 0
                        nSldComp := SE2->E2_SALDO
                    EndIf

                    lIrfBaix := SA2->(Dbseek(xFilial("SA2")+SE2->(E2_FORNECE+E2_LOJA))) .And. SA2->A2_CALCIRF == "2"
                    nRecNF   := SE2->(Recno())
                    lTxConNF := (lCmTxCon .And. SE2->E2_MOEDA > 1 .And. SE2->E2_TXMOEDA != 0)
                    nMoedaNF := SE2->E2_MOEDA
                    nTxMovNF := 0
                    nTotMov  := 0
                    nVlrAbt  := SomaAbat(SE2->E2_PREFIXO, SE2->E2_NUM, SE2->E2_PARCELA, "P", SE2->E2_MOEDA,,SE2->E2_FORNECE)
                    nAcresc  := SE2->E2_SDACRES
                    nDecres  := SE2->E2_SDDECRE
                    nSldComp := ((nSldComp+nAcresc) - (nVlrAbt+nDecres))
                    cDocNF   := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                    cSeqNF   := FaNxtSeqBx("SE2",.T.)
                    
					cChaveTit := xFilial("SE2") + "|" + SE2->E2_PREFIXO + "|" + SE2->E2_NUM + "|" + SE2->E2_PARCELA + "|" + SE2->E2_TIPO + "|" + SE2->E2_FORNECE + "|" + SE2->E2_LOJA
					cKeyFK7NF := FINGRVFK7("SE2", cChaveTit)

                    If SE2->E2_MOEDA > 1
                        nTxMovNF := nTaxaNF

                        If nTxMovNF <= 0
                            nTxMovNF := Iif(SE2->E2_TXMOEDA > 0, SE2->E2_TXMOEDA, RecMoeda(If(Empty(SE2->E2_DTVARIA), dBaixa, SE2->E2_DTVARIA), SE2->E2_MOEDA))
                        EndIf
                    EndIf

                    If nRecPA > 0
                        SE2->(DbGoto(nRecPA))
                    EndIf

                    For nY := 1 To nQtdPA
                        //Posiciono no PA
                        SE2->(DbGoto(aNDF_PA[nY]))

                        If (nRecPA == 0 .Or. !lPaMovBco .Or. SE2->E2_SALDO <= 0) 

                            If (aNDF_PA[nY] <= 0 .Or. SE2->E2_SALDO <= 0)
                                Loop
                            EndIf

                            lPaMovBco := .T.
                        EndIf

                        If SE2->E2_TIPO $ MVPAGANT .And. nRecPA != SE2->(Recno())
                            aMovPA := FinMovPA()

                            If !aMovPA[1]
                                lPaMovBco := aMovPA[1]
                                aAdd(aPASemMov, {SE2->E2_PREFIXO, SE2->E2_NUM, SE2->E2_PARCELA, SE2->E2_TIPO} ) 
                                Loop
                            EndIf

                            dDtMov := aMovPA[2]
                        EndIf

                        nRecPA   := SE2->(Recno())
                        lTxContr := (lTxConNF .And. SE2->E2_MOEDA > 1 .And. SE2->E2_TXMOEDA > 0)
                        nVlrMov  := SE2->E2_SALDO
                        nMoedaPA := SE2->E2_MOEDA
                        nTxMovPA := 0
                        nVlrPgto := 0
                        nVlMovPA := 0
                        cDocPA   := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                        cFornAdt := SE2->E2_FORNECE
                        cLojaAdt := SE2->E2_LOJA
                        cSeqBx   := FaNxtSeqBx("SE2",.T.)
                        aPagto   := {}
                        lGerCmPA := !lCmTxCon .And. lModEIC .And. nTaxaNF > 0 .And. nMoedaNF > 1

       					cChaveTit := xFilial("SE2") + "|" + SE2->E2_PREFIXO + "|" + SE2->E2_NUM + "|" + SE2->E2_PARCELA + "|" + SE2->E2_TIPO + "|" + SE2->E2_FORNECE + "|" + SE2->E2_LOJA
    					cKeyFK7PA := FINGRVFK7("SE2", cChaveTit)

                        If !Empty(SE2->E2_TXMDCOR)	
                            nValVmP := Round((SE2->E2_VALOR * SE2->E2_TXMDCOR) - SE2->E2_VLCRUZ,2)
                        Endif

                        If cSeqNF > cSeqBx
                            cSeqBx := cSeqNF
                        EndIf

                        If SE2->E2_MOEDA > 1
                            nTxMovPA := nTaxaPA

                            If nTxMovPA <= 0
                                nTxMovPA := Iif(SE2->E2_TXMOEDA > 0, SE2->E2_TXMOEDA, RecMoeda(If(Empty(SE2->E2_DTVARIA) , dBaixa, Iif((lPaMovBco),dDtMov,SE2->E2_DTVARIA)), SE2->E2_MOEDA))
                            EndIf
                        EndIf

                        If Len(aNDFDados) >= nY .and. aNDF_PA[nY] == aNDFDados[nY][1]
                            aValores := aClone( aNDFDados[nY][3] )
                            If aValores[12] > 0
                                nVlrMov := If(nMoedaPA == nMoedaNF, aValores[11], aValores[12])
                            Endif
                        ENDIF

                        If nMoedaPA != nMoedaNF
                            If (nMoedaPA == 1 .Or. nMoedaNF == 1)
                                If nMoedaPA == 1
                                    nVlrMov := xMoeda(nVlrMov, SE2->E2_MOEDA, nMoedaNF, dDtMov, nCasDec, 0, nTxMovNF)
                                Else
                                    nVlrMov := xMoeda(nVlrMov, SE2->E2_MOEDA, nMoedaNF, dDtMov, nCasDec, nTxMovPA)
                                EndIf
                            Else
                                nVlrMov := xMoeda(nVlrMov, SE2->E2_MOEDA, nMoedaNF, dDtMov, nCasDec, nTxMovPA, nTxMovNF)
                            EndIf
                        EndIf

                        If (nTotMov + nVlrMov) > nSldComp
                            nVlrMov := (nSldComp - nTotMov)
                        EndIf

                        nTotMov  += Round(nVlrMov, 2)
                        nTotComp -= Round(nVlrMov, 2)
                        nVlMovPA := nVlrMov

                        If lTxContr
                            If nMoedaPA != nMoedaNF
                                nVlMovPA := xMoeda(nVlrMov, nMoedaNF, nMoedaPA, dDtMov, nCasDec, nTxMovNF, nTxMovPA)
                            EndIf

                            nVlrPgto  := xMoeda(nVlMovPA, nMoedaPA, 1, dDtMov, nCasDec, nTxMovPA)
                        EndIf

                        If nVlrMov > 0
                            If (nMoedaNF == 1 .Or. nMoedaPA == 1)
                                If nMoedaNF == 1
                                    nVlrReal := Round(nVlrMov, 2)
                                    nVlrEstr := Round(If(nMoedaPA > 1, xMoeda(nVlrMov, nMoedaNF, nMoedaPA, dDtMov, nCasDec, 0, nTxMovPA), nVlrReal), 2)
                                    nVlMovPA := nVlrEstr
                                Else
                                    nVlrEstr := Round(nVlrMov, 2)
                                    nVlrReal := Round(xMoeda(nVlrMov, nMoedaNF, nMoedaPA, dDtMov, nCasDec, nTxMovNF, 0), 2)
                                    nVlMovPA := nVlrReal
                                EndIf
                            Else
                                nVlrEstr := Round(nVlMovPA, 2)
                                nVlrReal := Round(xMoeda(nVlMovPA, nMoedaPA, 1, dDtMov, nCasDec, nTxMovPA, 0), 2)
                                nVlMovPA := nVlrEstr
                            EndIf

                            Aadd(aPagto, {nRecPA, nTxMovPA, nVlrMov, nVlrReal, nVlrEstr, nVlrPgto, cDocNF, 0, 0, cFornAdt, cLojaAdt, cSeqBx, cLoteCtb, lGerCmPA, cKeyFK7NF })

                            If (lGerCmPA .Or. (nMoedaPA == 1 .And. nMoedaNF > 1))
                                aPagto[len(aPagto), 2] := nTxMovNF
                            EndIf

                            RecLock("SE2")
                            SE2->E2_SALDO   -= nVlMovPA
                            SE2->E2_BAIXA   := dBaixa
                            SE2->E2_LOTE    := cLoteCtb
                            SE2->E2_MOVIMEN := SE2->E2_BAIXA
                            SE2->E2_DESCONT := 0
                            SE2->E2_MULTA   := 0
                            SE2->E2_JUROS   := 0
                            SE2->E2_VALLIQ  := nVlMovPA
                            SE2->(MsUnLock())

                            //Posiciona na NF
                            SE2->(MsGoto(nRecNF))

                            If (nMoedaNF == 1 .Or. nMoedaPA == 1)
                                If nMoedaNF == 1
                                    nVlrReal := Round(nVlrMov, 2)
                                    nVlrEstr := Round(If(nMoedaPA > 1, xMoeda(nVlrMov, nMoedaNF, nMoedaPA, SE2->E2_EMISSAO, nCasDec, 0, nTxMovPA), nVlrReal), 2)
                                Else
                                    nVlrEstr := Round(nVlrMov, 2)
                                    nVlrReal := Round(xMoeda(nVlrMov, nMoedaNF, nMoedaPA, SE2->E2_EMISSAO, nCasDec, nTxMovNF, 0), 2)
                                EndIf
                            Else
                                nVlrEstr := Round(nVlrMov, 2)
                                nVlrReal := Round(xMoeda(nVlrMov, nMoedaNF, 1, SE2->E2_EMISSAO, nCasDec, nTxMovNF, 0), 2)
                            EndIf

                            If !Empty(SE2->E2_TXMDCOR)	
		                        nValVmC := Round((SE2->E2_VALOR * SE2->E2_TXMDCOR) - SE2->E2_VLCRUZ,2)
	                        Endif

                            Aadd(aPagto, {nRecNF, nTxMovNF, nVlrMov, nVlrReal, nVlrEstr, nVlrPgto, cDocPA, nDecres, nAcresc, cFornAdt, cLojaAdt, cSeqBx, cLoteCtb, lGerCmPA, cKeyFK7PA})

                            If nMoedaNF == 1 .And. nMoedaPA > 1
                                aPagto[len(aPagto), 2] := nTxMovPA
                            EndIf

                            RecLock("SE2")
                            SE2->E2_SALDO   -= Round(nVlrMov, 2)
                            SE2->E2_BAIXA   := dBaixa
                            SE2->E2_LOTE    := cLoteCtb
                            SE2->E2_MOVIMEN := SE2->E2_BAIXA
                            SE2->E2_DESCONT := 0
                            SE2->E2_MULTA   := 0
                            SE2->E2_JUROS   := 0
                            SE2->E2_VALLIQ  := Round(nVlrMov, 2)

                            If cPaisLoc == "BRA" .And. (SE2->(E2_SDDECRE+E2_SDACRES)+ nVlrAbt) > 0
                                If SE2->(E2_SDDECRE+E2_SDACRES) > 0
                                    SE2->E2_SDDECRE -= nDecres
                                    SE2->E2_SALDO   -= nDecres
                                    SE2->E2_SDACRES -= nAcresc
                                EndIf

                                If SE2->E2_SALDO <= nVlrAbt
                                    SE2->E2_SALDO -= nVlrAbt
                                    FinBxAbat(nVlrAbt, nTxMovNF, dBaixa, cLoteCtb)
                                EndIf
                            EndIf

                            If lFA330SE2
                                ExecBlock("FA330SE2",.F.,.F.)
                            EndIf

                            SE2->(MsUnLock())

                            //Trade Easy
                            If lSWB .And. !Empty(SWB->WB_BANCO)
                                SA6->(DbSetOrder(1))
                                SA6->(DbSeek(xFilial("SA6")+AVKEY(SWB->WB_BANCO,"A6_COD")+AVKEY(SWB->WB_AGENCIA,"A6_AGENCIA")+AVKEY(SWB->WB_CONTA,"A6_NUMCON")))
                            EndIf

                            lRet := FinMovCmp(Nil, "FINA340", bBlock, lContabil, dBaixa, aPagto, aRecSE5, nValVmP, nValVmC)

                            // Executa o bloco de codigo passado
                            If (lRet)
                                Eval(bBlock, aSE2[nX], cSeqBx)
                            EndIf

                            If lRet .And. lPadrao .And. lContabil
                                STRLCTPAD := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                                VALOR     := If(Val(FK2->FK2_MOEDA) == 1, FK2->FK2_VALOR, FK2->FK2_VLMOE2)
                                VALOR2    := SE5->E5_VLCORRE
                                nTotCtbil += VALOR
                                REGVALOR  := nRecPA
                                DetProva(nHdlPrv, cPadrao, "FINA340", cLoteCtb,/*nLinha*/,/*lExecuta*/,/*cCriterio*/,/*lRateio*/,/*cChaveBusca*/,/*aCT5*/,/*lPosiciona*/,@aFlagCTB,/*aTabRecOri*/,/*aDadosProva*/)
                                VALOR     := 0
                                VALOR2    := 0
                            EndIf
                        EndIf

                        If (!lRet .Or. (nY == nQtdPA) .Or. (nTotMov >= nSldComp))
                            exit
                        EndIf

                        SE2->(MsGoto(nRecPA))
                    Next nY

                    SE2->(MsGoto(nRecNF))
                EndIf

                nSldComp := 0
                nAcresc  := 0
                nVlrAbt  := 0
                nDecres  := 0

                If (!lRet .Or. (nX == nQtdNF) .Or. (lVldTotal .And. nTotComp <= 0))
                    If !lRet
                        DisarmTransaction()
                    EndIf

                    exit
                EndIf

                SE2->(MsGoto(nRecNF))
            Next nX

            //Contabilização
            If lRet .And. lPadrao .And. nTotCtbil > 0
                VALOR := nTotCtbil
                SE5->(dbGoTo(0))
                SE2->(dbGoTo(0))
                FK2->(dbGoTo(0))

                RodaProva(nHdlPrv, VALOR)
                cA100Incl(cArqCtb, nHdlPrv, 1, cLoteCtb, lDigita, lAgluCtb)
            EndIf
        End Transaction
        If lHelp .and. Len(aPASemMov) > 0  
            aAdd(aSoluc,STR0049 + CRLF)
            aEval(aPASemMov, {|x| aAdd(aSoluc,Alltrim(x[4]) + "-" + Alltrim(x[1]) + "-" + Alltrim(x[2]) + "-" + Alltrim(x[3]) + CRLF)} )
            Help(" ",1,"NOMOVADT",,STR0048,1,0,,,,,,aSoluc) 
        EndIf    
    EndIf

    If lEstorno .And. __oCompAu != Nil
        __oCompAu:Delete()
        __oCompAu := Nil
    EndIf

    RestArea(aAreaSE5)
    RestArea(aAreaAtu)
    RestArea(aAreaSE2)
Return lRet

//------------------------------
/*/{Protheus.doc}FinCmpAFK
Compensação automática Contas a Pagar pelas FKs

@param aSE2, Vetor com os recnos das notas a serem compensadas
@param aNDF_PA, vetor com os recnos dos PA's a serem compensados
@param aParam, vetor de 5 posições
[1] - Contabiliza Online
[2] - Aglutina os movimentos contábeis
[3] - Mostra lnaçmento contábil
@param aEstorno, vetor com recnos a serem cancelados
@param nSldComp, numeric, valor total a ser compensado
@param dBaixa, date, Data da baixa/compensação
@param nTaxaPA, numeric, taxa de movimento a ser considerada no PA
@param nTaxaNF, numeric, taxa de movimento a ser considerada no NF
@param nHdl, numeric, Cabeçalho do arquivo contábil
@param nOperacao, numeric Operação 2=Gera movimento de estorno, 3=Exclui os movimentos
@param aRecSE5, matriz que contém os recnos da SE5 para posterior contabilização
@return lRet, Lógico indicado que a compensação foi efetuada sem erro

@author Rodrigo Oliveira
@since  04/03/2021
@version 12
@type function
/*/
//------------------------------
Function FinCmpAFK(aSE2, aNDF_PA, aParam, bBlock, aEstorno, nSldComp, dBaixa, nTaxaPA ,nTaxaNF, nHdl, nOperacao, aRecSE5,aNDFDados, lHelp)
    Local aAreaAtu   As Array
    Local aAreaSE2   As Array
    Local aAreaFK2   As Array
    Local lContabil  As Logical
    Local lAgluCtb   As Logical
    Local lDigita    As Logical
    Local lEstorno   As Logical
    Local lCmTxCon   As Logical
    Local cArqCtb    As Character
    Local cQry       As Character
    Local cPadrao    As Character
    Local nCasDec    As Numeric
    Local nX         As Numeric
    Local nY         As Numeric
    Local nMoedaNF   As Numeric
    Local nTxMovNF   As Numeric
    Local cDocNF     As Character
    Local nMoedaPA   As Numeric
    Local nTxMovPA   As Numeric
    Local nVlMovPA   As Numeric
    Local cDocPA     As Character
    Local nVlrMov    As Numeric
    Local nTotMov    As Numeric
    Local nVlrPgto   As Numeric
    Local nTotComp   As Numeric
    Local lTxConNF   As Logical
    Local lTxContr   As Logical
    Local nQtdNF     As Numeric
    Local nQtdEs     As Numeric
    Local nQtdPA     As Numeric
    Local lSWB       As Logical
    Local nRecNF     As Numeric
    Local nRecPA     As Numeric
    Local lRet       As Logical
    Local lPaMovBco  As Logical
    Local lVldTotal  As Logical
    Local nVlrAbt    As Numeric
    Local nDecres    As Numeric
    Local nAcresc    As Numeric
    Local lPadrao    As Logical
    Local nTotCtbil  As Numeric
    Local dDtMov     As Date
    Local nVlrReal   As Numeric
    Local nVlrEstr   As Numeric
    Local aPagto     As Array
    Local cSeqNF     As Character
    Local cSeqBx     As Character
    Local cFornAdt   As Character
    Local cLojaAdt   As Character
    Local cChavSE2   As Character
    Local nRecMovSE5 As Numeric
    Local nRecMovFK2 As Numeric
    Local cPret      As Character
    Local cE2FilOri  As Character
    Local cTblTmp    As Character
    Local aDICNDF    As Array
    Local cHelp      As Character
    Local lFA330SE2  As Logical
    Local lPaBruto   As Logical
    Local lBxVlLiq   As Logical
    Local lPaPrime   As Logical
    Local lUsaFlag   As Logical
    Local lIrfBaix   As Logical
    Local lImpPCC    As Logical
    Local oModelEst  As Object
    Local oSubFKA    As Object
    Local cCamposE5  As Character
    Local lMaIntDel  As Logical
    Local lRetMaDel  As Logical
    Local aSE5       As Array
    Local aFK2       As Array
    Local aTmp       As Array
    Local lGerCmPA   As Logical
    Local lModEIC    As Logical
    Local aPASemMov  As Array
    Local aSoluc     As Array
    Local nValVmP    As Numeric
	Local nValVmC    As Numeric
    Local nRecFK2    As Numeric
    Local cKeyFK7NF  As Character
    Local cKeyFK7PA  As Character
    Local cChaveTit  As Character
    Local cTmp       As Character
    Local nZ         As Numeric
    Local lContinua  As Logical

    Default aSE2        := {}
    Default aNDF_PA     := {}
    Default aParam      := {}
    Default bBlock      := {|| .T.}
    Default aEstorno    := {}
    Default nSldComp    := 0
    Default dBaixa      := dDatabase
    Default nTaxaPA     := 0
    Default nTaxaNF     := 0
    Default nHdl        := 0
    Default nOperacao   := 3
    Default aRecSE5		:= {}
    Default aNDFDados	:= {}
    Default lHelp       := .F.

    Private nHdlPrv    := 0
    Private cLoteCtb   := ""
    Private ABATIMENTO := 0
    Private aFlagCTB   := {}

    aAreaAtu   := GetArea()
    aAreaSE2   := SE2->(GetArea())
    aAreaFK2   := FK2->(GetArea())
    lContabil  := .F.
    lAgluCtb   := .F.
    lDigita    := .F.
    lEstorno   := .F.
    lCmTxCon   := .F.
    cArqCtb    := ""
    cQry       := ""
    cPadrao    := "597"
    nCasDec    := TamSx3("E2_TXMOEDA")[2]
    nX         := 0
    nY         := 0
    nMoedaNF   := 1
    nTxMovNF   := 0
    cDocNF     := ""
    nMoedaPA   := 1
    nTxMovPA   := 0
    nVlMovPA   := 0
    cDocPA     := ""
    nVlrMov    := 0
    nTotMov    := 0
    nVlrPgto   := 0
    nTotComp   := 0
    lTxConNF   := .F.
    lTxContr   := .F.
    nQtdNF     := 0
    nQtdEs     := 0
    nQtdPA     := 0
    lSWB       := AliasIndic("SWB")
    nRecNF     := 0
    nRecPA     := 0
    lRet       := .T.
    lPaMovBco  := .T.
    lVldTotal  := .T.
    nVlrAbt    := 0
    nDecres    := 0
    nAcresc    := 0
    lPadrao    := .F.
    nTotCtbil  := 0
    dDtMov     := dDataBase
    nVlrReal   := 0
    nVlrEstr   := 0
    aPagto     := {}
    cSeqNF     := ""
    cSeqBx     := ""
    cFornAdt   := ""
    cLojaAdt   := ""
    cChavSE2   := ""
    nRecMovSE5 := 0
    nRecMovFK2 := 0
    cPret      := ""
    cE2FilOri  := ""
    cTblTmp    := ""
    aDICNDF    := {}
    cHelp      := ""
    lFA330SE2  := ExistBlock("FA330SE2")
    lPaBruto   := SuperGetMv("MV_PABRUTO", .F., "2") $ "1| "
    lBxVlLiq   := SuperGetMv("MV_BP10925", .F., "1") == "2"
    lPaPrime   := SuperGetMv("MV_PAPRIME", .F., "2") == "1"
    lUsaFlag   := SuperGetMV("MV_CTBFLAG", .T., .F.)
    lIrfBaix   := .F.
    lImpPCC    := .F.
    oModelEst  := Nil
    oSubFKA    := NIl
    cCamposE5  := ""
    lMaIntDel  := ExistBlock("MaIntDel")
    lRetMaDel  := .T.
    aSE5       := {}
    aFK2       := {}
    aTmp       := {}
    lGerCmPA   := .F.
    lModEIC    := Type("cModulo") == "C" .And. cModulo == "EIC"
    aPASemMov  := {}
    aSoluc     := {}
    nValVmP    := 0
	nValVmC    := 0
    nRecFK2    := 0
    cKeyFK7NF  := ""
    cKeyFK7PA  := ""
    cChaveTit  := ""
    cTmp       := ""
    nZ         := 0
    lContinua  := .F.

    lEstorno := Len(aEstorno) > 0

    If Len(aParam) >= 3
        lContabil  := aParam[01]
        lAgluCtb   := aParam[02]
        lDigita    := aParam[03]

        If (lContabil .Or. (lEstorno .And. nOperacao == 3))
            nHdlPrv := nHdl
            dbSelectArea("SX5")
            dbSetOrder(1)

            If !SX5->(DbSeek(xFilial()+"09FIN"))
                SX5->(DbSeek(xFilial()+"09"))
            EndIf

            cLoteCtb := X5Descri()

            If nHdl <= 0
                nHdlPrv := HeadProva(cLoteCtb, "FINA340", Substr(cUsuario, 7, 6), @cArqCtb)
            EndIf
        EndIf
    EndIf

    If (lPaBruto .And. (lBxVlLiq .Or. lPaPrime)) .Or. (!lPaBruto .And. (!lBxVlLiq .Or. !lPaPrime))
        If !lEstorno
            cHelp := IIf(lPaBruto, "FINPABRU", "FINPALIQ")
            Help(" ", 1, cHelp, Nil, STR0044, 2, 0,,,,,, {STR0045})
            lRet := .F.
        EndIf
    EndIf

    If lRet
        DbSelectArea("SA2")
        SA2->(DbSetOrder(1))
        DbSelectArea("SE2")
        SE2->(DbSetOrder(1))
        lCmTxCon  := If(cPaisLoc == "BRA", SuperGetMv("MV_CMTXCON", .F., .F.), lCmTxCon)
        nQtdNF    := Len(aSE2)
        nQtdEs    := Len(aEstorno)
        nQtdPA    := Len(aNDF_PA)
        nTotComp  := nSldComp
        lVldTotal := nTotComp > 0
        VALOR     := 0
        VALOR2    := 0
        REGVALOR  := 0

        If lEstorno
            cPadrao  := "589"
        EndIf

        lPadrao := VerPadrao(cPadrao) 
        lContabil := lPadrao .and. lContabil
        
        Begin Transaction
            For nX := 1 To nQtdNF
                If lEstorno
                    If nX > 1 .And. aSE2[nX] == aSE2[nX-1]
                        Loop
                    EndIf

                    SE2->(MsGoto(aSE2[nX]))
                    // FKs - Mantenho a chave da SE5 para correto posicionamento e funcionamento do PE
                    cDocumen    := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                    cChaveTit   := SE2->E2_FILIAL + '|' + SE2->E2_PREFIXO + '|' + SE2->E2_NUM + '|' + ;
                                SE2->E2_PARCELA + '|' + SE2->E2_TIPO + '|' + SE2->E2_FORNECE + '|' + SE2->E2_LOJA
                    cTblTmp  := FinTitCan('', cChaveTit)

                    If !Empty(cTblTmp)
                        (cTblTmp)->(DbSetOrder(1))
                        FK2->(DbSetOrder(1))
                        SE5->(DbSetOrder(7))
                        FK6->(DbSetOrder(3))

                        While lRet .And. (cTblTmp)->(!Eof()) .And. !Empty((cTblTmp)->SEQ)
                            FK2->(DbGoto((cTblTmp)->RECNO))
                            SE5->(DbGoto((cTblTmp)->RECSE5))

                            If !SE5->(MsSeek(SE5->E5_FILIAL + cDocumen + (cTblTmp)->SEQ))
                                (cTblTmp)->(DbSkip())
                                Loop
                            EndIf

                            nRecMovSE5 := SE5->(Recno())
                            nRecMovFK2 := FK2->(Recno())
                            SE5->(DbGoto((cTblTmp)->RECSE5))
                            // FKs - Mantida pela SE5 por uma questão de performance
                            cChavSE2   := xFilial("SE2", SE5->E5_FILORIG) + SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_FORNECE+E5_LOJA)

                            If SE2->(MsSeek(cChavSE2))

                                For nZ := 1 To Len(aEstorno)
                                    IF VALTYPE(aEstorno[nZ][1]) == "N"
                                        If SE2->(RECNO()) == aEstorno[nZ][1]
                                            lContinua := .T.
                                        Endif
                                    ELSE
                                        lContinua := .T.
                                        Exit
                                    ENDIF
                                Next

                                If lContinua
                                    For nY := 1 To 2
                                        nVlrAbt := 0
                                        nAcresc := 0
                                        nDecres := 0

                                        If nY == 2
                                            SE5->(DbGoto(nRecMovSE5))
                                            FK2->(DbGoto(nRecMovFK2))
                                            SE2->(DbGoto(aSE2[nX]))
                                        EndIf

                                        RecLock("SE2")
                                        SE2->E2_SALDO += FK2->FK2_VALOR

                                        If cPaisLoc == "BRA"
                                            cTmp := ""
                                            If __oTotImp == Nil
                                                cQry := " SELECT FK4_IMPOS AS IMP, FK4_VALOR AS VLR "
                                                cQry += "FROM ? FK4 "
                                                cQry += "WHERE FK4_IDORIG = ? "
                                                cQry += "AND FK4_STATUS = '1' "
			                                    cQry += "AND D_E_L_E_T_ = ' ' "
                                                cQry := ChangeQuery(cQry)
                                                __oTotImp := FWPreparedStatement():New(cQry)
                                            EndIf

                                            __oTotImp:SetNumeric(1, RetSqlName("FK4"))
                                            __oTotImp:SetString(2, FK2->FK2_IDFK2)
                                            
                                            cQry := __oTotImp:GetFixQuery()
                                            cTmp := MpSysOpenQuery(cQry)

                                            If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                                                nVlrAbt := FinCanAba()
                                            EndIf

                                            If (cTmp)->VLR > 0 .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|"+MVTXA+"|"+MVTAXA+"|INA|DIC"
                                                lImpPCC := .F.
                                                While !(cTmp)->(Eof())
                                                    Do Case
                                                        Case (cTmp)->IMP == "PIS"
                                                            SE2->E2_SALDO   += (cTmp)->VLR
                                                            SE2->E2_VRETPIS -= (cTmp)->VLR
                                                            lImpPCC := .T.
                                                        Case (cTmp)->IMP == "COF"
                                                            SE2->E2_SALDO   += (cTmp)->VLR
                                                            SE2->E2_VRETCOF -= (cTmp)->VLR
                                                            lImpPCC := .T.
                                                        Case (cTmp)->IMP == "CSL"
                                                            SE2->E2_SALDO   += (cTmp)->VLR
                                                            SE2->E2_VRETCSL -= (cTmp)->VLR
                                                            lImpPCC := .T.
                                                        Case (cTmp)->IMP == "IRF"
                                                            SE2->E2_SALDO += (cTmp)->VLR

                                                            If SE2->E2_VRETIRF > 0
                                                                SE2->E2_VRETIRF -= (cTmp)->VLR
                                                                cPret := If(SE2->E2_VRETIRF == 0, "1", " ")
                                                                SE2->E2_PRETIRF := cPret
                                                            EndIf
                                                        Case (cTmp)->IMP == "ISS"
                                                            SE2->E2_SALDO += (cTmp)->VLR

                                                            If SE2->E2_VRETISS > 0
                                                                SE2->E2_VRETISS -= (cTmp)->VLR
                                                            EndIf
                                                    EndCase
                                                EndDo

                                                If lImpPCC
                                                    cPret := If(SE2->(E2_VRETPIS+E2_VRETCOF+E2_VRETCSL) == 0, "1", " ")

                                                    SE2->E2_PRETPIS := cPret
                                                    SE2->E2_PRETCOF := cPret
                                                    SE2->E2_PRETCSL := cPret
                                                EndIf
                                                FinDelTx(cE2FilOri)
                                            ElseIf SE2->E2_TIPO $ MVPAGANT
                                                Aadd(aDICNDF, {SE2->(Recno()), FK2->FK2_SEQ})
                                            EndIf

                                            If nVlrAbt > 0
                                                SE2->E2_SALDO += nVlrAbt
                                            EndIf
                                        EndIf

                                        //Estorno dos valores acessórios fixos
                                        If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                                            FK6->(DbGoTop())
                                            While FK6->(DbSeek(FwxFilial("FK6") + FK2->FK2_IDFK2 + 'FK2'))
                                                If FK6->FK6_TPDOC == 'JR'
                                                    nAcresc := FK6->FK6_VALMOV
                                                ElseIf FK6->FK6_TPDOC == 'DC'
                                                    nDecres := FK6->FK6_VALMOV
                                                EndIf
                                            EndDo
                                            If SE2->E2_MOEDA > 1
                                                nAcresc := Round(xMoeda(nAcresc, 1, SE2->E2_MOEDA, FK2->FK2_DATA, nCasDec, Nil, FK2->FK2_TXMOED), 2)
                                                nDecres := Round(xMoeda(nDecres, 1, SE2->E2_MOEDA, FK2->FK2_DATA, nCasDec, Nil, FK2->FK2_TXMOED), 2)
                                            EndIf

                                            SE2->E2_SALDO   += nDecres - nAcresc
                                            SE2->E2_SDACRES += nAcresc
                                            SE2->E2_SDDECRE += nDecres
                                        EndIf

                                        If NoRound(SE2->E2_VALOR, 2) == NoRound(SE2->E2_SALDO, 2)
                                            SE2->E2_BAIXA   := CTOD("  /  /  ")
                                            SE2->E2_CORREC  := 0
                                            SE2->E2_MOVIMEN := SE2->E2_BAIXA
                                        EndIf

                                        SE2->(MsUnLock())

                                        If SE2->E2_MOEDA > 1 .And. !SE2->E2_TIPO $ MVABATIM+"|"+MVTXA+"|"+MVTAXA+"|INA|DIC"
                                            FinExclCM(FK2->FK2_FILIAL, FK2->FK2_SEQ)
                                        EndIf

                                        //Estorno FK2.
                                        If lMaIntDel
                                            aTmp := GetArea()
                                            aSE5 := SE5->(GetArea())
                                            aFK2 := FK2->(GetArea())

                                            If (lRetMaDel := ExecBlock("MaIntDel",.F.,.F.))
                                                nOperacao := 2
                                            EndIf

                                            RestArea(aFK2)
                                            RestArea(aSE5)
                                            RestArea(aTmp)
                                        EndIf

                                        If lRetMaDel
                                            FK2->(DbSetOrder(1))

                                            If FK2->(MsSeek(SE5->(E5_FILIAL+E5_IDORIG)))
                                                nRecFK2 := FK2->(Recno())
                                                oModelEst := FWLoadModel("FINM020")
                                                oModelEst:SetOperation(4)
                                                oModelEst:Activate()
                                                oSubFKA := oModelEst:GetModel("FKADETAIL")
                                                oSubFKA:SeekLine({{"FKA_IDORIG", SE5->E5_IDORIG}})
                                                oModelEst:SetValue("MASTER", "E5_GRV", .T.)
                                                oModelEst:SetValue("MASTER", "HISTMOV", "Cancelamento de Compensação")
                                                oModelEst:SetValue("MASTER", "E5_CAMPOS", cCamposE5 )
                                                oModelEst:SetValue("MASTER", "E5_OPERACAO", nOperacao)

                                                cCamposE5 := "{"

                                                If lMaIntDel
                                                    If lUsaFlag
                                                        aAdd(aFlagCTB, {"E5_LA", "S", "SE5", SE5->(Recno()), 0, 0, 0})
                                                        aAdd(aFlagCTB, {"FK2_LA", "S", "FK2", nRecFk2, 0, 0, 0})
                                                    EndIf

                                                    If UsaSeqCor()
                                                        cCamposE5 += "{'E5_NODIA', ''}"
                                                    EndIf
                                                EndIf

                                                cCamposE5 += "}"

                                                If oModelEst:VldData()
                                                    oModelEst:CommitData()
                                                    SE5->(dbGoto(oModelEst:GetValue("MASTER", "E5_RECNO")))
                                                Else
                                                    lRet := .F.
                                                    cLog := cValToChar(oModelEst:GetErrorMessage()[4]) + ' - '
                                                    cLog += cValToChar(oModelEst:GetErrorMessage()[5]) + ' - '
                                                    cLog += cValToChar(oModelEst:GetErrorMessage()[6])
                                                    Help(Nil, Nil, "FINCMPAUTO", Nil, cLog, 1, 0 )
                                                EndIf

                                                If lRet .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                                                    If lPadrao .And. (lContabil .Or. (!lContabil .And. (nOperacao == 3 .And. AllTrim(SE5->E5_LA) == "S")))
                                                        STRLCTPAD := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                                                        VALOR     := If(SE2->E2_MOEDA != 1, FK2->FK2_VLMOE2, FK2->FK2_VALOR)
                                                        FK6->(DbGoTop())
                                                        If FK6->(DbSeek(FwxFilial("FK6") + FK2->FK2_IDFK2 + 'FK2' + 'CM') )
                                                            VALOR2    := FK6->FK6_VALMOV
                                                        EndIf
                                                        nTotCtbil += VALOR
                                                        DetProva(nHdlPrv, cPadrao, "FINA340", cLoteCtb, Nil, Nil, Nil, Nil, Nil, Nil, Nil, @aFlagCTB, Nil, Nil)
                                                        VALOR     := 0
                                                        VALOR2    := 0
                                                    EndIf
                                                EndIf

                                                oModelEst:DeActivate()
                                                oModelEst:Destroy()
                                                oModelEst:= Nil
                                                oSubFKA := Nil
                                            Else
                                                lRet := .F.
                                                Help(Nil, Nil, "FINCMPAUTO", Nil, STR0043, 1, 0 )
                                            EndIf
                                        EndIf
                                    Next nY
                                    lContinua:= .F.
                                Endif    
                            EndIf

                            If (lRet)
                                // Executa o bloco de codigo passado
                                Eval(bBlock, aSE2[nX], cDocumen)
                            EndIf

                            (cTblTmp)->(DbSkip())
                        EndDo
                    EndIf
                Else
                    If (nX == 1 .Or. SE2->E2_SALDO <= 0)
                        SE2->(MsGoto(aSE2[nX]))
                    EndIf

                    If SE2->E2_SALDO <= 0
                        Loop
                    ElseIf nSldComp <= 0
                        nSldComp := SE2->E2_SALDO
                    EndIf

                    lIrfBaix := SA2->(Dbseek(xFilial("SA2")+SE2->(E2_FORNECE+E2_LOJA))) .And. SA2->A2_CALCIRF == "2"
                    nRecNF   := SE2->(Recno())
                    lTxConNF := (lCmTxCon .And. SE2->E2_MOEDA > 1 .And. SE2->E2_TXMOEDA != 0)
                    nMoedaNF := SE2->E2_MOEDA
                    nTxMovNF := 0
                    nTotMov  := 0
                    nVlrAbt  := SomaAbat(SE2->E2_PREFIXO, SE2->E2_NUM, SE2->E2_PARCELA, "P", SE2->E2_MOEDA,,SE2->E2_FORNECE)
                    nAcresc  := SE2->E2_SDACRES
                    nDecres  := SE2->E2_SDDECRE
                    nSldComp := ((nSldComp+nAcresc) - (nVlrAbt+nDecres))
                    cDocNF   := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                    cSeqNF   := FaNxtSeqBx("SE2",.T.)
                    
					cChaveTit := xFilial("SE2") + "|" + SE2->E2_PREFIXO + "|" + SE2->E2_NUM + "|" + SE2->E2_PARCELA + "|" + SE2->E2_TIPO + "|" + SE2->E2_FORNECE + "|" + SE2->E2_LOJA
					cKeyFK7NF := FINGRVFK7("SE2", cChaveTit)

                    If SE2->E2_MOEDA > 1
                        nTxMovNF := nTaxaNF

                        If nTxMovNF <= 0
                            nTxMovNF := Iif(SE2->E2_TXMOEDA > 0, SE2->E2_TXMOEDA, RecMoeda(If(Empty(SE2->E2_DTVARIA), dBaixa, SE2->E2_DTVARIA), SE2->E2_MOEDA))
                        EndIf
                    EndIf

                    If nRecPA > 0
                        SE2->(DbGoto(nRecPA))
                    EndIf

                    For nY := 1 To nQtdPA
                        //Posiciono no PA
                        SE2->(DbGoto(aNDF_PA[nY]))

                        If (nRecPA == 0 .Or. !lPaMovBco .Or. SE2->E2_SALDO <= 0) 

                            If (aNDF_PA[nY] <= 0 .Or. SE2->E2_SALDO <= 0)
                                Loop
                            EndIf

                            lPaMovBco := .T.
                        EndIf

                        If SE2->E2_TIPO $ MVPAGANT .And. nRecPA != SE2->(Recno())
                            aMovPA := FinMovPA()

                            If !aMovPA[1]
                                lPaMovBco := aMovPA[1]
                                aAdd(aPASemMov, {SE2->E2_PREFIXO, SE2->E2_NUM, SE2->E2_PARCELA, SE2->E2_TIPO} ) 
                                Loop
                            EndIf

                            dDtMov := aMovPA[2]
                        EndIf

                        nRecPA   := SE2->(Recno())
                        lTxContr := (lTxConNF .And. SE2->E2_MOEDA > 1 .And. SE2->E2_TXMOEDA > 0)
                        nVlrMov  := SE2->E2_SALDO
                        nMoedaPA := SE2->E2_MOEDA
                        nTxMovPA := 0
                        nVlrPgto := 0
                        nVlMovPA := 0
                        cDocPA   := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                        cFornAdt := SE2->E2_FORNECE
                        cLojaAdt := SE2->E2_LOJA
                        cSeqBx   := FaNxtSeqBx("SE2",.T.)
                        aPagto   := {}
                        lGerCmPA := !lCmTxCon .And. lModEIC .And. nTaxaNF > 0 .And. nMoedaNF > 1

       					cChaveTit := xFilial("SE2") + "|" + SE2->E2_PREFIXO + "|" + SE2->E2_NUM + "|" + SE2->E2_PARCELA + "|" + SE2->E2_TIPO + "|" + SE2->E2_FORNECE + "|" + SE2->E2_LOJA
    					cKeyFK7PA := FINGRVFK7("SE2", cChaveTit)


                        If !Empty(SE2->E2_TXMDCOR)	
                            nValVmP := Round((SE2->E2_VALOR * SE2->E2_TXMDCOR) - SE2->E2_VLCRUZ,2)
                        Endif

                        If cSeqNF > cSeqBx
                            cSeqBx := cSeqNF
                        EndIf

                        If SE2->E2_MOEDA > 1
                            nTxMovPA := nTaxaPA

                            If nTxMovPA <= 0
                                nTxMovPA := Iif(SE2->E2_TXMOEDA > 0, SE2->E2_TXMOEDA, RecMoeda(If(Empty(SE2->E2_DTVARIA) , dBaixa, Iif((lPaMovBco),dDtMov,SE2->E2_DTVARIA)), SE2->E2_MOEDA))
                            EndIf
                        EndIf

                        If Len(aNDFDados) >= nY .and. aNDF_PA[nY] == aNDFDados[nY][1]
                            aValores := aClone( aNDFDados[nY][3] )
                            If aValores[12] > 0
                                nVlrMov := If(nMoedaPA == nMoedaNF, aValores[11], aValores[12])
                            Endif
                        ENDIF

                        If nMoedaPA != nMoedaNF
                            If (nMoedaPA == 1 .Or. nMoedaNF == 1)
                                If nMoedaPA == 1
                                    nVlrMov := xMoeda(nVlrMov, SE2->E2_MOEDA, nMoedaNF, dDtMov, nCasDec, 0, nTxMovNF)
                                Else
                                    nVlrMov := xMoeda(nVlrMov, SE2->E2_MOEDA, nMoedaNF, dDtMov, nCasDec, nTxMovPA)
                                EndIf
                            Else
                                nVlrMov := xMoeda(nVlrMov, SE2->E2_MOEDA, nMoedaNF, dDtMov, nCasDec, nTxMovPA, nTxMovNF)
                            EndIf
                        EndIf

                        If (nTotMov + nVlrMov) > nSldComp
                            nVlrMov := (nSldComp - nTotMov)
                        EndIf

                        nTotMov  += Round(nVlrMov, 2)
                        nTotComp -= Round(nVlrMov, 2)
                        nVlMovPA := nVlrMov

                        If lTxContr
                            If nMoedaPA != nMoedaNF
                                nVlMovPA := xMoeda(nVlrMov, nMoedaNF, nMoedaPA, dDtMov, nCasDec, nTxMovNF, nTxMovPA)
                            EndIf

                            nVlrPgto  := xMoeda(nVlMovPA, nMoedaPA, 1, dDtMov, nCasDec, nTxMovPA)
                        EndIf

                        If nVlrMov > 0
                            If (nMoedaNF == 1 .Or. nMoedaPA == 1)
                                If nMoedaNF == 1
                                    nVlrReal := Round(nVlrMov, 2)
                                    nVlrEstr := Round(If(nMoedaPA > 1, xMoeda(nVlrMov, nMoedaNF, nMoedaPA, dDtMov, nCasDec, 0, nTxMovPA), nVlrReal), 2)
                                    nVlMovPA := nVlrEstr
                                Else
                                    nVlrEstr := Round(nVlrMov, 2)
                                    nVlrReal := Round(xMoeda(nVlrMov, nMoedaNF, nMoedaPA, dDtMov, nCasDec, nTxMovNF, 0), 2)
                                    nVlMovPA := nVlrReal
                                EndIf
                            Else
                                nVlrEstr := Round(nVlMovPA, 2)
                                nVlrReal := Round(xMoeda(nVlMovPA, nMoedaPA, 1, dDtMov, nCasDec, nTxMovPA, 0), 2)
                                nVlMovPA := nVlrEstr
                            EndIf

                            Aadd(aPagto, {nRecPA, nTxMovPA, nVlrMov, nVlrReal, nVlrEstr, nVlrPgto, cDocNF, 0, 0, cFornAdt, cLojaAdt, cSeqBx, cLoteCtb, lGerCmPA, cKeyFK7NF })

                            If (lGerCmPA .Or. (nMoedaPA == 1 .And. nMoedaNF > 1))
                                aPagto[len(aPagto), 2] := nTxMovNF
                            EndIf

                            RecLock("SE2")
                            SE2->E2_SALDO   -= nVlMovPA
                            SE2->E2_BAIXA   := dBaixa
                            SE2->E2_LOTE    := cLoteCtb
                            SE2->E2_MOVIMEN := SE2->E2_BAIXA
                            SE2->E2_DESCONT := 0
                            SE2->E2_MULTA   := 0
                            SE2->E2_JUROS   := 0
                            SE2->E2_VALLIQ  := nVlMovPA
                            SE2->(MsUnLock())

                            //Posiciona na NF
                            SE2->(MsGoto(nRecNF))

                            If (nMoedaNF == 1 .Or. nMoedaPA == 1)
                                If nMoedaNF == 1
                                    nVlrReal := Round(nVlrMov, 2)
                                    nVlrEstr := Round(If(nMoedaPA > 1, xMoeda(nVlrMov, nMoedaNF, nMoedaPA, SE2->E2_EMISSAO, nCasDec, 0, nTxMovPA), nVlrReal), 2)
                                Else
                                    nVlrEstr := Round(nVlrMov, 2)
                                    nVlrReal := Round(xMoeda(nVlrMov, nMoedaNF, nMoedaPA, SE2->E2_EMISSAO, nCasDec, nTxMovNF, 0), 2)
                                EndIf
                            Else
                                nVlrEstr := Round(nVlrMov, 2)
                                nVlrReal := Round(xMoeda(nVlrMov, nMoedaNF, 1, SE2->E2_EMISSAO, nCasDec, nTxMovNF, 0), 2)
                            EndIf

                            If !Empty(SE2->E2_TXMDCOR)	
		                        nValVmC := Round((SE2->E2_VALOR * SE2->E2_TXMDCOR) - SE2->E2_VLCRUZ,2)
	                        Endif

                            Aadd(aPagto, {nRecNF, nTxMovNF, nVlrMov, nVlrReal, nVlrEstr, nVlrPgto, cDocPA, nDecres, nAcresc, cFornAdt, cLojaAdt, cSeqBx, cLoteCtb, lGerCmPA, cKeyFK7PA})

                            If nMoedaNF == 1 .And. nMoedaPA > 1
                                aPagto[len(aPagto), 2] := nTxMovPA
                            EndIf

                            RecLock("SE2")
                            SE2->E2_SALDO   -= Round(nVlrMov, 2)
                            SE2->E2_BAIXA   := dBaixa
                            SE2->E2_LOTE    := cLoteCtb
                            SE2->E2_MOVIMEN := SE2->E2_BAIXA
                            SE2->E2_DESCONT := 0
                            SE2->E2_MULTA   := 0
                            SE2->E2_JUROS   := 0
                            SE2->E2_VALLIQ  := Round(nVlrMov, 2)

                            If cPaisLoc == "BRA" .And. (SE2->(E2_SDDECRE+E2_SDACRES)+ nVlrAbt) > 0
                                If SE2->(E2_SDDECRE+E2_SDACRES) > 0
                                    SE2->E2_SDDECRE -= nDecres
                                    SE2->E2_SALDO   -= nDecres
                                    SE2->E2_SDACRES -= nAcresc
                                EndIf

                                If SE2->E2_SALDO <= nVlrAbt
                                    SE2->E2_SALDO -= nVlrAbt
                                    FinBxAbat(nVlrAbt, nTxMovNF, dBaixa, cLoteCtb)
                                EndIf
                            EndIf

                            If lFA330SE2
                                ExecBlock("FA330SE2",.F.,.F.)
                            EndIf

                            SE2->(MsUnLock())

                            //Trade Easy
                            If lSWB .And. !Empty(SWB->WB_BANCO)
                                SA6->(DbSetOrder(1))
                                SA6->(DbSeek(xFilial("SA6")+AVKEY(SWB->WB_BANCO,"A6_COD")+AVKEY(SWB->WB_AGENCIA,"A6_AGENCIA")+AVKEY(SWB->WB_CONTA,"A6_NUMCON")))
                            EndIf

                            lRet := FinMovCmp(Nil, "FINA340", bBlock, lContabil, dBaixa, aPagto, aRecSE5, nValVmP, nValVmC)

                            // Executa o bloco de codigo passado
                            If (lRet)
                                Eval(bBlock, aSE2[nX], cSeqBx)
                            EndIf

                            If lRet .And. lPadrao .And. lContabil
                                STRLCTPAD := SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA)
                                VALOR     := If(Val(FK2->FK2_MOEDA) == 1, FK2->FK2_VALOR, FK2->FK2_VLMOE2)
                                FK6->(DbGoTop())
                                If FK6->(DbSeek(FwxFilial("FK6") + FK2->FK2_IDFK2 + 'FK2' + 'CM') )
                                    VALOR2    := FK6->FK6_VALMOV
                                EndIf
                                nTotCtbil += VALOR
                                REGVALOR  := nRecPA
                                DetProva(nHdlPrv, cPadrao, "FINA340", cLoteCtb,/*nLinha*/,/*lExecuta*/,/*cCriterio*/,/*lRateio*/,/*cChaveBusca*/,/*aCT5*/,/*lPosiciona*/,@aFlagCTB,/*aTabRecOri*/,/*aDadosProva*/)
                                VALOR     := 0
                                VALOR2    := 0
                            EndIf
                        EndIf

                        If (!lRet .Or. (nY == nQtdPA) .Or. (nTotMov >= nSldComp))
                            exit
                        EndIf

                        SE2->(MsGoto(nRecPA))
                    Next nY

                    SE2->(MsGoto(nRecNF))
                EndIf

                nSldComp := 0
                nAcresc  := 0
                nVlrAbt  := 0
                nDecres  := 0

                If (!lRet .Or. (nX == nQtdNF) .Or. (lVldTotal .And. nTotComp <= 0))
                    If !lRet
                        DisarmTransaction()
                    EndIf

                    exit
                EndIf

                SE2->(MsGoto(nRecNF))
            Next nX

            //Contabilização
            If lRet .And. lPadrao .And. nTotCtbil > 0
                VALOR := nTotCtbil
                SE5->(dbGoTo(0))
                SE2->(dbGoTo(0))
                FK2->(dbGoTo(0))

                RodaProva(nHdlPrv, VALOR)
                cA100Incl(cArqCtb, nHdlPrv, 1, cLoteCtb, lDigita, lAgluCtb)
            EndIf
        End Transaction
        If lHelp .and. Len(aPASemMov) > 0  
            aAdd(aSoluc,STR0049 + CRLF)
            aEval(aPASemMov, {|x| aAdd(aSoluc,Alltrim(x[4]) + "-" + Alltrim(x[1]) + "-" + Alltrim(x[2]) + "-" + Alltrim(x[3]) + CRLF)} )
            Help(" ",1,"NOMOVADT",,STR0048,1,0,,,,,,aSoluc) 
        EndIf    
    EndIf

    If lEstorno .And. __oCompAu != Nil
        __oCompAu:Delete()
        __oCompAu := Nil
    EndIf

    RestArea(aAreaFK2)
    RestArea(aAreaAtu)
    RestArea(aAreaSE2)
Return lRet

//------------------------------
/*/{Protheus.doc}FinMovCmp
Gera os movimentos de baixa da compensação.

@param aEstorno, Vetor com os recnos a serem cancelados
@param cOrigem, characters, origem da compensação
@param bBlock, block, bloco de código
@param lPadrao, logic, lançamento contábil
@param dBaixa, date, data da baixa/compensação
@param aPagto, matriz de de 2 linhas e 13 colunas
[1,1] - Recno do PA/NF
[1,2] - Taxa de movimento
[1,3] - Valor de movimento
[1,4] - Valor em moeda forte
[1,5] - Valor em moeda estrangeira
[1,6] - Valor de pagamento
[1,7] - Chave do título
[1,8] - Valor do acréscimo
[1,9] - Valor do decréscimo
[1,10] - Fornecedor do adiantamento
[1,11] - Loja do adiantamento
[1,12] - Sequência de baixa
[1,13] - Lote Contábil
[1,14] - Gera CM para PA (Lógico)
[1,15] - Chave FK7 (se PA, chave FK7 da NF, se NF, chave FK7 do PA - FK2_IDCOMP)

@param aRecSE5, matriz que contém os recnos da SE5 para posterior contabilização

@return lRet, Lógico indicado que a gravação foi efetuada sem erro

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//------------------------------
Static Function FinMovCmp(aEstorno, cOrigem, bBlock, lPadrao, dBaixa, aPagto, aRecSE5, nValVmP, nValVmC)
    Local aAreaAtu  := GetArea()
    Local aAreaSE2  := SE2->(GetArea())
    Local l340Mov1  := ExistBlock("SE5FI340")
    Local l340Mov2  := ExistBlock("SE5FI341")
    Local oModelBxP := NIl
    Local oSubFK2   := Nil
    Local oSubFK5   := Nil
    Local oSubFK6   := Nil
    Local cLog      := ""
    Local cChaveFK7 := ""
    Local cCamposE5 := ""
    Local lRet      := .T.
    Local cIdFK2    := ""
    Local cLa       := "N"
    Local cMoeda    := ""
    Local nX        := 0
    Local nCm       := 0
    Local cFunname  := SubStr(FunName(),1,TamSx3("FK5_ORIGEM")[1])
    Local nTamLote  := TAMSX3("FK2_LOTE")[1]
    Local nRecSE5   := 0

    Default aEstorno := {}
    Default cOrigem  := "FINA340"
    Default bBlock   := {|| .T.}
    Default lPadrao  := .F.
    Default dBaixa   := dDataBase
    Default aPagto   := {}
    Default aRecSE5  := {}
    Default nValVmP  := 0
    Default nValVmC  := 0
    
    If Len(aEstorno) == 0
        If lPadrao
            cLa := "S"
        EndIf

        For nX := 1 To Len(aPagto)
            SE2->(DbGoto(aPagto[nX,1]))
            cMoeda := StrZero(SE2->E2_MOEDA, 2)
            nCM    := 0

            If (SE2->E2_MOEDA > 1 .Or. cPaisLoc != "BRA")
                If (nCm := FInCorrec(aPagto[nX,3], aPagto[nX,6], "SE2", aPagto[nX,2], aPagto[nX,14])) != 0
                     If nCM <> 0 .and. (nValVmP <> 0 .or. nValVmC <> 0)
                        nCM := nCM - (nValVmP - nValVmC)
                    Endif
                    RecLock("SE2")
                    SE2->E2_CORREC := nCm
                    SE2->(MsUnLock())
                EndIf
            EndIf

            cCamposE5 := "{"
            cCamposE5 += "{'E5_DTDIGIT'  ,STOD('" + DTOS(SE2->E2_BAIXA) + "')}"
            cCamposE5 += ",{'E5_PREFIXO' ,'" + SE2->E2_PREFIXO + "'}"
            cCamposE5 += ",{'E5_NUMERO'  ,'" + SE2->E2_NUM     + "'}"
            cCamposE5 += ",{'E5_PARCELA' ,'" + SE2->E2_PARCELA + "'}"
            cCamposE5 += ",{'E5_CLIFOR'  ,'" + SE2->E2_FORNECE + "'}"
            cCamposE5 += ",{'E5_LOJA'    ,'" + SE2->E2_LOJA    + "'}"
            cCamposE5 += ",{'E5_BENEF'   ,'" + SE2->E2_NOMFOR  + "'}"
            cCamposE5 += ",{'E5_TIPO'    ,'" + SE2->E2_TIPO    + "'}"
            cCamposE5 += ",{'E5_FORNECE' ,'" + SE2->E2_FORNECE + "'}"
            cCamposE5 += ",{'E5_DTDISPO' ,STOD('" + DTOS(SE2->E2_BAIXA) + "')}"
            cCamposE5 += ",{'E5_LA'      ,'" + cLa             + "'}"
            cCamposE5 += ",{'E5_FORNADT' ,'" + aPagto[nX,10]   + "'}"
            cCamposE5 += ",{'E5_LOJAADT' ,'" + aPagto[nX,11]   + "'}"
            cCamposE5 += ",{'E5_MOEDA'   ,'" + cMoeda          + "'}"
            cCamposE5 += ",{'E5_VLCORRE' ," + cValToChar(nCm) + "}"
            cCamposE5 += ",{'E5_VLDESCO', " + cValToChar(aPagto[nX,8]) + "}"
            cCamposE5 += ",{'E5_VLDECRE', " + cValToChar(aPagto[nX,8]) + "}"
            cCamposE5 += ",{'E5_VLJUROS', " + cValToChar(aPagto[nX,9]) + "}"
            cCamposE5 += ",{'E5_VLACRES', " + cValToChar(aPagto[nX,9]) + "}"
            cCamposE5 += "}"

            oModelBxP:=	FWLoadModel("FINM020")
            oModelBxP:SetOperation(MODEL_OPERATION_INSERT)
            oModelBxP:Activate()
            cChaveFK7 := FINGRVFK7("SE2", xFilial("SE2", SE2->E2_FILORIG)+"|"+SE2->E2_PREFIXO+"|"+SE2->E2_NUM+"|"+SE2->E2_PARCELA+"|"+SE2->E2_TIPO+"|"+SE2->E2_FORNECE+"|"+SE2->E2_LOJA)
            cIdFK2    := FWUUIDV4()

            oModelBxP:SetValue("FKADETAIL", "FKA_IDORIG", cIdFK2)
            oModelBxP:SetValue("FKADETAIL", "FKA_TABORI", "FK2")
            oModelBxP:SetValue("MASTER",    "E5_GRV", .T.)
            oModelBxP:SetValue("MASTER",    "E5_CAMPOS", cCamposE5)
            oModelBxP:SetValue("MASTER",    "NOVOPROC", .T.)
            oSubFK2 := oModelBxP:GetModel("FK2DETAIL")
            oSubFK5 := oModelBxP:GetModel("FK5DETAIL")

            //Dados da baixa a pagar
            oSubFK2:SetValue("FK2_DATA",   SE2->E2_BAIXA)
            oSubFK2:SetValue("FK2_VALOR",  If(SE2->E2_MOEDA == 1, aPagto[nX,4], aPagto[nX,5]))
            oSubFK2:SetValue("FK2_MOEDA",  StrZero(SE2->E2_MOEDA,2))
            oSubFK2:SetValue("FK2_NATURE", SE2->E2_NATUREZ)
            oSubFK2:SetValue("FK2_RECPAG", "P")
            oSubFK2:SetValue("FK2_TPDOC",  If(SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|INA|DIC", "BA", "CP"))
            oSubFK2:SetValue("FK2_VLMOE2", If(SE2->E2_MOEDA == 1, aPagto[nX,5], aPagto[nX,4]))
            oSubFK2:SetValue("FK2_MOTBX",  "CMP" )
            oSubFK2:SetValue("FK2_TXMOED", aPagto[nX,2])
            oSubFK2:SetValue("FK2_ORIGEM", cFunname)
            oSubFK2:SetValue("FK2_SEQ",    aPagto[nX,12])
            oSubFK2:SetValue("FK2_IDDOC",  cChaveFK7)
            oSubFK2:SetValue("FK2_FILORI", SE2->E2_FILORIG)
            oSubFK2:SetValue("FK2_LOTE",   Substr(aPagto[nX,13], 1, nTamLote))
            oSubFK2:SetValue("FK2_DOC",    aPagto[nX,7])
            oSubFK2:SetValue("FK2_HISTOR", STR0027)
            If Len(aPagto[nX]) > 14
                oSubFK2:SetValue("FK2_IDCOMP", aPagto[nX,15])
            Endif

            If nCM != 0
                FinGerCM(1, "P", nCM, oModelBxP, cIdFK2)
            EndIf

            If oModelBxP:VldData()
                oModelBxP:CommitData()

                If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                    nRecSE5 := oModelBxP:GetValue("MASTER","E5_RECNO")
                    AADD(aRecSE5, { nRecSE5 , SE2->(RECNO()), FK2->(RECNO()) } )
                EndIf
                
            Else
                lRet := .F.
                cLog := cValToChar(oModelBxP:GetErrorMessage()[4]) + ' - '
                cLog += cValToChar(oModelBxP:GetErrorMessage()[5]) + ' - '
                cLog += cValToChar(oModelBxP:GetErrorMessage()[6])
                Help(Nil, Nil, "M020VALID", Nil, cLog, 1, 0)
            EndIf

            oModelBxP:DeActivate()

            If !lRet
                exit
            EndIf

            If nCm != 0
                FinMoedCm(dBaixa)
            EndIf

            If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
                If l340Mov1
                    ExecBlock("SE5FI340",.F.,.F.)
                EndIf
            ElseIf l340Mov2
                ExecBlock("SE5FI341",.F.,.F.)
            EndIf
        Next nX

        RestArea(aAreaSE2)
    EndIf

    If lRet .And. nRecSE5 > 0
        SE5->(DbGoto(nRecSE5))
    EndIf

    oModelBxP:Destroy()
    oModelBxP := Nil
    oSubFK2   := Nil
    oSubFK5   := Nil
    oSubFK6   := Nil

    RestArea(aAreaAtu)
Return lRet

//------------------------------
/*/{Protheus.doc}FInCorrec
Calcula a correção monetária

@param nBasCorr, numeric, valor base para cálculo da cm
@param nVlrPA, numeric, valor do PA
@param cTbl, characters, tabela temporária
@param nTaxaMov, numeric, taxa de movimento da compensação
@return nVlrCm, Valor da correção monetária

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//------------------------------
Static Function FInCorrec(nBasCorr, nVlrPA, cTbl, nTaxaMov, lGerCmPA)
    Local nVlrCm    := 0
    Local nVlrAtual := 0
    Local nVlrEmiss := 0
    Local dDtVaria  := dDataBase
    Local dDtMov    := dDataBase
    Local lGerCm    := .T.
    Local lCmTxCon  := .T.
    Local lCalcCM   := .T.
    Local nCasDec   := 2
    Local lF0870CM  := ExistBlock("F0870CM")

    Default nBasCorr  := 0
    Default nVlrPA    := 0
    Default cTbl      := "SE2"
    Default nTaxaMov  := 0

    If cPaisLoc == "BRA"
        lCmTxCon := SuperGetMv("MV_CMTXCON", .F., .F.)
        lCalcCM  := SuperGetMv("MV_CALCCM", .F., "N") == "S"
        nCasDec  := TamSx3("E2_TXMOEDA")[2]

        If lCmTxCon .And. nVlrPA > 0
            lGerCm := !(cTbl)->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|DIC"
        Else
            lGerCm := (lGerCmPA .Or. (cTbl)->E2_TXMOEDA == 0)
        EndIf
    EndIf

    If lCalcCM .And. lGerCm .And. (cTbl)->E2_MOEDA > 1 .And. !Empty(nBasCorr)
        nVlrAtual := 0
        nVlrEmiss := 0
        dDtVaria := If(Empty((cTbl)->E2_DTVARIA), (cTbl)->E2_EMISSAO, (cTbl)->E2_DTVARIA)

        If lF0870CM
            nVlrCm := Execblock("F080CM",.F.,.F.)
        ElseIf lCmTxCon .And. nVlrPA > 0
            nVlrAtual := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtMov, nCasDec, nTaxaMov)
            nVlrCm    := Round((nVlrAtual - nVlrPA), 2)
        Else
            If (cTbl)->E2_TIPO $ MVPAGANT
                dDtMov := F340MovPA("SE2")[2]
            EndIf

            If Empty((cTbl)->E2_DTVARIA) .And. STR(nBasCorr, 17, 2) == STR((cTbl)->E2_VALOR, 17, 2)
                nVlrEmiss := (cTbl)->E2_VLCRUZ
            Else
                If !Empty((cTbl)->E2_TXMDCOR)
                    nVlrEmiss := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtVaria, nCasDec, (cTbl)->E2_TXMDCOR)
                Else
                    If (cTbl)->E2_TIPO $ MVPAGANT
                        dDtVaria := dDtMov
                    EndIf

                    nVlrEmiss := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtVaria, nCasDec, (cTbl)->E2_TXMOEDA)
                EndIf
            Endif

            nVlrAtual := xMoeda(nBasCorr, (cTbl)->E2_MOEDA, 1, dDtMov, nCasDec, nTaxaMov)
            nVlrCm := Round((nVlrAtual - nVlrEmiss), 2)
        EndIf
    EndIf
Return nVlrCm

//------------------------------
/*/{Protheus.doc}FinBxAbat
Baixa o(s) títulos de abatimento(s)

@param nVlrAbt, numeric, Valor do abatimento
@param nTaxaMov, numeric, Taxa de movimento
@param dBaixa, date, Data da baixa
@param cLote, character, lote da contábil

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//------------------------------
Static Function FinBxAbat(nVlrAbt As Numeric, nTaxaMov As Numeric, dBaixa As Date, cLote As Character)
    Local aAreaSE2 As Array
    Local cTitPai  As Character
    Local cPref    As Character
    Local cNro     As Character
    Local cParc    As Character
    Local cFilOri  As Character
    Local cForLoj  As Character
    Local nCasDec  As Numeric

    Default nVlrAbt  := 0
    Default nTaxaMov := 0
    Default dBaixa   := dDataBase
    Default cLote    := ""

    If nVlrAbt != 0 .And. !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
        If SE2->E2_SALDO == 0
            //Inicializa variáveis
            aAreaSE2 := SE2->(GetArea())
            cFilOri  := xFilial("SE2", SE2->E2_FILORIG)
            cTitPai  := cFilOri+SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA)
            cForLoj  := SE2->(E2_FORNECE+E2_LOJA)
            nCasDec  := TamSx3("E2_TXMOEDA")[2]
            SE2->(dbSetOrder(1))

            If SE2->(dbSeek(cTitPai))
                cPref   := SE2->E2_PREFIXO
                cNro    := SE2->E2_NUM
                cParc   := SE2->E2_PARCELA

                While SE2->(!Eof()) .And. SE2->(E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA) == (cFilOri+cPref+cNro+cParc)
                    If SE2->E2_TIPO $ MVABATIM .And. SE2->(E2_FORNECE+E2_LOJA) == cForLoj
                        If SE2->E2_MOEDA != 1
                            ABATIMENTO += Round(xMoeda(SE2->E2_SALDO, SE2->E2_MOEDA, 1, dBaixa, nCasDec, nTaxaMov), 2)
                        Else
                            ABATIMENTO += SE2->E2_SALDO
                        EndIf

                        //Baixa do Abatimento
                        RecLock("SE2")
                        SE2->E2_SALDO   := 0
                        SE2->E2_BAIXA   := dBaixa
                        SE2->E2_LOTE    := cLote
                        SE2->E2_MOVIMEN := dBaixa
                        SE2->E2_PORTADO := ""
                        SE2->(MsUnlock())
                    EndIf

                    SE2->(dbSkip())
                EndDo
            EndIf

            RestArea(aAreaSE2)
        EndIf
    EndIf
Return Nil

//---------------------------------
/*/{Protheus.doc}FinCanAba
Restaura o valor do título de abatimento

@return nVlrAbt, numeric valor do abatimento

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//---------------------------------
Static Function FinCanAba() As Numeric
    Local nVlrAbt As Numeric
    Local cFilSE2 As Character
    Local aAreaE2 As Array
    Local cTitPai As Character
    Local nCasDec  As Numeric

    //Inicializa variáveis
    nVlrAbt := 0
    cFilSE2 := xFilial("SE2", SE2->E2_FILORIG)
    cTitPai := cFilSE2+ SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA)

    If !SE2->E2_TIPO $ MVPAGANT+"|"+MV_CPNEG+"|"+MVABATIM+"|INA|DIC"
        nCasDec  := TamSx3("E2_TXMOEDA")[2]
        aAreaE2 := SE2->(GetArea())
        SE2->(dbSetOrder(6))
        SE2->(dbSeek(cTitPai))

        While SE2->(!Eof()) .And. cFilSE2+SE2->(E2_FORNECE+E2_LOJA+E2_PREFIXO+E2_NUM+E2_PARCELA) == cTitPai
            If SE2->E2_TIPO $ MVABATIM
                nVlrAbt += SE2->E2_VALOR-SE2->E2_SALDO

                If SE2->E2_MOEDA != 1
                    ABATIMENTO += Round(xMoeda(nVlrAbt, SE2->E2_MOEDA, 1, SE5->E5_DATA, nCasDec, SE5->E5_TXMOEDA), 2)
                Else
                    ABATIMENTO += nVlrAbt
                EndIf

                RecLock("SE2")
                SE2->E2_SALDO := SE2->E2_VALOR
                SE2->E2_BAIXA := Ctod("")
                SE2->(MsUnLock())
            EndIf
            SE2->(dbSkip())
        EndDo

        RestArea(aAreaE2)
    EndIf

Return nVlrAbt

//------------------------------
/*/{Protheus.doc}FinExclCM
Função que excluirá o registro de correção monetaria
na SE5 ao excluir uma compensacao

@param cFilCmp, characters, Filial da compensação
@param cSequen, characters, Sequência de baixa

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//------------------------------
Static Function FinExclCM(cFilCmp As Character, cSequen As Character)
    Local lRet     As Logical
    Local aAreaAtu As Array
    Local aAreaSE5 As Array
    Local cChave   As Character

    Default cFilCmp := xFilial("SE5")
    Default cSequen := SE5->E5_SEQ

    lRet     := .T.
    aAreaAtu := GetArea()
    aAreaSE5 := SE5->(GetArea())
    cChave   := ""

    // FKs - Função de ajuste na SE5 mantida pelo fato da FK estar sendo deletada corretamente
    SE5->(DbSetorder(7))
    If SE5->(DbSeek(cFilCmp + SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO)))
        cChave := cFilCmp+SE5->E5_PREFIXO+SE5->E5_NUMERO+SE5->E5_PARCELA+SE5->E5_TIPO

        While SE5->(E5_FILIAL+E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO) == cChave
            If SE5->E5_TIPODOC $ "VM|CM" .And. SE5->E5_SEQ == cSequen
                RecLock("SE5")
                SE5->(DbDelete())
                SE5->(MsUnLock())
            EndIf
            SE5->(DbSkip())
        EndDo
    EndIf

    RestArea(aAreaSE5)
    RestArea(aAreaAtu)
Return Nil

//------------------------------
/*/{Protheus.doc} FinMoedCm
Atualiza a moeda do registro de correção monetária

@param dBaixa, date, Data da baixa

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//------------------------------
Static Function FinMoedCm(dBaixa)
    Local aArea As Array

    Default dBaixa := dDataBase

    aArea := SE5->(GetArea())
    SE5->(DbSetOrder(2))

    // FKs - Função mantida pela SE5 por se tratar de ajuste de 'CM' na mesma entidade
    If SE5->(MsSeek(xFilial("SE5") + "CM" + SE2->(E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO)+DTOS(dBaixa)+SE2->(E2_FORNECE+E2_LOJA)+FK2->FK2_SEQ))
        If SE5->E5_MOEDA  != "01"
            RecLock("SE5", .F.)
            SE5->E5_MOEDA   := "01"
            SE5->E5_TXMOEDA := 0
            SE5->(MsUnlock())
        EndIf
    EndIf

    RestArea(aArea)
Return Nil

//------------------------------
/*/{Protheus.doc}FinDelTx
Excluir os impostos gerados pela compensação automática.

@param cE2FilOri, characters, Filial de Origem

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//------------------------------
Static Function FinDelTx(cE2FilOri As Character)
    Local lEditSE2 As Logical
    Local aAreaSE2 As Array
    Local cFilSE2  As Character
    Local cChavImp As Character

    Default cE2FilOri := SE2->E2_FILORIG

    //Inicializa variáveis.
    lEditSE2 := .F.
    aAreaSE2 := SE2->(GetArea())
    cFilSE2  := xFilial("SE2", cE2FilOri)

    // FKs - Mantida SE5 por uma questão de performance
    cChavImp := cFilSE2 + SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_FORNECE+E5_LOJA)
    SE2->(DbSetOrder(17))

    If SE2->(MsSeek(cChavImp))
        cChavImp := AllTrim(cChavImp)

        While SE2->(!Eof()) .And. AllTrim(cFilSE2+SE2->E2_TITPAI) == cChavImp
            If SE2->E2_SEQBX == SE5->E5_SEQ .And. !AllTrim(SE5->E5_ORIGEM) $ "FINA340|FINA750"
                RecLock("SE2")
                SE2->(DbDelete())
                SE2->(MsUnlock())
                lEditSE2 := .T.
            EndIf
            SE2->(DbSkip())
        EndDo
    EndIf

    RestArea(aAreaSE2)

    If lEditSE2
        RecLock("SE2")
    EndIf
Return Nil

//-------------------------------------
/*/{Protheus.doc}FinTitCan
Filtra os movimentos de compensação, para estorno

@param cDocumen, characters, chave do título
@return cTblTmp, characters alias da tabela temporária com os
movimentos de compensação a serem cancelados

@author Sivaldo Oliveira
@since  12/08/2019
@version 12
@type function
/*/
//-------------------------------------
Static Function FinTitCan(cDocumen As Character, cChaveTit As Character) As Character
    Local cDb     As Character
    Local cQry    As Character
    Local cQryA   As Character
    Local cInsert As Character
    Local cTblTmp As Character
    Local cIDDOC  As Character
    Local nErro   As Numeric
    Local aArea   As Array
    Local cRotina As Character
    Local lFks    As Logical

    Default cDocumen    := ""
    Default cChaveTit   := ""

    //Inicializa variáveis
    cInsert := ""
    cTblTmp := ""
    nErro   := 0
    cRotina := ""
    lFks    := .F.
    
    If !Empty(cChaveTit)

        aArea    := SE2->(GetArea())
        cQry     := ""
        cDb      := AllTrim(tcGetdb())
        cTblTmp  := "TMPSE5"
        If __nTamOri == Nil
            __nTamOri := TamSx3("FK2_ORIGEM")[1]
        EndIf
        cRotina  := "'" + PadR("FINA340", __nTamOri, " ") + "', '" + PadR("FINA750", __nTamOri, " ") +"'"
        lFks    := .T.

        cIDDOC      := FINBuscaFK7(cChaveTit, "SE2")
        If __oCanMov == Nil
            cQry += "SELECT FK2.FK2_SEQ, FK2.R_E_C_N_O_, SE5.R_E_C_N_O_ RECSE5 FROM ? FK2 "
            cQry += "INNER JOIN ? SE5 ON SE5.E5_IDORIG = FK2.FK2_IDFK2 "
            cQry += "AND SE5.E5_TABORI = 'FK2' AND SE5.D_E_L_E_T_ = ' ' "
            cQry += "WHERE FK2.FK2_RECPAG = 'P' AND FK2.FK2_TPDOC IN ('BA', 'CP') "
            cQryA := "AND FK2.FK2_IDCOMP = ? "
            cQryA += "AND FK2.FK2_MOTBX = 'CMP' "
            cQryA += "AND FK2.FK2_ORIGEM NOT IN (" + cRotina + ") "
            cQryA += "AND FK2.FK2_DATA <= '" + DTOS(dDataBase) + "' "
            cQryA += "AND FK2.D_E_L_E_T_ = ' ' "
            cQry += cQryA + "AND FK2.FK2_SEQ NOT IN ("
            cQry += "SELECT EST.FK2_SEQ FROM ? EST "
            cQry += "WHERE EST.FK2_RECPAG = 'R' AND EST.FK2_TPDOC = 'ES' "
            cQry += StrTran(cQryA, "FK2.", "EST.") + ") "
               
            cQry := ChangeQuery(cQry)
            __oCanMov := FWPreparedStatement():New(cQry)
        EndIf

        __oCanMov:SetNumeric(1, RetSqlName("FK2"))
        __oCanMov:SetNumeric(2, RetSqlName("SE5"))
        __oCanMov:SetString(3, cIDDOC)
        __oCanMov:SetNumeric(4, RetSqlName("FK2"))
        __oCanMov:SetString(5, cIDDOC)
    Else
        If !Empty(cDocumen)
            aArea    := SE2->(GetArea())
            cQry     := ""
            cDb      := AllTrim(tcGetdb())
            cTblTmp  := "TMPSE5"
            If __nTamOri == Nil
                __nTamOri := TamSx3("E5_ORIGEM")[1]
            EndIf
            If __nTamDoc == Nil
                __nTamDoc := TamSx3("E5_DOCUMEN")[1]
            EndIf
            cDocumen := PadR(cDocumen, __nTamDoc, " ")
            cRotina  := "'" + PadR("FINA340", __nTamOri, " ") + "', '" + PadR("FINA750", __nTamOri, " ") +"'"

            If __oCanMov == Nil
                cQry += "SELECT SE5.E5_SEQ, SE5.R_E_C_N_O_ FROM ? SE5 "
                cQry += "WHERE SE5.E5_DOCUMEN = ? "
                cQry += "AND SE5.E5_RECPAG = 'P' "
                cQry += "AND SE5.E5_TIPODOC IN ('BA', 'CP') AND SE5.E5_MOTBX = 'CMP' "
                cQry += "AND SE5.E5_ORIGEM NOT IN (" + cRotina + ") "
                cQry += "AND SE5.E5_DATA <= '" + DTOS(dDataBase) + "' "
                cQry += "AND SE5.E5_KEY = '" + Space(TamSx3("E5_KEY")[1]) + "' AND SE5.D_E_L_E_T_ = ' ' AND SE5.E5_SEQ NOT IN ("
                cQry += "SELECT EST.E5_SEQ FROM ? EST "
                cQry += "WHERE EST.E5_DOCUMEN = ? "
                cQry += "AND EST.E5_RECPAG = 'R' AND EST.E5_TIPODOC = 'ES' "
                cQry += "AND EST.E5_ORIGEM NOT IN (" + cRotina + ") "
                cQry += "AND EST.E5_DATA <= '" + DTOS(dDataBase) + "' "
                cQry += "AND EST.E5_KEY = '" + Space(TamSx3("E5_KEY")[1]) +"' AND EST.E5_MOTBX = 'CMP' AND EST.D_E_L_E_T_ = ' ') "

                cQry := ChangeQuery(cQry)
                __oCanMov := FWPreparedStatement():New(cQry)
            EndIf

            __oCanMov:SetNumeric(1, RetSqlName("SE5"))
            __oCanMov:SetString(2, cDocumen)
            __oCanMov:SetNumeric(3, RetSqlName("SE5"))
            __oCanMov:SetString(4, cDocumen)
        EndIf
    EndIf

    cQry := __oCanMov:GetFixQuery()

    If __oCompAu != Nil
        __oCompAu:Delete()
        __oCompAu := Nil
    EndIf

    __oCompAu := FWTemporaryTable():New(cTblTmp)
    If lFks
        __oCompAu:SetFields( { {"SEQ", "C", TamSX3("FK2_SEQ")[1], 0}, {"RECNO", "N", 14, Nil}, {"RECSE5", "N", 14, Nil} } )
    Else
        __oCompAu:SetFields( { {"SEQ", "C", TamSX3("FK2_SEQ")[1], 0}, {"RECNO", "N", 14, Nil} } )
    EndIf
    __oCompAu:AddIndex("1",	{"SEQ"})
    __oCompAu:Create()

    cInsert := "INSERT "

    If cDb == "ORACLE"
        cInsert += " /*+ APPEND */ "
    ElseIf cDb == "DB2"
        cQry := STRTRAN(cQry, "FOR READ ONLY", "")
    EndIf

    cInsert += "INTO " + __oCompAu:GetRealName()
    If lFks
        cInsert += " (SEQ, RECNO, RECSE5) " + cQry
    Else
        cInsert += " (SEQ, RECNO) " + cQry
    EndIf
    Processa({|| nErro := TcSQLExec(cInsert)})

    If nErro >= 0
        (cTblTmp)->(DbGoTop())

        If (cTblTmp)->(Eof())
            __oCompAu:Delete()
            __oCompAu := Nil
            cTblTmp   := ""
            Help(" ", 1, "NAOCOMPEN", Nil, STR0041, 1, 0)
        EndIf
    Else
        __oCompAu:Delete()
        __oCompAu := Nil
        cTblTmp := ""
        Help(" ", 1, "CMPAUTTMP", Nil, STR0042, 1, 0)
    EndIf

    RestArea(aArea)
Return cTblTmp

//------------------------------
/*/{Protheus.doc}FinMovPA
Verifica se o PA possui movimento bancário

@param cTbl, characters, tabela temporária
@return aMovPA, vetor com duas posições.
                [1] - Lógica indicando se o PA possui movimento bancário
                [2] - Data da movimentação bancária do PA

@author Sivaldo Oliveira
@since  18/03/2019
@version 12
@type function
/*/
//------------------------------
Static Function FinMovPA(cTbl)
    Local cQry      := ""
    Local cTblTmp   := ""
    Local cCampoChq := Padr("", TamSX3("FK5_NUMCH")[1])
    Local aMovPA    := {.F., dDataBase}

    Default cTbl := "SE2"

    If __oMoviPA == Nil
        cQry := "SELECT E5_DATA FROM ?  "
        cQry += "WHERE E5_FILIAL = ? AND E5_PREFIXO = ? AND "
        cQry += "E5_NUMERO = ? AND E5_PARCELA = ? AND "
        cQry += "E5_TIPO = ? AND E5_CLIFOR = ? AND E5_LOJA = ? AND "
        cQry += "((E5_TIPODOC = 'PA' ) OR (E5_TIPODOC = 'BA' AND E5_NUMCHEQ <> '" + cCampoChq + "' ) OR "
        cQry += "(E5_TIPODOC = 'CH' AND E5_NUMCHEQ <> '" + cCampoChq + "')) AND "
        cQry += "E5_RECPAG = 'P' AND E5_SITUACA = ' ' AND D_E_L_E_T_ = ' ' "
        cQry := ChangeQuery(cQry)
        __oMoviPA := FWPreparedStatement():New(cQry)
    EndIf

    __oMoviPA:SetNumeric(1, RetSqlName("SE5"))
    __oMoviPA:SetString(2, xFilial("SE5", (cTbl)->E2_FILORIG))
    __oMoviPA:SetString(3, (cTbl)->E2_PREFIXO)
    __oMoviPA:SetString(4, (cTbl)->E2_NUM)
    __oMoviPA:SetString(5, (cTbl)->E2_PARCELA)
    __oMoviPA:SetString(6, (cTbl)->E2_TIPO)
    __oMoviPA:SetString(7, (cTbl)->E2_FORNECE)
    __oMoviPA:SetString(8, (cTbl)->E2_LOJA)

    cQry := __oMoviPA:GetFixQuery()
    cTblTmp := MpSysOpenQuery(cQry)

    If (cTblTmp)->(!Eof()) .And. !Empty((cTblTmp)->E5_DATA)
        aMovPA := {.T., STOD((cTblTmp)->E5_DATA)}
    EndIf

    (cTblTmp)->(DbCloseArea())
Return aMovPA

//------------------------------
/*/{Protheus.doc}CfgAdianta
Retorna a configuração de compartilhamento das tabelas de adiantamento

@param
@return aRet, Array
            [1,1]=Empresa - Modo de compartilhamento FIE
             [1,2]=Unidade de Negócio - Modo de compartilhamento FIE
            [1,3]=Filial - Modo de compartilhamento FIE
            [1,4]Existe Indice 4-Cliente na tabela FIE
            [1,5]Existe Indice 5-fornecedor na tabela FIE
            [2,1]=Empresa - Modo de compartilhamento FR3
            [2,2]=Unidade de Negócio - Modo de compartilhamento FR3
            [2,3]=Filial - Modo de compartilhamento FR3
            [2,4]Existe Indice 8-Cliente na tabela FR3
            [2,5]Existe Indice 9-Fornecedor na tabela FR3
@author Vitor Pires
@since  29/08/2019
@version 12
@type function
/*/
//------------------------------
Function CfgAdianta() As Array
Local aRet As Array
aRet := {;
        {FwModeAccess('FIE',1),;
         FwModeAccess('FIE',2),;
         FwModeAccess('FIE',3),;
         FWSIXUtil():ExistIndex( 'FIE', '4' ),;
         FWSIXUtil():ExistIndex( 'FIE', '5' )},;
        {FwModeAccess('FR3',1),;
         FwModeAccess('FR3',2),;
         FwModeAccess('FR3',3),;
         FWSIXUtil():ExistIndex( 'FR3' , '8' ),;
         FWSIXUtil():ExistIndex( 'FR3' , '9' )},;
        {FwModeAccess('SE1',3),;
         FwModeAccess('SE2',3)} }
Return(aRet)


//------------------------------
/*/{Protheus.doc}SldPCFIE
Retorna o Saldo de adiantamentos do pedido

@param cNumPed, characters
@return nSaldo, numerico
@author Vitor Pires
@since  29/08/2019
@version 12
@type function
/*/
//------------------------------
Function SldPCFIE(cNumPed as Character,cCarteira as Character,nTipo As Numeric, bFiltro As Block ) As Numeric
Local cChaveFIE As Character
Local nSaldo    As Numeric
Local bWhile    As Block

Default bFiltro := {||.T.}

cChaveFIE := xFilial("FIE")+cCarteira+cNumPed
nSaldo := 0
bWhile := bWhile := {|| FIE->(!Eof()) .And. FIE->(FIE_FILIAL + FIE_CART + FIE_PEDIDO) == xFilial( "FIE" ) + cCarteira + cNumPed }

If aAdianta == NIL
    aAdianta := CfgAdianta()
    bFilFIE := Iif(aAdianta[1,4],{|| FIE_FILORI==cFilAnt .Or. Empty(FIE_FILORI)},{||.T.})
    lAdComPart := aAdianta[1,5] .And. 'C' $ aAdianta[1,1]+aAdianta[1,2]+aAdianta[1,3]
Endif

FIE->(dbSetOrder(1))

If FIE->(DbSeek(cChaveFIE))
    While Eval(bwhile)
        If FIE->(Eval(bFilFIE) .And. Eval(bFiltro))
            nSaldo += Iif(nTipo == 0, FIE->FIE_VALOR, FIE->FIE_SALDO)
        EndIf
        FIE->(DbSkip())
    Enddo
EndIf
Return(nSaldo)

/*/{Protheus.doc} VldPedFR3
    Valida se já ouve alguma baixa do Adiantamento relacionado ao pedido.
    @author SIGACRM
    @since 17/03/2020
    @param cPedido = Número do Pedido de Venda
    @param cPrefixo = Prefixo do Título
    @param cTitulo  = Número do Título
    @param cParcela = Número da Parcela
    @param cTipo = Tipo do Título
    @param lValidTOk = Indica se a validacao ocorre no TudoOK ou na desvinculacao do RA
    @return lRet = Retorna se existe registro de baixa relacionado ao pedido
/*/
Static Function VldPedFR3(cPedido as Character, cPrefixo as Character, cTitulo as Character, cParcela as Character, cTipo as Character,;
                          lValidTOk as Logical)
    Local aAreaFR3 	As Array
    Local lRet		As logical

    aAreaFR3 	:= FR3->(GetArea())
    lRet		:= .T.

    FR3->(DbSetOrder(4))

    If FR3->(DbSeek(xFilial("FIE") + 'R' + cPedido ))
        While FR3->(FR3_FILIAL+FR3_CART+FR3_PEDIDO) == xFilial("FIE") + 'R' + cPedido
            If FR3->(AllTrim(FR3_PREFIX) + AllTrim(FR3_NUM) + AllTrim(FR3_PARCEL) + AllTrim(FR3_TIPO) + AllTrim(FR3_PEDIDO)) == ;
               AllTrim(cPrefixo) + AllTrim(cTitulo) + AllTrim(cParcela) + AllTrim(cTipo) + AllTrim(cPedido)

                If (lValidTOk .Or. Empty(TRBADT->PRINCIP))
                    lRet := .F.
                    Exit
                EndIf

            EndIf
            FR3->(DbSkip())
        EndDo
    EndIf

    RestArea(aAreaFR3)

Return lRet
